<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="2494" failures="0" errors="0" time="6.32">
  <testsuite name="extractor-s" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:25" time="0.886" tests="20">
    <testcase classname="extractor-s should return dim field values based on default field accessor" name="extractor-s should return dim field values based on default field accessor" time="0.007">
    </testcase>
    <testcase classname="extractor-s should return measure field values based on default field accessor" name="extractor-s should return measure field values based on default field accessor" time="0">
    </testcase>
    <testcase classname="extractor-s should return joined set when array of fields is used" name="extractor-s should return joined set when array of fields is used" time="0.002">
    </testcase>
    <testcase classname="extractor-s should return raw field values" name="extractor-s should return raw field values" time="0">
    </testcase>
    <testcase classname="extractor-s should return mapped properties from same field" name="extractor-s should return mapped properties from same field" time="0">
    </testcase>
    <testcase classname="extractor-s should return primitive values" name="extractor-s should return primitive values" time="0.001">
    </testcase>
    <testcase classname="extractor-s should return mapped properties from other fields" name="extractor-s should return mapped properties from other fields" time="0">
    </testcase>
    <testcase classname="extractor-s should return collected values" name="extractor-s should return collected values" time="0.001">
    </testcase>
    <testcase classname="extractor-s should return reduced values" name="extractor-s should return reduced values" time="0.001">
    </testcase>
    <testcase classname="extractor-s should return reduced values from multiple fields when tracking" name="extractor-s should return reduced values from multiple fields when tracking" time="0.001">
    </testcase>
    <testcase classname="extractor-s should return reduced values from multiple fields without tracking" name="extractor-s should return reduced values from multiple fields without tracking" time="0.001">
    </testcase>
    <testcase classname="extractor-s should return filtered main values" name="extractor-s should return filtered main values" time="0">
    </testcase>
    <testcase classname="extractor-s getFieldAccessor should return -1 when field is falsy" name="extractor-s getFieldAccessor should return -1 when field is falsy" time="0">
    </testcase>
    <testcase classname="extractor-s getFieldAccessor should return -1 if field is out of bounds" name="extractor-s getFieldAccessor should return -1 if field is out of bounds" time="0">
    </testcase>
    <testcase classname="extractor-s getFieldAccessor should return a field accessor for the second column" name="extractor-s getFieldAccessor should return a field accessor for the second column" time="0">
    </testcase>
    <testcase classname="extractor-s getFieldAccessor should return a field accessor for an attribute dimension" name="extractor-s getFieldAccessor should return a field accessor for an attribute dimension" time="0.001">
    </testcase>
    <testcase classname="extractor-s getFieldAccessor should return a field accessor for an attribute expression" name="extractor-s getFieldAccessor should return a field accessor for an attribute expression" time="0">
    </testcase>
    <testcase classname="extractor-s getFieldAccessor should return origin field accessor for virtual field" name="extractor-s getFieldAccessor should return origin field accessor for virtual field" time="0">
    </testcase>
    <testcase classname="extractor-s getFieldAccessor should return correct index when object has one dimension and five measures, and column order is irregular" name="extractor-s getFieldAccessor should return correct index when object has one dimension and five measures, and column order is irregular" time="0">
    </testcase>
    <testcase classname="extractor-s getFieldAccessor should return correct index when object has two dimensions and one measure, qLeft is 1, and column order is empty" name="extractor-s getFieldAccessor should return correct index when object has two dimensions and one measure, qLeft is 1, and column order is empty" time="0">
    </testcase>
  </testsuite>
  <testsuite name="pie" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:25" time="1.258" tests="10">
    <testcase classname="pie should render slices with default settings" name="pie should render slices with default settings" time="0.008">
    </testcase>
    <testcase classname="pie should set share metadata" name="pie should set share metadata" time="0.001">
    </testcase>
    <testcase classname="pie should filter negative and NaN values" name="pie should filter negative and NaN values" time="0.001">
    </testcase>
    <testcase classname="pie should filter out outerRadius &lt;= innerRadius" name="pie should filter out outerRadius &lt;= innerRadius" time="0.001">
    </testcase>
    <testcase classname="pie arcValue should default to data.value" name="pie arcValue should default to data.value" time="0">
    </testcase>
    <testcase classname="pie arcValue should prioritize .arc" name="pie arcValue should prioritize .arc" time="0.001">
    </testcase>
    <testcase classname="pie configured slices should render with configured settings" name="pie configured slices should render with configured settings" time="0">
    </testcase>
    <testcase classname="pie configured slices should render first slice" name="pie configured slices should render first slice" time="0">
    </testcase>
    <testcase classname="pie configured slices should render second slice" name="pie configured slices should render second slice" time="0">
    </testcase>
    <testcase classname="pie configured slices should render third slice" name="pie configured slices should render third slice" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Component" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:25" time="1.271" tests="33">
    <testcase classname="Component require should be able to require symbol factory" name="Component require should be able to require symbol factory" time="0.007">
    </testcase>
    <testcase classname="Component should forward rendererSettings if renderer has settings func" name="Component should forward rendererSettings if renderer has settings func" time="0.002">
    </testcase>
    <testcase classname="Component should call lifecycle methods with correct context when rendering" name="Component should call lifecycle methods with correct context when rendering" time="0.001">
    </testcase>
    <testcase classname="Component should call lifecycle methods with correct context when updating" name="Component should call lifecycle methods with correct context when updating" time="0">
    </testcase>
    <testcase classname="Component should update brushArgs.config on set" name="Component should update brushArgs.config on set" time="0.003">
    </testcase>
    <testcase classname="Component should update data correctly if there is no progressive" name="Component should update data correctly if there is no progressive" time="0.001">
    </testcase>
    <testcase classname="Component should update data correctly if progressive = false" name="Component should update data correctly if progressive = false" time="0.001">
    </testcase>
    <testcase classname="Component should update data correctly if progressive.isFirst = true and no data.items" name="Component should update data correctly if progressive.isFirst = true and no data.items" time="0.001">
    </testcase>
    <testcase classname="Component should update data correctly if progressive.isFirst = true and has data.items" name="Component should update data correctly if progressive.isFirst = true and has data.items" time="0.001">
    </testcase>
    <testcase classname="Component should update data correctly during progressive" name="Component should update data correctly during progressive" time="0.001">
    </testcase>
    <testcase classname="Component should update renderArgs correctly on the first progressive" name="Component should update renderArgs correctly on the first progressive" time="0.001">
    </testcase>
    <testcase classname="Component should update renderArgs correctly during progressive" name="Component should update renderArgs correctly during progressive" time="0.001">
    </testcase>
    <testcase classname="Component should update brushArgs.nodes correctly if progressive is falsy" name="Component should update brushArgs.nodes correctly if progressive is falsy" time="0">
    </testcase>
    <testcase classname="Component should update brushArgs.nodes correctly if progressive.isFirst = true" name="Component should update brushArgs.nodes correctly if progressive.isFirst = true" time="0.001">
    </testcase>
    <testcase classname="Component should update brushArgs.nodes correctly if progressive.isFirst = true" name="Component should update brushArgs.nodes correctly if progressive.isFirst = true" time="0.001">
    </testcase>
    <testcase classname="Component emits should have an empty emit function when rendering" name="Component emits should have an empty emit function when rendering" time="0">
    </testcase>
    <testcase classname="Component emits should have an empty emit function when updating" name="Component emits should have an empty emit function when updating" time="0">
    </testcase>
    <testcase classname="Component emits should have an empty emit function when destroying" name="Component emits should have an empty emit function when destroying" time="0.001">
    </testcase>
    <testcase classname="Component visibility should return false for isVisible() when initialising" name="Component visibility should return false for isVisible() when initialising" time="0">
    </testcase>
    <testcase classname="Component visibility should return true for isVisible() when mounting" name="Component visibility should return true for isVisible() when mounting" time="0">
    </testcase>
    <testcase classname="Component visibility should return false for isVisible() when unmounting" name="Component visibility should return false for isVisible() when unmounting" time="0.001">
    </testcase>
    <testcase classname="Component update should call renderers render func without args when applying transformation" name="Component update should call renderers render func without args when applying transformation" time="0">
    </testcase>
    <testcase classname="Component update should run tween when animations are enabled" name="Component update should run tween when animations are enabled" time="0.001">
    </testcase>
    <testcase classname="Component update should not run tween when animations are disabled, case 1: enabled is not a function" name="Component update should not run tween when animations are disabled, case 1: enabled is not a function" time="0">
    </testcase>
    <testcase classname="Component update should not run tween when animations are disabled, case 2: enabled is a function" name="Component update should not run tween when animations are disabled, case 2: enabled is a function" time="0.001">
    </testcase>
    <testcase classname="Component findShapes should return matching shapes" name="Component findShapes should return matching shapes" time="0">
    </testcase>
    <testcase classname="Component shapesAt should return matching shapes" name="Component shapesAt should return matching shapes" time="0.001">
    </testcase>
    <testcase classname="Component shapesAt propagation option should return last shape" name="Component shapesAt propagation option should return last shape" time="0">
    </testcase>
    <testcase classname="Component unmount should remove event listeners from instance context" name="Component unmount should remove event listeners from instance context" time="0.001">
    </testcase>
    <testcase classname="Component getBrushedShapes should only return shapes within the same context" name="Component getBrushedShapes should only return shapes within the same context" time="0.001">
    </testcase>
    <testcase classname="Component getBrushedShapes should not return duplicate shapes" name="Component getBrushedShapes should not return duplicate shapes" time="0">
    </testcase>
    <testcase classname="Component getBrushedShapes should use data props parameter if submitted" name="Component getBrushedShapes should use data props parameter if submitted" time="0.001">
    </testcase>
    <testcase classname="Component getBrushedShapes should fallback to brush data property if data props parameter is omitted" name="Component getBrushedShapes should fallback to brush data property if data props parameter is omitted" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="point component" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:25" time="1.274" tests="15">
    <testcase classname="point component should render points with default settings" name="point component should render points with default settings" time="0.008">
    </testcase>
    <testcase classname="point component should render points with default settings when settings properties are invalid" name="point component should render points with default settings when settings properties are invalid" time="0.001">
    </testcase>
    <testcase classname="point component should render points with primitive value settings" name="point component should render points with primitive value settings" time="0.001">
    </testcase>
    <testcase classname="point component should render points with function settings" name="point component should render points with function settings" time="0.001">
    </testcase>
    <testcase classname="point component should render points with data settings" name="point component should render points with data settings" time="0.001">
    </testcase>
    <testcase classname="point component should render points with function settings and size has px format" name="point component should render points with function settings and size has px format" time="0.001">
    </testcase>
    <testcase classname="point component should render points with data settings and size has px format" name="point component should render points with data settings and size has px format" time="0.001">
    </testcase>
    <testcase classname="point component should render points with limited size when using discrete scale" name="point component should render points with limited size when using discrete scale" time="0">
    </testcase>
    <testcase classname="point component should not render points with show as false" name="point component should not render points with show as false" time="0.001">
    </testcase>
    <testcase classname="point component should not render points with show function return false" name="point component should not render points with show function return false" time="0">
    </testcase>
    <testcase classname="point component should render visible points with data settings" name="point component should render visible points with data settings" time="0.001">
    </testcase>
    <testcase classname="point component should render points with custom shape" name="point component should render points with custom shape" time="0">
    </testcase>
    <testcase classname="point component should render points with custom shape when type prop is missing" name="point component should render points with custom shape when type prop is missing" time="0.001">
    </testcase>
    <testcase classname="point component should render points with default type when shape is an object" name="point component should render points with default type when shape is an object" time="0">
    </testcase>
    <testcase classname="point component should not be able to override base point properties with custom shape" name="point component should not be able to override base point properties with custom shape" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Colors" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:25" time="1.28" tests="71">
    <testcase classname="Colors HSL should handle hsl values" name="Colors HSL should handle hsl values" time="0.007">
    </testcase>
    <testcase classname="Colors HSL should handle hsla values" name="Colors HSL should handle hsla values" time="0.001">
    </testcase>
    <testcase classname="Colors HSL should normalize angle values" name="Colors HSL should normalize angle values" time="0">
    </testcase>
    <testcase classname="Colors HSL should clip percentage values" name="Colors HSL should clip percentage values" time="0">
    </testcase>
    <testcase classname="Colors HSL should clip negative percentage values" name="Colors HSL should clip negative percentage values" time="0.001">
    </testcase>
    <testcase classname="Colors HSL should clip alpha value" name="Colors HSL should clip alpha value" time="0">
    </testcase>
    <testcase classname="Colors HSL should allow decimal values and round to nearest integer" name="Colors HSL should allow decimal values and round to nearest integer" time="0">
    </testcase>
    <testcase classname="Colors HSL should not allow saturation and lightness values without a percentage character" name="Colors HSL should not allow saturation and lightness values without a percentage character" time="0">
    </testcase>
    <testcase classname="Colors HSL should use percentage in string output" name="Colors HSL should use percentage in string output" time="0">
    </testcase>
    <testcase classname="Colors HSL should not allow non-digit characters" name="Colors HSL should not allow non-digit characters" time="0.001">
    </testcase>
    <testcase classname="Colors HSL should handle whitespace" name="Colors HSL should handle whitespace" time="0">
    </testcase>
    <testcase classname="Colors RGB should handle rgb numerical values" name="Colors RGB should handle rgb numerical values" time="0">
    </testcase>
    <testcase classname="Colors RGB should handle rgba numerical values" name="Colors RGB should handle rgba numerical values" time="0">
    </testcase>
    <testcase classname="Colors RGB should handle rgb percentage values" name="Colors RGB should handle rgb percentage values" time="0">
    </testcase>
    <testcase classname="Colors RGB should handle rgba percentage values" name="Colors RGB should handle rgba percentage values" time="0">
    </testcase>
    <testcase classname="Colors RGB should clip numerical values" name="Colors RGB should clip numerical values" time="0">
    </testcase>
    <testcase classname="Colors RGB should clip negative numerical values" name="Colors RGB should clip negative numerical values" time="0">
    </testcase>
    <testcase classname="Colors RGB should clip percentage values" name="Colors RGB should clip percentage values" time="0">
    </testcase>
    <testcase classname="Colors RGB should clip alpha value" name="Colors RGB should clip alpha value" time="0">
    </testcase>
    <testcase classname="Colors RGB should handle numerical boundry values" name="Colors RGB should handle numerical boundry values" time="0">
    </testcase>
    <testcase classname="Colors RGB should handle percentage boundry values" name="Colors RGB should handle percentage boundry values" time="0.001">
    </testcase>
    <testcase classname="Colors RGB should handle whitespace" name="Colors RGB should handle whitespace" time="0">
    </testcase>
    <testcase classname="Colors RGB should clip negative alpha values" name="Colors RGB should clip negative alpha values" time="0">
    </testcase>
    <testcase classname="Colors RGB should not allow non-digit characters" name="Colors RGB should not allow non-digit characters" time="0">
    </testcase>
    <testcase classname="Colors RGB should not allow mixing numerial and percentage values" name="Colors RGB should not allow mixing numerial and percentage values" time="0">
    </testcase>
    <testcase classname="Colors RGB should not allow decimal values" name="Colors RGB should not allow decimal values" time="0">
    </testcase>
    <testcase classname="Colors Hex should handle six digit hex values" name="Colors Hex should handle six digit hex values" time="0">
    </testcase>
    <testcase classname="Colors Hex should handle three digit hex values" name="Colors Hex should handle three digit hex values" time="0">
    </testcase>
    <testcase classname="Colors Hex should handle white space before and after three digit hex values" name="Colors Hex should handle white space before and after three digit hex values" time="0">
    </testcase>
    <testcase classname="Colors Hex should handle white space before and after six digit hex values" name="Colors Hex should handle white space before and after six digit hex values" time="0">
    </testcase>
    <testcase classname="Colors Hex should not match six digit hex values without #" name="Colors Hex should not match six digit hex values without #" time="0">
    </testcase>
    <testcase classname="Colors Hex should not match three digit hex values without #" name="Colors Hex should not match three digit hex values without #" time="0">
    </testcase>
    <testcase classname="Colors Hex should not allow six digit hex values outside of boundry" name="Colors Hex should not allow six digit hex values outside of boundry" time="0">
    </testcase>
    <testcase classname="Colors Hex should only allow six or three digit hex values" name="Colors Hex should only allow six or three digit hex values" time="0">
    </testcase>
    <testcase classname="Colors Key words should handle key words" name="Colors Key words should handle key words" time="0">
    </testcase>
    <testcase classname="Colors Key words should handle key words" name="Colors Key words should handle key words" time="0">
    </testcase>
    <testcase classname="Colors Key words should handle extended key words" name="Colors Key words should handle extended key words" time="0">
    </testcase>
    <testcase classname="Colors Key words should handle white space before and after key words" name="Colors Key words should handle white space before and after key words" time="0">
    </testcase>
    <testcase classname="Colors Key words should handle case in key words" name="Colors Key words should handle case in key words" time="0">
    </testcase>
    <testcase classname="Colors Input handling should handle null" name="Colors Input handling should handle null" time="0">
    </testcase>
    <testcase classname="Colors Input handling should handle undefined" name="Colors Input handling should handle undefined" time="0">
    </testcase>
    <testcase classname="Colors Input handling should handle empty string value" name="Colors Input handling should handle empty string value" time="0">
    </testcase>
    <testcase classname="Colors Input handling should handle empty value" name="Colors Input handling should handle empty value" time="0">
    </testcase>
    <testcase classname="Colors RGBA color should convert RGB to HSL" name="Colors RGBA color should convert RGB to HSL" time="0">
    </testcase>
    <testcase classname="Colors Conversions from RGBA should convert RGB to HSL" name="Colors Conversions from RGBA should convert RGB to HSL" time="0">
    </testcase>
    <testcase classname="Colors Conversions from RGBA should convert RGBA to HSLA" name="Colors Conversions from RGBA should convert RGBA to HSLA" time="0">
    </testcase>
    <testcase classname="Colors Conversions from RGBA should convert RGBA to RGB" name="Colors Conversions from RGBA should convert RGBA to RGB" time="0">
    </testcase>
    <testcase classname="Colors Conversions from RGBA should convert RGBA to RGBA" name="Colors Conversions from RGBA should convert RGBA to RGBA" time="0">
    </testcase>
    <testcase classname="Colors Conversions from RGBA should convert RGB to HEX" name="Colors Conversions from RGBA should convert RGB to HEX" time="0">
    </testcase>
    <testcase classname="Colors Conversions from RGBA should convert RGBA to number" name="Colors Conversions from RGBA should convert RGBA to number" time="0">
    </testcase>
    <testcase classname="Colors Conversions from RGBA should convert RGBA to string" name="Colors Conversions from RGBA should convert RGBA to string" time="0">
    </testcase>
    <testcase classname="Colors Conversions from RGBA should compare 2 RGBA colors, return true" name="Colors Conversions from RGBA should compare 2 RGBA colors, return true" time="0.001">
    </testcase>
    <testcase classname="Colors Conversions from RGBA should compare 2 RGBA colors, return false" name="Colors Conversions from RGBA should compare 2 RGBA colors, return false" time="0">
    </testcase>
    <testcase classname="Colors Conversions from HSLA should convert HSL to RGB" name="Colors Conversions from HSLA should convert HSL to RGB" time="0">
    </testcase>
    <testcase classname="Colors Conversions from HSLA should convert HSLA to RGBA" name="Colors Conversions from HSLA should convert HSLA to RGBA" time="0">
    </testcase>
    <testcase classname="Colors Conversions from HSLA should convert HSLA to HSL" name="Colors Conversions from HSLA should convert HSLA to HSL" time="0">
    </testcase>
    <testcase classname="Colors Conversions from HSLA should convert HSLA to HSLA" name="Colors Conversions from HSLA should convert HSLA to HSLA" time="0">
    </testcase>
    <testcase classname="Colors Conversions from HSLA should convert HSL to HEX" name="Colors Conversions from HSLA should convert HSL to HEX" time="0">
    </testcase>
    <testcase classname="Colors Conversions from HSLA should convert HSL to 24 bit number" name="Colors Conversions from HSLA should convert HSL to 24 bit number" time="0">
    </testcase>
    <testcase classname="Colors Conversions from HSLA should convert HSLA to string" name="Colors Conversions from HSLA should convert HSLA to string" time="0">
    </testcase>
    <testcase classname="Colors Conversions from HSLA should compare 2 HSLA colors, return true" name="Colors Conversions from HSLA should compare 2 HSLA colors, return true" time="0">
    </testcase>
    <testcase classname="Colors Conversions from HSLA should compare 2 HSLA colors, return false" name="Colors Conversions from HSLA should compare 2 HSLA colors, return false" time="0">
    </testcase>
    <testcase classname="Colors Color luminance should calculate luminance of RGBA color" name="Colors Color luminance should calculate luminance of RGBA color" time="0">
    </testcase>
    <testcase classname="Colors Color luminance should calculate luminance of HSLA color" name="Colors Color luminance should calculate luminance of HSLA color" time="0">
    </testcase>
    <testcase classname="Colors Color luminance should calculate if the color is dark" name="Colors Color luminance should calculate if the color is dark" time="0.001">
    </testcase>
    <testcase classname="Colors Color utils should calculate contrast of two RGBA colors" name="Colors Color utils should calculate contrast of two RGBA colors" time="0">
    </testcase>
    <testcase classname="Colors Color utils should calculate contrast of two HSLA colors" name="Colors Color utils should calculate contrast of two HSLA colors" time="0">
    </testcase>
    <testcase classname="Colors Color utils should calculate contrast between RGB and HSL colors" name="Colors Color utils should calculate contrast between RGB and HSL colors" time="0">
    </testcase>
    <testcase classname="Colors Color utils should generate a linear gradient css string from a scale object" name="Colors Color utils should generate a linear gradient css string from a scale object" time="0.001">
    </testcase>
    <testcase classname="Colors Color utils should generate a linear gradient css string from an array of color objects" name="Colors Color utils should generate a linear gradient css string from an array of color objects" time="0">
    </testcase>
    <testcase classname="Colors Color utils should generate a linear gradient css string from an array of color strings" name="Colors Color utils should generate a linear gradient css string from an array of color strings" time="0">
    </testcase>
  </testsuite>
  <testsuite name="reference lines" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:25" time="1.279" tests="16">
    <testcase classname="reference lines should not render lines with default settings and no scales" name="reference lines should not render lines with default settings and no scales" time="0.008">
    </testcase>
    <testcase classname="reference lines should not render lines without value" name="reference lines should not render lines without value" time="0.002">
    </testcase>
    <testcase classname="reference lines should not render lines if value function returns undefined" name="reference lines should not render lines if value function returns undefined" time="0.001">
    </testcase>
    <testcase classname="reference lines should render basic line with RTL label on X with scale" name="reference lines should render basic line with RTL label on X with scale" time="0.002">
    </testcase>
    <testcase classname="reference lines should support value as a function" name="reference lines should support value as a function" time="0.001">
    </testcase>
    <testcase classname="reference lines should render basic line with label on Y without scale" name="reference lines should render basic line with label on Y without scale" time="0.001">
    </testcase>
    <testcase classname="reference lines should render slope line with positive slope and no label on Y scale" name="reference lines should render slope line with positive slope and no label on Y scale" time="0.001">
    </testcase>
    <testcase classname="reference lines should render slope line with positive slope and label on Y scale" name="reference lines should render slope line with positive slope and label on Y scale" time="0.001">
    </testcase>
    <testcase classname="reference lines should render slope line with negative slope label on Y" name="reference lines should render slope line with negative slope label on Y" time="0.001">
    </testcase>
    <testcase classname="reference lines should render slope line with rect for colored background on Y scale" name="reference lines should render slope line with rect for colored background on Y scale" time="0.001">
    </testcase>
    <testcase classname="reference lines should not render slope line if oob, instead render oob circle" name="reference lines should not render slope line if oob, instead render oob circle" time="0.001">
    </testcase>
    <testcase classname="reference lines vAlign 0, align 1, default values and different text test" name="reference lines vAlign 0, align 1, default values and different text test" time="0">
    </testcase>
    <testcase classname="reference lines should bind data for oob values" name="reference lines should bind data for oob values" time="0.001">
    </testcase>
    <testcase classname="reference lines should bind data for oob values without a label" name="reference lines should bind data for oob values without a label" time="0">
    </testcase>
    <testcase classname="reference lines should bind data for oob values when scale.min = scale.max and scale is not invert" name="reference lines should bind data for oob values when scale.min = scale.max and scale is not invert" time="0.001">
    </testcase>
    <testcase classname="reference lines should bind data for oob values when scale.min = scale.max and scale is invert" name="reference lines should bind data for oob values when scale.min = scale.max and scale is invert" time="0">
    </testcase>
  </testsuite>
  <testsuite name="box component" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:25" time="1.282" tests="7">
    <testcase classname="box component should not render boxes with default settings" name="box component should not render boxes with default settings" time="0.01">
    </testcase>
    <testcase classname="box component should render a single basic box with minor custom settings" name="box component should render a single basic box with minor custom settings" time="0.004">
    </testcase>
    <testcase classname="box component should render a out of bounds marker" name="box component should render a out of bounds marker" time="0.003">
    </testcase>
    <testcase classname="box component should accept only end variable and draw a simple bar chart" name="box component should accept only end variable and draw a simple bar chart" time="0.001">
    </testcase>
    <testcase classname="box component should accept start and end variable to draw a gantt chart" name="box component should accept start and end variable to draw a gantt chart" time="0.002">
    </testcase>
    <testcase classname="box component should accept start, end, min and max values, without whiskers" name="box component should accept start, end, min and max values, without whiskers" time="0.002">
    </testcase>
    <testcase classname="box component should not have the squeeze bug" name="box component should not have the squeeze bug" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Brush Area Directional" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:25" time="1.335" tests="10">
    <testcase classname="Brush Area Directional should renderer horizontal left edge node correctly" name="Brush Area Directional should renderer horizontal left edge node correctly" time="0.012">
    </testcase>
    <testcase classname="Brush Area Directional should renderer horizontal right edge node correctly" name="Brush Area Directional should renderer horizontal right edge node correctly" time="0.001">
    </testcase>
    <testcase classname="Brush Area Directional should renderer horizontal left bubble node correctly" name="Brush Area Directional should renderer horizontal left bubble node correctly" time="0.001">
    </testcase>
    <testcase classname="Brush Area Directional should renderer horizontal right bubble node correctly" name="Brush Area Directional should renderer horizontal right bubble node correctly" time="0">
    </testcase>
    <testcase classname="Brush Area Directional should renderer horizontal negative active drag left edge node" name="Brush Area Directional should renderer horizontal negative active drag left edge node" time="0.002">
    </testcase>
    <testcase classname="Brush Area Directional should renderer horizontal negative active drag right edge node" name="Brush Area Directional should renderer horizontal negative active drag right edge node" time="0.001">
    </testcase>
    <testcase classname="Brush Area Directional should renderer vertical top edge node correctly" name="Brush Area Directional should renderer vertical top edge node correctly" time="0.001">
    </testcase>
    <testcase classname="Brush Area Directional should renderer vertical bottom edge node correctly" name="Brush Area Directional should renderer vertical bottom edge node correctly" time="0.001">
    </testcase>
    <testcase classname="Brush Area Directional should renderer vertical top bubble node correctly" name="Brush Area Directional should renderer vertical top bubble node correctly" time="0.001">
    </testcase>
    <testcase classname="Brush Area Directional should renderer vertical bottom bubble node correctly" name="Brush Area Directional should renderer vertical bottom bubble node correctly" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Path" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:25" time="1.34" tests="36">
    <testcase classname="Path Constructor should instantiate a new Path" name="Path Constructor should instantiate a new Path" time="0.008">
    </testcase>
    <testcase classname="Path Constructor should accept arguments - case 1: svg path" name="Path Constructor should accept arguments - case 1: svg path" time="0">
    </testcase>
    <testcase classname="Path Constructor should accept arguments - case 2: pie arc datum" name="Path Constructor should accept arguments - case 2: pie arc datum" time="0.001">
    </testcase>
    <testcase classname="Path Constructor path for line should render path for horizontal (default) line" name="Path Constructor path for line should render path for horizontal (default) line" time="0.004">
    </testcase>
    <testcase classname="Path Constructor path for line should render path for vertical line" name="Path Constructor path for line should render path for vertical line" time="0.001">
    </testcase>
    <testcase classname="Path Constructor path for line should render disconnected path for line with minor null value" name="Path Constructor path for line should render disconnected path for line with minor null value" time="0.001">
    </testcase>
    <testcase classname="Path Constructor path for line should render disconnected path for line with custom defined null values" name="Path Constructor path for line should render disconnected path for line with custom defined null values" time="0.001">
    </testcase>
    <testcase classname="Path Constructor path for line should render connected path for line with custom defined null values, when connect is true" name="Path Constructor path for line should render connected path for line with custom defined null values, when connect is true" time="0.001">
    </testcase>
    <testcase classname="Path Constructor path for line should render disconnected path for disconnected lines with unordered domain" name="Path Constructor path for line should render disconnected path for disconnected lines with unordered domain" time="0.001">
    </testcase>
    <testcase classname="Path Constructor path for line should render disconnected path for disconnected lines with unordered domain based on major data" name="Path Constructor path for line should render disconnected path for disconnected lines with unordered domain based on major data" time="0.001">
    </testcase>
    <testcase classname="Path Constructor path for line should render close path for area with default minor 0" name="Path Constructor path for line should render close path for area with default minor 0" time="0">
    </testcase>
    <testcase classname="Path Constructor path for line should render close path for area with explicit minor0" name="Path Constructor path for line should render close path for area with explicit minor0" time="0.002">
    </testcase>
    <testcase classname="Path Constructor path for line should not render minor0 line when having minor0 but showMinor0 is false" name="Path Constructor path for line should not render minor0 line when having minor0 but showMinor0 is false" time="0.001">
    </testcase>
    <testcase classname="Path Collider should require data path" name="Path Collider should require data path" time="0">
    </testcase>
    <testcase classname="Path Collider should be able to disable collider" name="Path Collider should be able to disable collider" time="0">
    </testcase>
    <testcase classname="Path Collider should disable collider if path only contains a single point" name="Path Collider should disable collider if path only contains a single point" time="0">
    </testcase>
    <testcase classname="Path Collider set explicit collider" name="Path Collider set explicit collider" time="0">
    </testcase>
    <testcase classname="Path Collider deduce polygon collider from data path" name="Path Collider deduce polygon collider from data path" time="0">
    </testcase>
    <testcase classname="Path Collider deduce polyline collider from data path" name="Path Collider deduce polyline collider from data path" time="0">
    </testcase>
    <testcase classname="Path Collider deduce visual polyline collider from data path" name="Path Collider deduce visual polyline collider from data path" time="0">
    </testcase>
    <testcase classname="Path BoundingRect should handle default values" name="Path BoundingRect should handle default values" time="0.001">
    </testcase>
    <testcase classname="Path BoundingRect without transform" name="Path BoundingRect without transform" time="0">
    </testcase>
    <testcase classname="Path BoundingRect with transform" name="Path BoundingRect with transform" time="0">
    </testcase>
    <testcase classname="Path BoundingRect with close command" name="Path BoundingRect with close command" time="0">
    </testcase>
    <testcase classname="Path BoundingRect with lineTo delta command" name="Path BoundingRect with lineTo delta command" time="0.001">
    </testcase>
    <testcase classname="Path BoundingRect with moveTo delta command" name="Path BoundingRect with moveTo delta command" time="0">
    </testcase>
    <testcase classname="Path BoundingRect should use cached path to points" name="Path BoundingRect should use cached path to points" time="0">
    </testcase>
    <testcase classname="Path BoundingRect should handle unknown commands" name="Path BoundingRect should handle unknown commands" time="0">
    </testcase>
    <testcase classname="Path BoundingRect should ignore bogus commands" name="Path BoundingRect should ignore bogus commands" time="0">
    </testcase>
    <testcase classname="Path BoundingRect should handle decimal characters" name="Path BoundingRect should handle decimal characters" time="0">
    </testcase>
    <testcase classname="Path Bounds should handle default values" name="Path Bounds should handle default values" time="0">
    </testcase>
    <testcase classname="Path Bounds without transform" name="Path Bounds without transform" time="0">
    </testcase>
    <testcase classname="Path Bounds with transform" name="Path Bounds with transform" time="0">
    </testcase>
    <testcase classname="Path Bounds with close command" name="Path Bounds with close command" time="0.001">
    </testcase>
    <testcase classname="Path Bounds with lineTo delta command" name="Path Bounds with lineTo delta command" time="0">
    </testcase>
    <testcase classname="Path Bounds with moveTo delta command" name="Path Bounds with moveTo delta command" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Legend Sequential" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:25" time="1.341" tests="13">
    <testcase classname="Legend Sequential defaults" name="Legend Sequential defaults" time="0.014">
    </testcase>
    <testcase classname="Legend Sequential should support titles from scales" name="Legend Sequential should support titles from scales" time="0.001">
    </testcase>
    <testcase classname="Legend Sequential preferredSize should request to be hidden if tick labels are vertically overlapping" name="Legend Sequential preferredSize should request to be hidden if tick labels are vertically overlapping" time="0.002">
    </testcase>
    <testcase classname="Legend Sequential preferredSize should request to be hidden if tick labels are horizontallay overlapping" name="Legend Sequential preferredSize should request to be hidden if tick labels are horizontallay overlapping" time="0.001">
    </testcase>
    <testcase classname="Legend Sequential Vertical layout should anchor ticks to the right" name="Legend Sequential Vertical layout should anchor ticks to the right" time="0.001">
    </testcase>
    <testcase classname="Legend Sequential Vertical layout should anchor ticks to the left" name="Legend Sequential Vertical layout should anchor ticks to the left" time="0.002">
    </testcase>
    <testcase classname="Legend Sequential Vertical layout should not render title node" name="Legend Sequential Vertical layout should not render title node" time="0.001">
    </testcase>
    <testcase classname="Legend Sequential Vertical layout should support an inverted fill scale" name="Legend Sequential Vertical layout should support an inverted fill scale" time="0.001">
    </testcase>
    <testcase classname="Legend Sequential Horizontal layout should anchor ticks on the top" name="Legend Sequential Horizontal layout should anchor ticks on the top" time="0.001">
    </testcase>
    <testcase classname="Legend Sequential Horizontal layout should anchor ticks on the bottom" name="Legend Sequential Horizontal layout should anchor ticks on the bottom" time="0.001">
    </testcase>
    <testcase classname="Legend Sequential Horizontal layout should anchor title to the right" name="Legend Sequential Horizontal layout should anchor title to the right" time="0.002">
    </testcase>
    <testcase classname="Legend Sequential Horizontal layout should not render title" name="Legend Sequential Horizontal layout should not render title" time="0.001">
    </testcase>
    <testcase classname="Legend Sequential Horizontal layout should support an inverted fill scale" name="Legend Sequential Horizontal layout should support an inverted fill scale" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Text component" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:25" time="1.347" tests="45">
    <testcase classname="Text component Dock Left Anchor default" name="Text component Dock Left Anchor default" time="0.01">
    </testcase>
    <testcase classname="Text component Dock Left Anchor center" name="Text component Dock Left Anchor center" time="0.001">
    </testcase>
    <testcase classname="Text component Dock Left Anchor top" name="Text component Dock Left Anchor top" time="0.001">
    </testcase>
    <testcase classname="Text component Dock Left Anchor bottom" name="Text component Dock Left Anchor bottom" time="0.001">
    </testcase>
    <testcase classname="Text component Dock Left Padding start" name="Text component Dock Left Padding start" time="0.001">
    </testcase>
    <testcase classname="Text component Dock Left Padding end" name="Text component Dock Left Padding end" time="0">
    </testcase>
    <testcase classname="Text component Dock Right Anchor default" name="Text component Dock Right Anchor default" time="0.001">
    </testcase>
    <testcase classname="Text component Dock Right Anchor center" name="Text component Dock Right Anchor center" time="0.001">
    </testcase>
    <testcase classname="Text component Dock Right Anchor top" name="Text component Dock Right Anchor top" time="0.001">
    </testcase>
    <testcase classname="Text component Dock Right Anchor bottom" name="Text component Dock Right Anchor bottom" time="0.001">
    </testcase>
    <testcase classname="Text component Dock Right Padding start" name="Text component Dock Right Padding start" time="0.001">
    </testcase>
    <testcase classname="Text component Dock Right Padding end" name="Text component Dock Right Padding end" time="0">
    </testcase>
    <testcase classname="Text component Dock Top Anchor default" name="Text component Dock Top Anchor default" time="0.001">
    </testcase>
    <testcase classname="Text component Dock Top Anchor center" name="Text component Dock Top Anchor center" time="0.001">
    </testcase>
    <testcase classname="Text component Dock Top Anchor left" name="Text component Dock Top Anchor left" time="0">
    </testcase>
    <testcase classname="Text component Dock Top Anchor right" name="Text component Dock Top Anchor right" time="0.001">
    </testcase>
    <testcase classname="Text component Dock Top Padding start" name="Text component Dock Top Padding start" time="0">
    </testcase>
    <testcase classname="Text component Dock Top Padding end" name="Text component Dock Top Padding end" time="0.001">
    </testcase>
    <testcase classname="Text component Dock Top Padding left" name="Text component Dock Top Padding left" time="0">
    </testcase>
    <testcase classname="Text component Dock Top Padding right" name="Text component Dock Top Padding right" time="0.001">
    </testcase>
    <testcase classname="Text component Dock Bottom Anchor default" name="Text component Dock Bottom Anchor default" time="0">
    </testcase>
    <testcase classname="Text component Dock Bottom Anchor center" name="Text component Dock Bottom Anchor center" time="0.001">
    </testcase>
    <testcase classname="Text component Dock Bottom Anchor left" name="Text component Dock Bottom Anchor left" time="0.001">
    </testcase>
    <testcase classname="Text component Dock Bottom Anchor right" name="Text component Dock Bottom Anchor right" time="0.001">
    </testcase>
    <testcase classname="Text component Dock Bottom Padding start" name="Text component Dock Bottom Padding start" time="0.001">
    </testcase>
    <testcase classname="Text component Dock Bottom Padding end" name="Text component Dock Bottom Padding end" time="0">
    </testcase>
    <testcase classname="Text component Dock Bottom Padding left" name="Text component Dock Bottom Padding left" time="0.001">
    </testcase>
    <testcase classname="Text component Dock Bottom Padding right" name="Text component Dock Bottom Padding right" time="0">
    </testcase>
    <testcase classname="Text component Settings maxLengthPx" name="Text component Settings maxLengthPx" time="0.001">
    </testcase>
    <testcase classname="Text component Settings maxLengthPx should default to 80% of height" name="Text component Settings maxLengthPx should default to 80% of height" time="0">
    </testcase>
    <testcase classname="Text component Settings maxLengthPx should default to 80% of width" name="Text component Settings maxLengthPx should default to 80% of width" time="0.001">
    </testcase>
    <testcase classname="Text component Settings join character" name="Text component Settings join character" time="0">
    </testcase>
    <testcase classname="Text component Settings join as empty string" name="Text component Settings join as empty string" time="0.001">
    </testcase>
    <testcase classname="Text component Lifecycle Update should update dock" name="Text component Lifecycle Update should update dock" time="0.001">
    </testcase>
    <testcase classname="Text component Lifecycle Update should update source" name="Text component Lifecycle Update should update source" time="0">
    </testcase>
    <testcase classname="Text component Lifecycle Update should update settings maxLengthPx" name="Text component Lifecycle Update should update settings maxLengthPx" time="0.001">
    </testcase>
    <testcase classname="Text component Lifecycle Update should update settings style" name="Text component Lifecycle Update should update settings style" time="0">
    </testcase>
    <testcase classname="Text component Lifecycle Update should update settings anchor" name="Text component Lifecycle Update should update settings anchor" time="0.001">
    </testcase>
    <testcase classname="Text component preferredSize should return same size for all dock areas" name="Text component preferredSize should return same size for all dock areas" time="0.001">
    </testcase>
    <testcase classname="Text component preferredSize should be affected by padding start" name="Text component preferredSize should be affected by padding start" time="0">
    </testcase>
    <testcase classname="Text component preferredSize should be affected by padding end" name="Text component preferredSize should be affected by padding end" time="0.001">
    </testcase>
    <testcase classname="Text component Source string" name="Text component Source string" time="0">
    </testcase>
    <testcase classname="Text component Source function" name="Text component Source function" time="0.001">
    </testcase>
    <testcase classname="Text component Source scale by reference" name="Text component Source scale by reference" time="0">
    </testcase>
    <testcase classname="Text component Source scale by reference with multiple sources" name="Text component Source scale by reference with multiple sources" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Axis" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:25" time="1.417" tests="36">
    <testcase classname="Axis Settings maxLengthPx should limit text nodes max width in horizontal mode and docked vertically" name="Axis Settings maxLengthPx should limit text nodes max width in horizontal mode and docked vertically" time="0.011">
    </testcase>
    <testcase classname="Axis Settings maxLengthPx should limit text nodes max width in horizontal mode and docked horizontally" name="Axis Settings maxLengthPx should limit text nodes max width in horizontal mode and docked horizontally" time="0.001">
    </testcase>
    <testcase classname="Axis Settings maxLengthPx should limit text nodes max width in tilted mode" name="Axis Settings maxLengthPx should limit text nodes max width in tilted mode" time="0.001">
    </testcase>
    <testcase classname="Axis Settings maxLengthPx should limit text nodes max width in layered mode" name="Axis Settings maxLengthPx should limit text nodes max width in layered mode" time="0.001">
    </testcase>
    <testcase classname="Axis Settings minLengthPx should limit text nodes min width in horizontal mode and docked vertically" name="Axis Settings minLengthPx should limit text nodes min width in horizontal mode and docked vertically" time="0.002">
    </testcase>
    <testcase classname="Axis Settings minLengthPx should limit text nodes min width in horizontal mode and docked horizontally" name="Axis Settings minLengthPx should limit text nodes min width in horizontal mode and docked horizontally" time="0">
    </testcase>
    <testcase classname="Axis Settings minLengthPx should limit text nodes min width in tilted mode" name="Axis Settings minLengthPx should limit text nodes min width in tilted mode" time="0.001">
    </testcase>
    <testcase classname="Axis Settings minLengthPx should limit text nodes min width in layered mode" name="Axis Settings minLengthPx should limit text nodes min width in layered mode" time="0.001">
    </testcase>
    <testcase classname="Axis Settings padding paddingStart should equal padding given as number" name="Axis Settings padding paddingStart should equal padding given as number" time="0.001">
    </testcase>
    <testcase classname="Axis Settings padding paddingStart should equal default padding as fallback" name="Axis Settings padding paddingStart should equal default padding as fallback" time="0.001">
    </testcase>
    <testcase classname="Axis Settings padding paddingStart should equal padding given as func" name="Axis Settings padding paddingStart should equal padding given as func" time="0">
    </testcase>
    <testcase classname="Axis Settings padding paddingEnd should equal padding given as number" name="Axis Settings padding paddingEnd should equal padding given as number" time="0.001">
    </testcase>
    <testcase classname="Axis Settings padding paddingEnd should equal default padding as fallback" name="Axis Settings padding paddingEnd should equal default padding as fallback" time="0">
    </testcase>
    <testcase classname="Axis Settings padding paddingEnd should equal padding given as func" name="Axis Settings padding paddingEnd should equal padding given as func" time="0.001">
    </testcase>
    <testcase classname="Axis Settings Defaults should default align when docked at left" name="Axis Settings Defaults should default align when docked at left" time="0.001">
    </testcase>
    <testcase classname="Axis Settings Defaults should default align when docked at right" name="Axis Settings Defaults should default align when docked at right" time="0">
    </testcase>
    <testcase classname="Axis Settings Defaults should default align when docked at top" name="Axis Settings Defaults should default align when docked at top" time="0.001">
    </testcase>
    <testcase classname="Axis Settings Defaults should default align when docked at bottom" name="Axis Settings Defaults should default align when docked at bottom" time="0.002">
    </testcase>
    <testcase classname="Axis Lifecycle Update should handle an update where scale type changes from discrete to continuous" name="Axis Lifecycle Update should handle an update where scale type changes from discrete to continuous" time="0.002">
    </testcase>
    <testcase classname="Axis Lifecycle Update should handle an update where scale type changes from continuous to discrete" name="Axis Lifecycle Update should handle an update where scale type changes from continuous to discrete" time="0.001">
    </testcase>
    <testcase classname="Axis continuous arc axis should render arc axis" name="Axis continuous arc axis should render arc axis" time="0.001">
    </testcase>
    <testcase classname="Axis continuous arc axis should not render arc axis labels when disabled" name="Axis continuous arc axis should not render arc axis labels when disabled" time="0">
    </testcase>
    <testcase classname="Axis continuous arc axis should not render arc axis line when disabled" name="Axis continuous arc axis should not render arc axis line when disabled" time="0.001">
    </testcase>
    <testcase classname="Axis continuous should align to left" name="Axis continuous should align to left" time="0.001">
    </testcase>
    <testcase classname="Axis continuous should align to right" name="Axis continuous should align to right" time="0">
    </testcase>
    <testcase classname="Axis continuous should align to top" name="Axis continuous should align to top" time="0.001">
    </testcase>
    <testcase classname="Axis continuous should align to bottom" name="Axis continuous should align to bottom" time="0.001">
    </testcase>
    <testcase classname="Axis continuous should not render labels when disabled" name="Axis continuous should not render labels when disabled" time="0">
    </testcase>
    <testcase classname="Axis continuous should not render axis line when disabled" name="Axis continuous should not render axis line when disabled" time="0.001">
    </testcase>
    <testcase classname="Axis continuous should not render ticks when disabled" name="Axis continuous should not render ticks when disabled" time="0">
    </testcase>
    <testcase classname="Axis discrete should align to left" name="Axis discrete should align to left" time="0.001">
    </testcase>
    <testcase classname="Axis discrete should align to right" name="Axis discrete should align to right" time="0">
    </testcase>
    <testcase classname="Axis discrete should align to top" name="Axis discrete should align to top" time="0.001">
    </testcase>
    <testcase classname="Axis discrete should align to bottom" name="Axis discrete should align to bottom" time="0">
    </testcase>
    <testcase classname="Axis discrete should support layered labels for top aligned axis" name="Axis discrete should support layered labels for top aligned axis" time="0.001">
    </testcase>
    <testcase classname="Axis discrete should support layered labels for bottom aligned axis" name="Axis discrete should support layered labels for bottom aligned axis" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Brush Range" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:25" time="1.444" tests="14">
    <testcase classname="Brush Range should renderer discrete range horizontal left edge node correctly" name="Brush Range should renderer discrete range horizontal left edge node correctly" time="0.013">
    </testcase>
    <testcase classname="Brush Range should renderer discrete range horizontal right edge node correctly" name="Brush Range should renderer discrete range horizontal right edge node correctly" time="0.001">
    </testcase>
    <testcase classname="Brush Range should renderer discrete range horizontal left bubble node correctly" name="Brush Range should renderer discrete range horizontal left bubble node correctly" time="0.002">
    </testcase>
    <testcase classname="Brush Range should renderer discrete range horizontal right bubble node correctly" name="Brush Range should renderer discrete range horizontal right bubble node correctly" time="0.001">
    </testcase>
    <testcase classname="Brush Range linear on render should return empty when not observed nor brushed from this component" name="Brush Range linear on render should return empty when not observed nor brushed from this component" time="0.002">
    </testcase>
    <testcase classname="Brush Range linear on render should return nodes from existing brush when observed" name="Brush Range linear on render should return nodes from existing brush when observed" time="0.001">
    </testcase>
    <testcase classname="Brush Range linear horizontal left edge node correctly" name="Brush Range linear horizontal left edge node correctly" time="0.001">
    </testcase>
    <testcase classname="Brush Range linear horizontal right edge node correctly" name="Brush Range linear horizontal right edge node correctly" time="0.001">
    </testcase>
    <testcase classname="Brush Range linear horizontal left bubble node correctly" name="Brush Range linear horizontal left bubble node correctly" time="0.003">
    </testcase>
    <testcase classname="Brush Range linear horizontal right bubble node correctly" name="Brush Range linear horizontal right bubble node correctly" time="0.002">
    </testcase>
    <testcase classname="Brush Range linear vertical top edge node correctly" name="Brush Range linear vertical top edge node correctly" time="0.003">
    </testcase>
    <testcase classname="Brush Range linear vertical bottom edge node correctly" name="Brush Range linear vertical bottom edge node correctly" time="0.001">
    </testcase>
    <testcase classname="Brush Range linear vertical top bubble node correctly" name="Brush Range linear vertical top bubble node correctly" time="0.001">
    </testcase>
    <testcase classname="Brush Range linear vertical bottom bubble node correctly" name="Brush Range linear vertical bottom bubble node correctly" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Tick generators" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:26" time="0.556" tests="30">
    <testcase classname="Tick generators continuous tick generator formatting should output ticks in the correct format" name="Tick generators continuous tick generator formatting should output ticks in the correct format" time="0.001">
    </testcase>
    <testcase classname="Tick generators continuous tick generator by values should generate ticks by values" name="Tick generators continuous tick generator by values should generate ticks by values" time="0">
    </testcase>
    <testcase classname="Tick generators continuous tick generator by values should generate ticks from objects" name="Tick generators continuous tick generator by values should generate ticks from objects" time="0.001">
    </testcase>
    <testcase classname="Tick generators continuous tick generator by values should generate ticks from objects with isMinor property" name="Tick generators continuous tick generator by values should generate ticks from objects with isMinor property" time="0">
    </testcase>
    <testcase classname="Tick generators continuous tick generator by values should require value prop on object" name="Tick generators continuous tick generator by values should require value prop on object" time="0">
    </testcase>
    <testcase classname="Tick generators continuous tick generator by values should filter out NaN values" name="Tick generators continuous tick generator by values should filter out NaN values" time="0">
    </testcase>
    <testcase classname="Tick generators continuous tick generator by values should only generate ticks by values that are within the domain" name="Tick generators continuous tick generator by values should only generate ticks by values that are within the domain" time="0.001">
    </testcase>
    <testcase classname="Tick generators continuous tick generator by values should only generate unique ticks by values" name="Tick generators continuous tick generator by values should only generate unique ticks by values" time="0">
    </testcase>
    <testcase classname="Tick generators continuous tick generator by values should sort ticks by values" name="Tick generators continuous tick generator by values should sort ticks by values" time="0">
    </testcase>
    <testcase classname="Tick generators continuous tick generator by count should generate ticks by count" name="Tick generators continuous tick generator by count should generate ticks by count" time="0">
    </testcase>
    <testcase classname="Tick generators continuous tick generator by count should generate ticks by count with minor ticks" name="Tick generators continuous tick generator by count should generate ticks by count with minor ticks" time="0">
    </testcase>
    <testcase classname="Tick generators continuous tick generator by distance should generate ticks by distance" name="Tick generators continuous tick generator by distance should generate ticks by distance" time="0">
    </testcase>
    <testcase classname="Tick generators continuous tick generator by distance should generate tight ticks by distance" name="Tick generators continuous tick generator by distance should generate tight ticks by distance" time="0.001">
    </testcase>
    <testcase classname="Tick generators continuous tick generator by distance should generate tight ticks by a custom distance" name="Tick generators continuous tick generator by distance should generate tight ticks by a custom distance" time="0.001">
    </testcase>
    <testcase classname="Tick generators continuous tick generator by distance should generate loose ticks by a custom distance" name="Tick generators continuous tick generator by distance should generate loose ticks by a custom distance" time="0">
    </testcase>
    <testcase classname="Tick generators continuous tick generator by distance should generate ticks by distance with minor ticks" name="Tick generators continuous tick generator by distance should generate ticks by distance with minor ticks" time="0">
    </testcase>
    <testcase classname="Tick generators continuous tick generator forceBounds should be able to force ticks at bounds" name="Tick generators continuous tick generator forceBounds should be able to force ticks at bounds" time="0.001">
    </testcase>
    <testcase classname="Tick generators continuous tick generator forceBounds should be able to force ticks at bounds with minorTicks" name="Tick generators continuous tick generator forceBounds should be able to force ticks at bounds with minorTicks" time="0">
    </testcase>
    <testcase classname="Tick generators looseDistanceBasedGenerator unitDivider should use fallback divider if unitDivider is not a number" name="Tick generators looseDistanceBasedGenerator unitDivider should use fallback divider if unitDivider is not a number" time="0.001">
    </testcase>
    <testcase classname="Tick generators looseDistanceBasedGenerator unitDivider should use fallback divider if unitDivider is a negative number" name="Tick generators looseDistanceBasedGenerator unitDivider should use fallback divider if unitDivider is a negative number" time="0">
    </testcase>
    <testcase classname="Tick generators looseDistanceBasedGenerator unitDivider should use unitDivider if it is a positive number" name="Tick generators looseDistanceBasedGenerator unitDivider should use unitDivider if it is a positive number" time="0">
    </testcase>
    <testcase classname="Tick generators looseDistanceBasedGenerator unitDivider should handle unitDivider of zero" name="Tick generators looseDistanceBasedGenerator unitDivider should handle unitDivider of zero" time="0.001">
    </testcase>
    <testcase classname="Tick generators looseDistanceBasedGenerator unitDivider should handle very small number on unitDivider" name="Tick generators looseDistanceBasedGenerator unitDivider should handle very small number on unitDivider" time="0">
    </testcase>
    <testcase classname="Tick generators looseDistanceBasedGenerator distance should handle if distance is not a number" name="Tick generators looseDistanceBasedGenerator distance should handle if distance is not a number" time="0.001">
    </testcase>
    <testcase classname="Tick generators looseDistanceBasedGenerator distance should handle if distance is a negative number" name="Tick generators looseDistanceBasedGenerator distance should handle if distance is a negative number" time="0">
    </testcase>
    <testcase classname="Tick generators looseDistanceBasedGenerator distance should use distance if it is a positive number" name="Tick generators looseDistanceBasedGenerator distance should use distance if it is a positive number" time="0">
    </testcase>
    <testcase classname="Tick generators looseDistanceBasedGenerator distance should handle distance of zero" name="Tick generators looseDistanceBasedGenerator distance should handle distance of zero" time="0">
    </testcase>
    <testcase classname="Tick generators looseDistanceBasedGenerator distance should handle very small number on distance" name="Tick generators looseDistanceBasedGenerator distance should handle very small number on distance" time="0">
    </testcase>
    <testcase classname="Tick generators discrete tick generator should generate ticks by data" name="Tick generators discrete tick generator should generate ticks by data" time="0.001">
    </testcase>
    <testcase classname="Tick generators discrete tick generator should support duplicate labels by separating values and labels" name="Tick generators discrete tick generator should support duplicate labels by separating values and labels" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Chart" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:25" time="1.457" tests="17">
    <testcase classname="Chart lifecycle methods should call lifecycle methods when rendering" name="Chart lifecycle methods should call lifecycle methods when rendering" time="0.022">
    </testcase>
    <testcase classname="Chart lifecycle methods should register event listeners when rendering" name="Chart lifecycle methods should register event listeners when rendering" time="0.001">
    </testcase>
    <testcase classname="Chart lifecycle methods should call lifecycle methods when updating" name="Chart lifecycle methods should call lifecycle methods when updating" time="0">
    </testcase>
    <testcase classname="Chart lifecycle methods should call lifecycle methods when destroying" name="Chart lifecycle methods should call lifecycle methods when destroying" time="0.001">
    </testcase>
    <testcase classname="Chart lifecycle methods should not freak out when using unregistered components" name="Chart lifecycle methods should not freak out when using unregistered components" time="0.002">
    </testcase>
    <testcase classname="Chart lifecycle methods should not update components specified in excludeFromUpdate array" name="Chart lifecycle methods should not update components specified in excludeFromUpdate array" time="0.004">
    </testcase>
    <testcase classname="Chart lifecycle methods should run proper functions on layouting components" name="Chart lifecycle methods should run proper functions on layouting components" time="0.002">
    </testcase>
    <testcase classname="Chart lifecycle methods should update components where transform should be applied" name="Chart lifecycle methods should update components where transform should be applied" time="0.002">
    </testcase>
    <testcase classname="Chart lifecycle methods should maintain displayOrder of components after initial render" name="Chart lifecycle methods should maintain displayOrder of components after initial render" time="0.002">
    </testcase>
    <testcase classname="Chart lifecycle methods should maintain displayOrder of components after update" name="Chart lifecycle methods should maintain displayOrder of components after update" time="0.005">
    </testcase>
    <testcase classname="Chart lifecycle methods brushFromShapes should brush on component, which key matches the key of the input shape" name="Chart lifecycle methods brushFromShapes should brush on component, which key matches the key of the input shape" time="0.002">
    </testcase>
    <testcase classname="Chart lifecycle methods brushFromShapes should brush on all components" name="Chart lifecycle methods brushFromShapes should brush on all components" time="0.001">
    </testcase>
    <testcase classname="Chart lifecycle methods brushFromShapes should not brush on any components" name="Chart lifecycle methods brushFromShapes should not brush on any components" time="0.001">
    </testcase>
    <testcase classname="Chart lifecycle methods storage should call createStorage with correct parameters" name="Chart lifecycle methods storage should call createStorage with correct parameters" time="0.001">
    </testcase>
    <testcase classname="Chart orderComponents should inject missing elements" name="Chart orderComponents should inject missing elements" time="0">
    </testcase>
    <testcase classname="Chart orderComponents should re-order existing elements" name="Chart orderComponents should re-order existing elements" time="0">
    </testcase>
    <testcase classname="Chart orderComponents should re-order existing elements with new order" name="Chart orderComponents should re-order existing elements with new order" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Tooltip" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:26" time="0.403" tests="18">
    <testcase classname="Tooltip events show should do shape loookup and show tooltip" name="Tooltip events show should do shape loookup and show tooltip" time="0.003">
    </testcase>
    <testcase classname="Tooltip events show should show tooltip with provided nodes" name="Tooltip events show should show tooltip with provided nodes" time="0.002">
    </testcase>
    <testcase classname="Tooltip events show should not re-render tooltip if over same nodes" name="Tooltip events show should not re-render tooltip if over same nodes" time="0.001">
    </testcase>
    <testcase classname="Tooltip events show should not show tooltip if there are no matching nodes" name="Tooltip events show should not show tooltip if there are no matching nodes" time="0.001">
    </testcase>
    <testcase classname="Tooltip events hide should hide tooltip" name="Tooltip events hide should hide tooltip" time="0.001">
    </testcase>
    <testcase classname="Tooltip events prevent should prevent `show` from being invoked" name="Tooltip events prevent should prevent `show` from being invoked" time="0.001">
    </testcase>
    <testcase classname="Tooltip lifecycle hooks should call beforeShow" name="Tooltip lifecycle hooks should call beforeShow" time="0.001">
    </testcase>
    <testcase classname="Tooltip lifecycle hooks should call afterShow" name="Tooltip lifecycle hooks should call afterShow" time="0.002">
    </testcase>
    <testcase classname="Tooltip lifecycle hooks should call beforeHide" name="Tooltip lifecycle hooks should call beforeHide" time="0.002">
    </testcase>
    <testcase classname="Tooltip lifecycle hooks should not call beforeHide if tooltip is not displayed" name="Tooltip lifecycle hooks should not call beforeHide if tooltip is not displayed" time="0.002">
    </testcase>
    <testcase classname="Tooltip lifecycle hooks should call onHide" name="Tooltip lifecycle hooks should call onHide" time="0.002">
    </testcase>
    <testcase classname="Tooltip lifecycle hooks should not call onHide if tooltip is not displayed" name="Tooltip lifecycle hooks should not call onHide if tooltip is not displayed" time="0">
    </testcase>
    <testcase classname="Tooltip lifecycle hooks should call afterHide" name="Tooltip lifecycle hooks should call afterHide" time="0.001">
    </testcase>
    <testcase classname="Tooltip lifecycle hooks should not call afterHide if tooltip is not displayed" name="Tooltip lifecycle hooks should not call afterHide if tooltip is not displayed" time="0">
    </testcase>
    <testcase classname="Tooltip beforeUpdate should destroy dispatcher" name="Tooltip beforeUpdate should destroy dispatcher" time="0.001">
    </testcase>
    <testcase classname="Tooltip beforeUpdate should call remove on instance handler" name="Tooltip beforeUpdate should call remove on instance handler" time="0">
    </testcase>
    <testcase classname="Tooltip appendTo should apply appendTo on mounted" name="Tooltip appendTo should apply appendTo on mounted" time="0.002">
    </testcase>
    <testcase classname="Tooltip appendTo should apply appendTo on updated" name="Tooltip appendTo should apply appendTo on updated" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Brush Area" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:26" time="0.391" tests="8">
    <testcase classname="Brush Area should render area indicator in component space" name="Brush Area should render area indicator in component space" time="0.002">
    </testcase>
    <testcase classname="Brush Area `end` event should clear rendered node" name="Brush Area `end` event should clear rendered node" time="0.001">
    </testcase>
    <testcase classname="Brush Area `cancel` event should end brushes" name="Brush Area `cancel` event should end brushes" time="0">
    </testcase>
    <testcase classname="Brush Area should brush in chart coordinate system" name="Brush Area should brush in chart coordinate system" time="0.001">
    </testcase>
    <testcase classname="Brush Area should require `start` event before `move` event" name="Brush Area should require `start` event before `move` event" time="0.001">
    </testcase>
    <testcase classname="Brush Area should require `start` event before `end` event" name="Brush Area should require `start` event before `end` event" time="0">
    </testcase>
    <testcase classname="Brush Area should require `start` event before `cancel` event" name="Brush Area should require `start` event before `cancel` event" time="0.001">
    </testcase>
    <testcase classname="Brush Area should require to be inside the component container on `start` event" name="Brush Area should require to be inside the component container on `start` event" time="0">
    </testcase>
  </testsuite>
  <testsuite name="scales" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:26" time="0.42" tests="14">
    <testcase classname="scales collection should return fallback scale when unknown config is used" name="scales collection should return fallback scale when unknown config is used" time="0">
    </testcase>
    <testcase classname="scales collection should return scale from config" name="scales collection should return scale from config" time="0.001">
    </testcase>
    <testcase classname="scales collection should return named scale from config" name="scales collection should return named scale from config" time="0">
    </testcase>
    <testcase classname="scales collection should maintain cache of create scales" name="scales collection should maintain cache of create scales" time="0">
    </testcase>
    <testcase classname="scales collection should create scale on the fly" name="scales collection should create scale on the fly" time="0">
    </testcase>
    <testcase classname="scales collection should return all scales" name="scales collection should return all scales" time="0">
    </testcase>
    <testcase classname="scales create should not throw when source options is not provided" name="scales create should not throw when source options is not provided" time="0.001">
    </testcase>
    <testcase classname="scales create should create a scale of a specific type" name="scales create should create a scale of a specific type" time="0.001">
    </testcase>
    <testcase classname="scales create should create linear scale when no better type fits" name="scales create should create linear scale when no better type fits" time="0">
    </testcase>
    <testcase classname="scales create should create linear scale when source fields are measures" name="scales create should create linear scale when source fields are measures" time="0">
    </testcase>
    <testcase classname="scales create should create sequential color scale when source fields are measures and type is color" name="scales create should create sequential color scale when source fields are measures and type is color" time="0.001">
    </testcase>
    <testcase classname="scales create should create band scale when source fields are dimensions" name="scales create should create band scale when source fields are dimensions" time="0">
    </testcase>
    <testcase classname="scales create should create categorical-color scale when source fields are dimensions and type is color" name="scales create should create categorical-color scale when source fields are dimensions and type is color" time="0.001">
    </testcase>
    <testcase classname="scales create should create h-band scale when data is hierarchical" name="scales create should create h-band scale when data is hierarchical" time="0">
    </testcase>
  </testsuite>
  <testsuite name="OrdinalScale" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.364" tests="14">
    <testcase classname="OrdinalScale should have empty domain as default" name="OrdinalScale should have empty domain as default" time="0">
    </testcase>
    <testcase classname="OrdinalScale with input settings should be able to fetch data" name="OrdinalScale with input settings should be able to fetch data" time="0">
    </testcase>
    <testcase classname="OrdinalScale with input settings should set domain to correct field values" name="OrdinalScale with input settings should set domain to correct field values" time="0.001">
    </testcase>
    <testcase classname="OrdinalScale with input settings should return correct field values" name="OrdinalScale with input settings should return correct field values" time="0">
    </testcase>
    <testcase classname="OrdinalScale with input settings should return mapped datum values" name="OrdinalScale with input settings should return mapped datum values" time="0">
    </testcase>
    <testcase classname="OrdinalScale with input settings with maxPxStep with start align should adjust correctly" name="OrdinalScale with input settings with maxPxStep with start align should adjust correctly" time="0">
    </testcase>
    <testcase classname="OrdinalScale with input settings with maxPxStep with padding should return correct step size" name="OrdinalScale with input settings with maxPxStep with padding should return correct step size" time="0.001">
    </testcase>
    <testcase classname="OrdinalScale with input settings with maxPxStep with center align and padding should return correct step size" name="OrdinalScale with input settings with maxPxStep with center align and padding should return correct step size" time="0">
    </testcase>
    <testcase classname="OrdinalScale with input settings with range should call range fn if provided" name="OrdinalScale with input settings with range should call range fn if provided" time="0">
    </testcase>
    <testcase classname="OrdinalScale with input settings with range should not affect maxPxStep setting" name="OrdinalScale with input settings with range should not affect maxPxStep setting" time="0">
    </testcase>
    <testcase classname="OrdinalScale with input settings with range should use range fn when maxPxStep does not take effect" name="OrdinalScale with input settings with range should use range fn when maxPxStep does not take effect" time="0">
    </testcase>
    <testcase classname="OrdinalScale with input settings with range should reverse range when setting invert=true" name="OrdinalScale with input settings with range should reverse range when setting invert=true" time="0.001">
    </testcase>
    <testcase classname="OrdinalScale with input settings with range should be possible to set an array" name="OrdinalScale with input settings with range should be possible to set an array" time="0">
    </testcase>
    <testcase classname="OrdinalScale should accept domain and range parameters" name="OrdinalScale should accept domain and range parameters" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Threshold" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.371" tests="23">
    <testcase classname="Threshold basics default settings" name="Threshold basics default settings" time="0.001">
    </testcase>
    <testcase classname="Threshold basics max/min settings" name="Threshold basics max/min settings" time="0">
    </testcase>
    <testcase classname="Threshold basics invalid max/min settings" name="Threshold basics invalid max/min settings" time="0">
    </testcase>
    <testcase classname="Threshold basics only fields" name="Threshold basics only fields" time="0">
    </testcase>
    <testcase classname="Threshold basics invalid max/min on fields" name="Threshold basics invalid max/min on fields" time="0.001">
    </testcase>
    <testcase classname="Threshold generate thresholds should generate 1 break from 2 colors" name="Threshold generate thresholds should generate 1 break from 2 colors" time="0">
    </testcase>
    <testcase classname="Threshold generate thresholds should generate 1 break from 2 colors when domain is empty" name="Threshold generate thresholds should generate 1 break from 2 colors when domain is empty" time="0.002">
    </testcase>
    <testcase classname="Threshold generate thresholds should generate 2 breaks from 3 colors" name="Threshold generate thresholds should generate 2 breaks from 3 colors" time="0">
    </testcase>
    <testcase classname="Threshold generate thresholds should generate 9 breaks from 10 colors" name="Threshold generate thresholds should generate 9 breaks from 10 colors" time="0">
    </testcase>
    <testcase classname="Threshold generate thresholds should handle invert" name="Threshold generate thresholds should handle invert" time="0">
    </testcase>
    <testcase classname="Threshold nice domain when range is empty" name="Threshold nice domain when range is empty" time="0.001">
    </testcase>
    <testcase classname="Threshold nice domain when range is of length 2 " name="Threshold nice domain when range is of length 2 " time="0">
    </testcase>
    <testcase classname="Threshold nice domain when range is of length 3" name="Threshold nice domain when range is of length 3" time="0">
    </testcase>
    <testcase classname="Threshold nice domain when range and domain are equal" name="Threshold nice domain when range and domain are equal" time="0">
    </testcase>
    <testcase classname="Threshold nice domain when range is of length 4" name="Threshold nice domain when range is of length 4" time="0">
    </testcase>
    <testcase classname="Threshold nice domain when min is negative" name="Threshold nice domain when min is negative" time="0.001">
    </testcase>
    <testcase classname="Threshold nice domain when range is of length 5" name="Threshold nice domain when range is of length 5" time="0">
    </testcase>
    <testcase classname="Threshold generate colors should handle min/mix being inside domain" name="Threshold generate colors should handle min/mix being inside domain" time="0.001">
    </testcase>
    <testcase classname="Threshold generate colors should generate 3 colors from 2 breaks" name="Threshold generate colors should generate 3 colors from 2 breaks" time="0.001">
    </testcase>
    <testcase classname="Threshold generate colors should generate 6 colors from 5 breaks" name="Threshold generate colors should generate 6 colors from 5 breaks" time="0">
    </testcase>
    <testcase classname="Threshold return values should be NaN when input is invalid" name="Threshold return values should be NaN when input is invalid" time="0">
    </testcase>
    <testcase classname="Threshold return values should be correct" name="Threshold return values should be correct" time="0">
    </testcase>
    <testcase classname="Threshold return values should be correct on borders" name="Threshold return values should be correct on borders" time="0">
    </testcase>
  </testsuite>
  <testsuite name="svg renderer" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:26" time="0.441" tests="22">
    <testcase classname="svg renderer should be a function" name="svg renderer should be a function" time="0.001">
    </testcase>
    <testcase classname="svg renderer should set rendererSettings correctly" name="svg renderer should set rendererSettings correctly" time="0.002">
    </testcase>
    <testcase classname="svg renderer appendTo should append root node to element" name="svg renderer appendTo should append root node to element" time="0.001">
    </testcase>
    <testcase classname="svg renderer appendTo should not create new root if it already exists" name="svg renderer appendTo should not create new root if it already exists" time="0">
    </testcase>
    <testcase classname="svg renderer appendTo should apply font smoothing" name="svg renderer appendTo should apply font smoothing" time="0">
    </testcase>
    <testcase classname="svg renderer render should not render before appending" name="svg renderer render should not render before appending" time="0">
    </testcase>
    <testcase classname="svg renderer render should apply transform if provided" name="svg renderer render should apply transform if provided" time="0.001">
    </testcase>
    <testcase classname="svg renderer render should call tree creator with proper params" name="svg renderer render should call tree creator with proper params" time="0">
    </testcase>
    <testcase classname="svg renderer render should attach to given position in the container" name="svg renderer render should attach to given position in the container" time="0.001">
    </testcase>
    <testcase classname="svg renderer render should scale from logical size to physical size" name="svg renderer render should scale from logical size to physical size" time="0">
    </testcase>
    <testcase classname="svg renderer render should handle call without arguments" name="svg renderer render should handle call without arguments" time="0.001">
    </testcase>
    <testcase classname="svg renderer render should not render if scene and size has not changed" name="svg renderer render should not render if scene and size has not changed" time="0">
    </testcase>
    <testcase classname="svg renderer clear should remove all elements" name="svg renderer clear should remove all elements" time="0">
    </testcase>
    <testcase classname="svg renderer clear should render if scene has been cleared" name="svg renderer clear should render if scene has been cleared" time="0">
    </testcase>
    <testcase classname="svg renderer destroy should detach root from its parent" name="svg renderer destroy should detach root from its parent" time="0.001">
    </testcase>
    <testcase classname="svg renderer destroy should not throw error if root does not exist" name="svg renderer destroy should not throw error if root does not exist" time="0">
    </testcase>
    <testcase classname="svg renderer itemsAt should return shapes at a point" name="svg renderer itemsAt should return shapes at a point" time="0.001">
    </testcase>
    <testcase classname="svg renderer itemsAt should return shapes at a line" name="svg renderer itemsAt should return shapes at a line" time="0.001">
    </testcase>
    <testcase classname="svg renderer itemsAt should return shapes at a rect" name="svg renderer itemsAt should return shapes at a rect" time="0">
    </testcase>
    <testcase classname="svg renderer size should return current size if no parameters are given" name="svg renderer size should return current size if no parameters are given" time="0.001">
    </testcase>
    <testcase classname="svg renderer size should ignore NaN values and fallback to default size value" name="svg renderer size should ignore NaN values and fallback to default size value" time="0">
    </testcase>
    <testcase classname="svg renderer setKey should set key attribute" name="svg renderer setKey should set key attribute" time="0">
    </testcase>
  </testsuite>
  <testsuite name="canvas renderer" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:26" time="0.39" tests="28">
    <testcase classname="canvas renderer should set rendererSettings correctly" name="canvas renderer should set rendererSettings correctly" time="0.001">
    </testcase>
    <testcase classname="canvas renderer should set rendererSettings with progressive correctly" name="canvas renderer should set rendererSettings with progressive correctly" time="0.001">
    </testcase>
    <testcase classname="canvas renderer should clear canvas if there is no progressive" name="canvas renderer should clear canvas if there is no progressive" time="0.001">
    </testcase>
    <testcase classname="canvas renderer should clear canvas if progressive = false" name="canvas renderer should clear canvas if progressive = false" time="0.001">
    </testcase>
    <testcase classname="canvas renderer should clear canvas if progressive.isFirst = true" name="canvas renderer should clear canvas if progressive.isFirst = true" time="0.001">
    </testcase>
    <testcase classname="canvas renderer should not clear canvas if progressive.isFirst = false" name="canvas renderer should not clear canvas if progressive.isFirst = false" time="0.001">
    </testcase>
    <testcase classname="canvas renderer should aggregate children during progressive" name="canvas renderer should aggregate children during progressive" time="0.001">
    </testcase>
    <testcase classname="canvas renderer should append canvas element" name="canvas renderer should append canvas element" time="0">
    </testcase>
    <testcase classname="canvas renderer should on appendTo apply font smoothing" name="canvas renderer should on appendTo apply font smoothing" time="0.001">
    </testcase>
    <testcase classname="canvas renderer should not render when canvas does not exist" name="canvas renderer should not render when canvas does not exist" time="0">
    </testcase>
    <testcase classname="canvas renderer should render when canvas exists" name="canvas renderer should render when canvas exists" time="0">
    </testcase>
    <testcase classname="canvas renderer should set transform and apply buffer if transform is provided" name="canvas renderer should set transform and apply buffer if transform is provided" time="0.001">
    </testcase>
    <testcase classname="canvas renderer should apply buffer but not set transform when transform func returns falsy value" name="canvas renderer should apply buffer but not set transform when transform func returns falsy value" time="0.001">
    </testcase>
    <testcase classname="canvas renderer should not render if scene and size has not changed" name="canvas renderer should not render if scene and size has not changed" time="0.001">
    </testcase>
    <testcase classname="canvas renderer should render if scene has been cleared" name="canvas renderer should render if scene has been cleared" time="0">
    </testcase>
    <testcase classname="canvas renderer should return zero size when canvas is not initiated" name="canvas renderer should return zero size when canvas is not initiated" time="0.001">
    </testcase>
    <testcase classname="canvas renderer should return size when called" name="canvas renderer should return size when called" time="0">
    </testcase>
    <testcase classname="canvas renderer should ignore NaN values and fallback to default size value" name="canvas renderer should ignore NaN values and fallback to default size value" time="0">
    </testcase>
    <testcase classname="canvas renderer should update buffer size correctly" name="canvas renderer should update buffer size correctly" time="0.001">
    </testcase>
    <testcase classname="canvas renderer should attach to given position in the container" name="canvas renderer should attach to given position in the container" time="0.001">
    </testcase>
    <testcase classname="canvas renderer should detach from parent element when destoyed" name="canvas renderer should detach from parent element when destoyed" time="0">
    </testcase>
    <testcase classname="canvas renderer setKey should set key attribute" name="canvas renderer setKey should set key attribute" time="0">
    </testcase>
    <testcase classname="canvas renderer itemsAt should return shapes at a point" name="canvas renderer itemsAt should return shapes at a point" time="0.002">
    </testcase>
    <testcase classname="canvas renderer itemsAt should return shapes at a line" name="canvas renderer itemsAt should return shapes at a line" time="0.001">
    </testcase>
    <testcase classname="canvas renderer itemsAt should return shapes at a rect" name="canvas renderer itemsAt should return shapes at a rect" time="0.001">
    </testcase>
    <testcase classname="canvas renderer should scale canvas to adjust for HiDPI screens" name="canvas renderer should scale canvas to adjust for HiDPI screens" time="0">
    </testcase>
    <testcase classname="canvas renderer should apply a scale ratio" name="canvas renderer should apply a scale ratio" time="0.001">
    </testcase>
    <testcase classname="canvas renderer should account for screen dpi when applying scale ratio" name="canvas renderer should account for screen dpi when applying scale ratio" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Scale - qTime" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:26" time="0.448" tests="6">
    <testcase classname="Scale - qTime should return a linearly interpolated value" name="Scale - qTime should return a linearly interpolated value" time="0.001">
    </testcase>
    <testcase classname="Scale - qTime should handle NaN value" name="Scale - qTime should handle NaN value" time="0">
    </testcase>
    <testcase classname="Scale - qTime min/max should derive min/max from data fields" name="Scale - qTime min/max should derive min/max from data fields" time="0">
    </testcase>
    <testcase classname="Scale - qTime min/max should use min/max from settings" name="Scale - qTime min/max should use min/max from settings" time="0">
    </testcase>
    <testcase classname="Scale - qTime ticks should generate outer level with minor" name="Scale - qTime ticks should generate outer level with minor" time="0.001">
    </testcase>
    <testcase classname="Scale - qTime ticks should generate inner level without minor" name="Scale - qTime ticks should generate inner level without minor" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Hierarchical band scale" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:26" time="0.505" tests="23">
    <testcase classname="Hierarchical band scale domain should have empty domain as default" name="Hierarchical band scale domain should have empty domain as default" time="0.001">
    </testcase>
    <testcase classname="Hierarchical band scale domain should set domain to leaf nodes and inject spacer values for each branch node" name="Hierarchical band scale domain should set domain to leaf nodes and inject spacer values for each branch node" time="0.001">
    </testcase>
    <testcase classname="Hierarchical band scale range should use a normalized range" name="Hierarchical band scale range should use a normalized range" time="0">
    </testcase>
    <testcase classname="Hierarchical band scale range should support invert" name="Hierarchical band scale range should support invert" time="0">
    </testcase>
    <testcase classname="Hierarchical band scale labels should return labels for leaf nodes" name="Hierarchical band scale labels should return labels for leaf nodes" time="0">
    </testcase>
    <testcase classname="Hierarchical band scale bandwidth should return correct bandwidth for leaf nodes" name="Hierarchical band scale bandwidth should return correct bandwidth for leaf nodes" time="0.001">
    </testcase>
    <testcase classname="Hierarchical band scale bandwidth should return correct bandwidth for a branch node" name="Hierarchical band scale bandwidth should return correct bandwidth for a branch node" time="0">
    </testcase>
    <testcase classname="Hierarchical band scale bandwidth should return leaf node bandwidth for unkown input" name="Hierarchical band scale bandwidth should return leaf node bandwidth for unkown input" time="0">
    </testcase>
    <testcase classname="Hierarchical band scale step should return correct step size for leaf nodes" name="Hierarchical band scale step should return correct step size for leaf nodes" time="0">
    </testcase>
    <testcase classname="Hierarchical band scale step should return correct step size for a branch nodes" name="Hierarchical band scale step should return correct step size for a branch nodes" time="0">
    </testcase>
    <testcase classname="Hierarchical band scale step should return leaf node step size for unknown input" name="Hierarchical band scale step should return leaf node step size for unknown input" time="0.001">
    </testcase>
    <testcase classname="Hierarchical band scale value should return correct value for a leaf node" name="Hierarchical band scale value should return correct value for a leaf node" time="0">
    </testcase>
    <testcase classname="Hierarchical band scale value should return correct value for a branch node" name="Hierarchical band scale value should return correct value for a branch node" time="0">
    </testcase>
    <testcase classname="Hierarchical band scale value should handle unknown input" name="Hierarchical band scale value should handle unknown input" time="0">
    </testcase>
    <testcase classname="Hierarchical band scale value should return correct value when inverted" name="Hierarchical band scale value should return correct value when inverted" time="0">
    </testcase>
    <testcase classname="Hierarchical band scale datum should return node data value" name="Hierarchical band scale datum should return node data value" time="0.001">
    </testcase>
    <testcase classname="Hierarchical band scale datum should handle unknown input" name="Hierarchical band scale datum should handle unknown input" time="0">
    </testcase>
    <testcase classname="Hierarchical band scale ticks should by default return ticks for each leaf node" name="Hierarchical band scale ticks should by default return ticks for each leaf node" time="0.001">
    </testcase>
    <testcase classname="Hierarchical band scale ticks should return ticks at depth" name="Hierarchical band scale ticks should return ticks at depth" time="0">
    </testcase>
    <testcase classname="Hierarchical band scale pxScale with start align should adjust correctly for leaf nodes" name="Hierarchical band scale pxScale with start align should adjust correctly for leaf nodes" time="0">
    </testcase>
    <testcase classname="Hierarchical band scale pxScale with start align should adjust correctly for branch nodes" name="Hierarchical band scale pxScale with start align should adjust correctly for branch nodes" time="0">
    </testcase>
    <testcase classname="Hierarchical band scale pxScale with padding should adjust correctly for leaf nodes" name="Hierarchical band scale pxScale with padding should adjust correctly for leaf nodes" time="0">
    </testcase>
    <testcase classname="Hierarchical band scale pxScale with padding should adjust correctly for branch nodes" name="Hierarchical band scale pxScale with padding should adjust correctly for branch nodes" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Sequential" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.358" tests="16">
    <testcase classname="Sequential Basic colors default settings" name="Sequential Basic colors default settings" time="0.002">
    </testcase>
    <testcase classname="Sequential Basic colors max/min settings" name="Sequential Basic colors max/min settings" time="0">
    </testcase>
    <testcase classname="Sequential Basic colors invalid max/min settings" name="Sequential Basic colors invalid max/min settings" time="0">
    </testcase>
    <testcase classname="Sequential Basic colors only fields" name="Sequential Basic colors only fields" time="0.001">
    </testcase>
    <testcase classname="Sequential Basic colors should invert scale" name="Sequential Basic colors should invert scale" time="0">
    </testcase>
    <testcase classname="Sequential Basic colors invalid max/min on fields" name="Sequential Basic colors invalid max/min on fields" time="0.001">
    </testcase>
    <testcase classname="Sequential Basic colors should scale two rgb colors" name="Sequential Basic colors should scale two rgb colors" time="0.001">
    </testcase>
    <testcase classname="Sequential Basic colors should scale two hsl colors" name="Sequential Basic colors should scale two hsl colors" time="0">
    </testcase>
    <testcase classname="Sequential Basic colors should scale rgb color to a hsl color" name="Sequential Basic colors should scale rgb color to a hsl color" time="0">
    </testcase>
    <testcase classname="Sequential Basic colors should scale hsl color to a rgb color" name="Sequential Basic colors should scale hsl color to a rgb color" time="0">
    </testcase>
    <testcase classname="Sequential Basic colors should scale a single color over lightness" name="Sequential Basic colors should scale a single color over lightness" time="0">
    </testcase>
    <testcase classname="Sequential Basic colors should scale a single color over lightness when using classify" name="Sequential Basic colors should scale a single color over lightness when using classify" time="0.001">
    </testcase>
    <testcase classname="Sequential Basic colors should clamp colors" name="Sequential Basic colors should clamp colors" time="0.002">
    </testcase>
    <testcase classname="Sequential Generate limits should add limits if missing" name="Sequential Generate limits should add limits if missing" time="0">
    </testcase>
    <testcase classname="Sequential Generate limits should use input range if exists" name="Sequential Generate limits should use input range if exists" time="0.001">
    </testcase>
    <testcase classname="Sequential Generate limits should generate more limits" name="Sequential Generate limits should generate more limits" time="0">
    </testcase>
  </testsuite>
  <testsuite name="legend-cat" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.374" tests="3">
    <testcase classname="legend-cat should render items with default settings" name="legend-cat should render items with default settings" time="0.003">
    </testcase>
    <testcase classname="legend-cat should calculate preferredSize" name="legend-cat should calculate preferredSize" time="0.001">
    </testcase>
    <testcase classname="legend-cat should render with nagivation" name="legend-cat should render with nagivation" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="line component" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.359" tests="7">
    <testcase classname="line component should not render lines with default settings and no scales" name="line component should not render lines with default settings and no scales" time="0.002">
    </testcase>
    <testcase classname="line component should render lines with default settings and scales" name="line component should render lines with default settings and scales" time="0.001">
    </testcase>
    <testcase classname="line component should render X scale lines only" name="line component should render X scale lines only" time="0.001">
    </testcase>
    <testcase classname="line component should render Y scale lines only" name="line component should render Y scale lines only" time="0.001">
    </testcase>
    <testcase classname="line component should render minorTicks" name="line component should render minorTicks" time="0.001">
    </testcase>
    <testcase classname="line component should not render disabled ticks" name="line component should not render disabled ticks" time="0.001">
    </testcase>
    <testcase classname="line component should render minorTicks with correct color" name="line component should render minorTicks with correct color" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="q-data" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:26" time="0.484" tests="36">
    <testcase classname="q-data error handling no data should throw" name="q-data error handling no data should throw" time="0.001">
    </testcase>
    <testcase classname="q-data error handling bad cube should throw" name="q-data error handling bad cube should throw" time="0">
    </testcase>
    <testcase classname="q-data virtualFields should be found" name="q-data virtualFields should be found" time="0">
    </testcase>
    <testcase classname="q-data virtualFields should have link to its origin" name="q-data virtualFields should have link to its origin" time="0.001">
    </testcase>
    <testcase classname="q-data qMode=&quot;S&quot; should pass localeInfo to field" name="q-data qMode=&quot;S&quot; should pass localeInfo to field" time="0">
    </testcase>
    <testcase classname="q-data qMode=&quot;S&quot; should pass localeInfo to attribute field" name="q-data qMode=&quot;S&quot; should pass localeInfo to attribute field" time="0">
    </testcase>
    <testcase classname="q-data qMode=&quot;S&quot; dimension items" name="q-data qMode=&quot;S&quot; dimension items" time="0.001">
    </testcase>
    <testcase classname="q-data qMode=&quot;S&quot; measure items" name="q-data qMode=&quot;S&quot; measure items" time="0">
    </testcase>
    <testcase classname="q-data qMode=&quot;S&quot; attribute expression items" name="q-data qMode=&quot;S&quot; attribute expression items" time="0">
    </testcase>
    <testcase classname="q-data qMode=&quot;S&quot; attribute dimension items" name="q-data qMode=&quot;S&quot; attribute dimension items" time="0">
    </testcase>
    <testcase classname="q-data qMode=&quot;S&quot; extract dimension" name="q-data qMode=&quot;S&quot; extract dimension" time="0">
    </testcase>
    <testcase classname="q-data qMode=&quot;S&quot; hierarchy root" name="q-data qMode=&quot;S&quot; hierarchy root" time="0.001">
    </testcase>
    <testcase classname="q-data qMode=&quot;S&quot; hierarchy props" name="q-data qMode=&quot;S&quot; hierarchy props" time="0.001">
    </testcase>
    <testcase classname="q-data qMode=&quot;K&quot; dimension items" name="q-data qMode=&quot;K&quot; dimension items" time="0">
    </testcase>
    <testcase classname="q-data qMode=&quot;K&quot; measure items" name="q-data qMode=&quot;K&quot; measure items" time="0">
    </testcase>
    <testcase classname="q-data qMode=&quot;K&quot; attribute expression items" name="q-data qMode=&quot;K&quot; attribute expression items" time="0">
    </testcase>
    <testcase classname="q-data qMode=&quot;K&quot; attribute dimension items" name="q-data qMode=&quot;K&quot; attribute dimension items" time="0">
    </testcase>
    <testcase classname="q-data qMode=&quot;T&quot; dimension items" name="q-data qMode=&quot;T&quot; dimension items" time="0">
    </testcase>
    <testcase classname="q-data qMode=&quot;T&quot; measure items" name="q-data qMode=&quot;T&quot; measure items" time="0">
    </testcase>
    <testcase classname="q-data qMode=&quot;T&quot; attribute expression items" name="q-data qMode=&quot;T&quot; attribute expression items" time="0">
    </testcase>
    <testcase classname="q-data qMode=&quot;T&quot; attribute dimension items" name="q-data qMode=&quot;T&quot; attribute dimension items" time="0">
    </testcase>
    <testcase classname="q-data qMode=&quot;T&quot; hierarchy should return tree" name="q-data qMode=&quot;T&quot; hierarchy should return tree" time="0">
    </testcase>
    <testcase classname="q-data TreeData dimension items" name="q-data TreeData dimension items" time="0">
    </testcase>
    <testcase classname="q-data TreeData measure items" name="q-data TreeData measure items" time="0">
    </testcase>
    <testcase classname="q-data TreeData attribute expression items" name="q-data TreeData attribute expression items" time="0">
    </testcase>
    <testcase classname="q-data TreeData attribute dimension items" name="q-data TreeData attribute dimension items" time="0.001">
    </testcase>
    <testcase classname="q-data TreeData hierarchy should return tree" name="q-data TreeData hierarchy should return tree" time="0">
    </testcase>
    <testcase classname="q-data find field should find attribute dimension on dimension" name="q-data find field should find attribute dimension on dimension" time="0">
    </testcase>
    <testcase classname="q-data find field should find attribute expression on dimension" name="q-data find field should find attribute expression on dimension" time="0">
    </testcase>
    <testcase classname="q-data find field should find attribute dimension on measure" name="q-data find field should find attribute dimension on measure" time="0">
    </testcase>
    <testcase classname="q-data find field should find attribute expression on measure" name="q-data find field should find attribute expression on measure" time="0">
    </testcase>
    <testcase classname="q-data find field should find a main field by number" name="q-data find field should find a main field by number" time="0">
    </testcase>
    <testcase classname="q-data find field should throw an error when field not found" name="q-data find field should throw an error when field not found" time="0">
    </testcase>
    <testcase classname="q-data find field should return false when search by function misses" name="q-data find field should return false when search by function misses" time="0">
    </testcase>
    <testcase classname="q-data find field should find field by function" name="q-data find field should find field by function" time="0">
    </testcase>
    <testcase classname="q-data find field should return field when given as a parameter" name="q-data find field should return field when given as a parameter" time="0">
    </testcase>
  </testsuite>
  <testsuite name="brush-lasso" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.489" tests="12">
    <testcase classname="brush-lasso should show lasso" name="brush-lasso should show lasso" time="0.002">
    </testcase>
    <testcase classname="brush-lasso should show startPoint" name="brush-lasso should show startPoint" time="0.001">
    </testcase>
    <testcase classname="brush-lasso should show snapIndicator if distance is smaller then threshold" name="brush-lasso should show snapIndicator if distance is smaller then threshold" time="0.001">
    </testcase>
    <testcase classname="brush-lasso should not show snapIndicator if distance is larger then threshold" name="brush-lasso should not show snapIndicator if distance is larger then threshold" time="0.001">
    </testcase>
    <testcase classname="brush-lasso call cycle should not call render on &quot;start&quot;" name="brush-lasso call cycle should not call render on &quot;start&quot;" time="0.001">
    </testcase>
    <testcase classname="brush-lasso call cycle should call render on &quot;move&quot;" name="brush-lasso call cycle should call render on &quot;move&quot;" time="0.001">
    </testcase>
    <testcase classname="brush-lasso call cycle should call render on &quot;end&quot;" name="brush-lasso call cycle should call render on &quot;end&quot;" time="0.001">
    </testcase>
    <testcase classname="brush-lasso call cycle should not call render on &quot;move&quot; if lasso has not been initiated" name="brush-lasso call cycle should not call render on &quot;move&quot; if lasso has not been initiated" time="0">
    </testcase>
    <testcase classname="brush-lasso call cycle should not call render on &quot;end&quot; if lasso has not been initiated" name="brush-lasso call cycle should not call render on &quot;end&quot; if lasso has not been initiated" time="0.001">
    </testcase>
    <testcase classname="brush-lasso settings lasso" name="brush-lasso settings lasso" time="0.001">
    </testcase>
    <testcase classname="brush-lasso settings snapIndicator" name="brush-lasso settings snapIndicator" time="0.001">
    </testcase>
    <testcase classname="brush-lasso settings startPoint" name="brush-lasso settings startPoint" time="0">
    </testcase>
  </testsuite>
  <testsuite name="picasso.js" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:25" time="1.957" tests="12">
    <testcase classname="picasso.js api should expose the correct top-level API" name="picasso.js api should expose the correct top-level API" time="0.007">
    </testcase>
    <testcase classname="picasso.js use should expose registries to plugin API" name="picasso.js use should expose registries to plugin API" time="0.001">
    </testcase>
    <testcase classname="picasso.js use should expose logger" name="picasso.js use should expose logger" time="0">
    </testcase>
    <testcase classname="picasso.js config should set default renderer" name="picasso.js config should set default renderer" time="0.001">
    </testcase>
    <testcase classname="picasso.js config should set default log level" name="picasso.js config should set default log level" time="0">
    </testcase>
    <testcase classname="picasso.js config should inherit style" name="picasso.js config should inherit style" time="0">
    </testcase>
    <testcase classname="picasso.js config should extend palettes" name="picasso.js config should extend palettes" time="0">
    </testcase>
    <testcase classname="picasso.js Chart lifecycle should call mounted function" name="picasso.js Chart lifecycle should call mounted function" time="0.002">
    </testcase>
    <testcase classname="picasso.js Chart lifecycle should expose the element" name="picasso.js Chart lifecycle should expose the element" time="0">
    </testcase>
    <testcase classname="picasso.js Chart lifecycle should call updated function" name="picasso.js Chart lifecycle should call updated function" time="0">
    </testcase>
    <testcase classname="picasso.js Chart lifecycle should bind event listener" name="picasso.js Chart lifecycle should bind event listener" time="0.001">
    </testcase>
    <testcase classname="picasso.js Chart lifecycle should bind brush event listeners" name="picasso.js Chart lifecycle should bind brush event listeners" time="0">
    </testcase>
  </testsuite>
  <testsuite name="augment-hierarchy" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.349" tests="9">
    <testcase classname="augment-hierarchy containing two dimensions, one measure should return a root node" name="augment-hierarchy containing two dimensions, one measure should return a root node" time="0.002">
    </testcase>
    <testcase classname="augment-hierarchy containing two dimensions, one measure should add a data property per node" name="augment-hierarchy containing two dimensions, one measure should add a data property per node" time="0.001">
    </testcase>
    <testcase classname="augment-hierarchy containing two dimensions, one measure should add a data property of an ancestor node" name="augment-hierarchy containing two dimensions, one measure should add a data property of an ancestor node" time="0">
    </testcase>
    <testcase classname="augment-hierarchy containing two dimensions, one measure should add a data property of a descendant node" name="augment-hierarchy containing two dimensions, one measure should add a data property of a descendant node" time="0">
    </testcase>
    <testcase classname="augment-hierarchy containing two dimensions, one measure should add a data property of reduced values" name="augment-hierarchy containing two dimensions, one measure should add a data property of reduced values" time="0">
    </testcase>
    <testcase classname="augment-hierarchy containing two dimensions, one measure should add a data property for multiple fields" name="augment-hierarchy containing two dimensions, one measure should add a data property for multiple fields" time="0">
    </testcase>
    <testcase classname="augment-hierarchy S mode hierarchy" name="augment-hierarchy S mode hierarchy" time="0.001">
    </testcase>
    <testcase classname="augment-hierarchy S mode hierarchy - should handle empty qColumnOrder" name="augment-hierarchy S mode hierarchy - should handle empty qColumnOrder" time="0">
    </testcase>
    <testcase classname="augment-hierarchy S mode hierarchy - should handle if qColumnOrder doesnt contain a reference to all fields" name="augment-hierarchy S mode hierarchy - should handle if qColumnOrder doesnt contain a reference to all fields" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="stack" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.292" tests="2">
    <testcase classname="stack should attach generated field" name="stack should attach generated field" time="0">
    </testcase>
    <testcase classname="stack should attach start and end properties" name="stack should attach start and end properties" time="0">
    </testcase>
  </testsuite>
  <testsuite name="LinearScale" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.331" tests="29">
    <testcase classname="LinearScale should have 0-1 as defaults" name="LinearScale should have 0-1 as defaults" time="0">
    </testcase>
    <testcase classname="LinearScale should have min/max depend on domain" name="LinearScale should have min/max depend on domain" time="0">
    </testcase>
    <testcase classname="LinearScale should have start/end depend on domain" name="LinearScale should have start/end depend on domain" time="0">
    </testcase>
    <testcase classname="LinearScale should return a linearly interpolated value" name="LinearScale should return a linearly interpolated value" time="0">
    </testcase>
    <testcase classname="LinearScale should return a inverted linearly interpolated value" name="LinearScale should return a inverted linearly interpolated value" time="0.001">
    </testcase>
    <testcase classname="LinearScale should return a rounded linearly interpolated value" name="LinearScale should return a rounded linearly interpolated value" time="0">
    </testcase>
    <testcase classname="LinearScale should support a nice domain start/end value" name="LinearScale should support a nice domain start/end value" time="0">
    </testcase>
    <testcase classname="LinearScale should return a linearly interpolated value with negative range" name="LinearScale should return a linearly interpolated value with negative range" time="0">
    </testcase>
    <testcase classname="LinearScale should support clamping a linearly interpolated value" name="LinearScale should support clamping a linearly interpolated value" time="0">
    </testcase>
    <testcase classname="LinearScale should return a ticks representation of the interpolated value" name="LinearScale should return a ticks representation of the interpolated value" time="0">
    </testcase>
    <testcase classname="LinearScale should support piecewise linear values" name="LinearScale should support piecewise linear values" time="0">
    </testcase>
    <testcase classname="LinearScale should support piecewise linear values with negative range" name="LinearScale should support piecewise linear values with negative range" time="0.001">
    </testcase>
    <testcase classname="LinearScale should support grouping values" name="LinearScale should support grouping values" time="0">
    </testcase>
    <testcase classname="LinearScale should support grouping negative values" name="LinearScale should support grouping negative values" time="0">
    </testcase>
    <testcase classname="LinearScale should support grouping a negative value range" name="LinearScale should support grouping a negative value range" time="0">
    </testcase>
    <testcase classname="LinearScale norm should output a normalized value" name="LinearScale norm should output a normalized value" time="0">
    </testcase>
    <testcase classname="LinearScale norm should support piecewise linear values" name="LinearScale norm should support piecewise linear values" time="0">
    </testcase>
    <testcase classname="LinearScale norm should always clamp output" name="LinearScale norm should always clamp output" time="0">
    </testcase>
    <testcase classname="LinearScale norm should sync domain changes" name="LinearScale norm should sync domain changes" time="0">
    </testcase>
    <testcase classname="LinearScale normInvert should output a inverted value" name="LinearScale normInvert should output a inverted value" time="0">
    </testcase>
    <testcase classname="LinearScale normInvert should support piecewise linear values" name="LinearScale normInvert should support piecewise linear values" time="0">
    </testcase>
    <testcase classname="LinearScale normInvert should always clamp output" name="LinearScale normInvert should always clamp output" time="0">
    </testcase>
    <testcase classname="LinearScale normInvert should sync domain changes" name="LinearScale normInvert should sync domain changes" time="0">
    </testcase>
    <testcase classname="LinearScale Color Scale should scale two rgb colors" name="LinearScale Color Scale should scale two rgb colors" time="0.001">
    </testcase>
    <testcase classname="LinearScale Color Scale should scale two hsl colors" name="LinearScale Color Scale should scale two hsl colors" time="0.001">
    </testcase>
    <testcase classname="LinearScale Color Scale should scale rgb color to a hsl color" name="LinearScale Color Scale should scale rgb color to a hsl color" time="0">
    </testcase>
    <testcase classname="LinearScale Color Scale should scale hsl color to a rgb color" name="LinearScale Color Scale should scale hsl color to a rgb color" time="0">
    </testcase>
    <testcase classname="LinearScale Color Scale should scale a single color over lightness" name="LinearScale Color Scale should scale a single color over lightness" time="0">
    </testcase>
    <testcase classname="LinearScale Color Scale should scale a single color over lightness when using classify" name="LinearScale Color Scale should scale a single color over lightness when using classify" time="0">
    </testcase>
  </testsuite>
  <testsuite name="categorical" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.333" tests="7">
    <testcase classname="categorical should return greyish color for unknown values (default)" name="categorical should return greyish color for unknown values (default)" time="0.001">
    </testcase>
    <testcase classname="categorical should return red color for unknown values" name="categorical should return red color for unknown values" time="0">
    </testcase>
    <testcase classname="categorical should return default range from theme" name="categorical should return default range from theme" time="0">
    </testcase>
    <testcase classname="categorical explicit should not modify domain when explicit domain is set" name="categorical explicit should not modify domain when explicit domain is set" time="0">
    </testcase>
    <testcase classname="categorical explicit should modify range when explicit range and domain are set" name="categorical explicit should modify range when explicit range and domain are set" time="0">
    </testcase>
    <testcase classname="categorical explicit should return custom color for &quot;Italy&quot;" name="categorical explicit should return custom color for &quot;Italy&quot;" time="0">
    </testcase>
    <testcase classname="categorical explicit should override range" name="categorical explicit should override range" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Scene" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.332" tests="7">
    <testcase classname="Scene should accept a custom stage" name="Scene should accept a custom stage" time="0">
    </testcase>
    <testcase classname="Scene Disabled nodes should resolve as a function" name="Scene Disabled nodes should resolve as a function" time="0.001">
    </testcase>
    <testcase classname="Scene Disabled nodes should not parse node if disabled" name="Scene Disabled nodes should not parse node if disabled" time="0">
    </testcase>
    <testcase classname="Scene Events should accept create events" name="Scene Events should accept create events" time="0.001">
    </testcase>
    <testcase classname="Scene Transform should handle transform on a flat structure" name="Scene Transform should handle transform on a flat structure" time="0">
    </testcase>
    <testcase classname="Scene Transform should handle transform on a hierarchical structure" name="Scene Transform should handle transform on a hierarchical structure" time="0">
    </testcase>
    <testcase classname="Scene Transform should handle transform on a complex hierarchical structure" name="Scene Transform should handle transform on a complex hierarchical structure" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Linear data scale" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.39" tests="31">
    <testcase classname="Linear data scale should create a function object" name="Linear data scale should create a function object" time="0.001">
    </testcase>
    <testcase classname="Linear data scale should return a scaled value on the function object" name="Linear data scale should return a scaled value on the function object" time="0">
    </testcase>
    <testcase classname="Linear data scale should use a normalized range" name="Linear data scale should use a normalized range" time="0">
    </testcase>
    <testcase classname="Linear data scale should generate a domain based on the min and max of all fields" name="Linear data scale should generate a domain based on the min and max of all fields" time="0.001">
    </testcase>
    <testcase classname="Linear data scale should default to -1 and 1 as domain if data range and data value is equal to zero" name="Linear data scale should default to -1 and 1 as domain if data range and data value is equal to zero" time="0">
    </testcase>
    <testcase classname="Linear data scale should default to -1 and 1 as domain if data range is NaN" name="Linear data scale should default to -1 and 1 as domain if data range is NaN" time="0">
    </testcase>
    <testcase classname="Linear data scale should default expand by 10% if data range is equal to zero" name="Linear data scale should default expand by 10% if data range is equal to zero" time="0">
    </testcase>
    <testcase classname="Linear data scale Settings should follow a specific predecence for settings effecting the domain" name="Linear data scale Settings should follow a specific predecence for settings effecting the domain" time="0">
    </testcase>
    <testcase classname="Linear data scale Settings should expose data and resources as context in callback functions" name="Linear data scale Settings should expose data and resources as context in callback functions" time="0">
    </testcase>
    <testcase classname="Linear data scale Settings Invert should be possible to invert the scale using a boolean" name="Linear data scale Settings Invert should be possible to invert the scale using a boolean" time="0">
    </testcase>
    <testcase classname="Linear data scale Settings Invert should be possible to invert the scale using a function" name="Linear data scale Settings Invert should be possible to invert the scale using a function" time="0.001">
    </testcase>
    <testcase classname="Linear data scale Settings Invert should handle truty values" name="Linear data scale Settings Invert should handle truty values" time="0.002">
    </testcase>
    <testcase classname="Linear data scale Settings Invert should handle falsy values" name="Linear data scale Settings Invert should handle falsy values" time="0">
    </testcase>
    <testcase classname="Linear data scale Settings Invert should be respected in the normalized output" name="Linear data scale Settings Invert should be respected in the normalized output" time="0">
    </testcase>
    <testcase classname="Linear data scale Settings Invert should be respected in the normalized inverted output" name="Linear data scale Settings Invert should be respected in the normalized inverted output" time="0.001">
    </testcase>
    <testcase classname="Linear data scale Settings Expand should be possible to expand the domain using a number" name="Linear data scale Settings Expand should be possible to expand the domain using a number" time="0">
    </testcase>
    <testcase classname="Linear data scale Settings Expand should be possible to expand the domain using a function" name="Linear data scale Settings Expand should be possible to expand the domain using a function" time="0">
    </testcase>
    <testcase classname="Linear data scale Settings Expand should ignore non-numeric values" name="Linear data scale Settings Expand should ignore non-numeric values" time="0">
    </testcase>
    <testcase classname="Linear data scale Settings Expand should not be applied if data range and data value is equal to zero" name="Linear data scale Settings Expand should not be applied if data range and data value is equal to zero" time="0">
    </testcase>
    <testcase classname="Linear data scale Settings Expand should not be applied if data range is equal to zero" name="Linear data scale Settings Expand should not be applied if data range is equal to zero" time="0">
    </testcase>
    <testcase classname="Linear data scale Settings Min/Max should be possible to set min/max the domain using a number" name="Linear data scale Settings Min/Max should be possible to set min/max the domain using a number" time="0">
    </testcase>
    <testcase classname="Linear data scale Settings Min/Max should be possible to set min/max the domain using a function" name="Linear data scale Settings Min/Max should be possible to set min/max the domain using a function" time="0">
    </testcase>
    <testcase classname="Linear data scale Settings Min/Max should ignore non-numeric values" name="Linear data scale Settings Min/Max should ignore non-numeric values" time="0">
    </testcase>
    <testcase classname="Linear data scale Settings Min/Max should be applied if data range and data value is equal to zero" name="Linear data scale Settings Min/Max should be applied if data range and data value is equal to zero" time="0.001">
    </testcase>
    <testcase classname="Linear data scale Settings Min/Max should be applied if data range is equal to zero" name="Linear data scale Settings Min/Max should be applied if data range is equal to zero" time="0">
    </testcase>
    <testcase classname="Linear data scale Settings Include should be possible to set a range of values to include in the domain using an Array" name="Linear data scale Settings Include should be possible to set a range of values to include in the domain using an Array" time="0">
    </testcase>
    <testcase classname="Linear data scale Settings Include should be possible to set a range of values to include in the domain using a function" name="Linear data scale Settings Include should be possible to set a range of values to include in the domain using a function" time="0">
    </testcase>
    <testcase classname="Linear data scale Settings Include should handle when input array contains non-numeric values" name="Linear data scale Settings Include should handle when input array contains non-numeric values" time="0">
    </testcase>
    <testcase classname="Linear data scale Settings Include should be applied if data range and data value is equal to zero" name="Linear data scale Settings Include should be applied if data range and data value is equal to zero" time="0">
    </testcase>
    <testcase classname="Linear data scale Settings Include should be applied if data range is equal to zero" name="Linear data scale Settings Include should be applied if data range is equal to zero" time="0">
    </testcase>
    <testcase classname="Linear data scale Settings Include should only extend domain if included values are above or below current domain range" name="Linear data scale Settings Include should only extend domain if included values are above or below current domain range" time="0">
    </testcase>
  </testsuite>
  <testsuite name="formatter" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.29" tests="2">
    <testcase classname="formatter should return the default d3 number formatter" name="formatter should return the default d3 number formatter" time="0">
    </testcase>
    <testcase classname="formatter should return the default d3 time formatter" name="formatter should return the default d3 time formatter" time="0">
    </testcase>
  </testsuite>
  <testsuite name="line component" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.357" tests="8">
    <testcase classname="line component should render lines with default settings" name="line component should render lines with default settings" time="0.001">
    </testcase>
    <testcase classname="line component should render lines with custom settings" name="line component should render lines with custom settings" time="0.001">
    </testcase>
    <testcase classname="line component should update settings" name="line component should update settings" time="0.001">
    </testcase>
    <testcase classname="line component should render area" name="line component should render area" time="0">
    </testcase>
    <testcase classname="line component should render area, minor, and minor0 lines (3 lines) when show is true and has minor0" name="line component should render area, minor, and minor0 lines (3 lines) when show is true and has minor0" time="0.001">
    </testcase>
    <testcase classname="line component should not render minor0 line when has minor0 but showMinor0 is false" name="line component should not render minor0 line when has minor0 but showMinor0 is false" time="0">
    </testcase>
    <testcase classname="line component layer order should be sorted by median by default" name="line component layer order should be sorted by median by default" time="0.001">
    </testcase>
    <testcase classname="line component layer order should be sorted by custom sorting function" name="line component layer order should be sorted by custom sorting function" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Scene Node" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.317" tests="27">
    <testcase classname="Scene Node should return child nodes" name="Scene Node should return child nodes" time="0">
    </testcase>
    <testcase classname="Scene Node should return parent node" name="Scene Node should return parent node" time="0.001">
    </testcase>
    <testcase classname="Scene Node should null when there is no parent node" name="Scene Node should null when there is no parent node" time="0">
    </testcase>
    <testcase classname="Scene Node should expose node type" name="Scene Node should expose node type" time="0">
    </testcase>
    <testcase classname="Scene Node should expose node data value" name="Scene Node should expose node data value" time="0">
    </testcase>
    <testcase classname="Scene Node should expose node attributes" name="Scene Node should expose node attributes" time="0">
    </testcase>
    <testcase classname="Scene Node should expose node desc" name="Scene Node should expose node desc" time="0">
    </testcase>
    <testcase classname="Scene Node should expose node tag" name="Scene Node should expose node tag" time="0">
    </testcase>
    <testcase classname="Scene Node bounds should expose node bounds, after any transform" name="Scene Node bounds should expose node bounds, after any transform" time="0.001">
    </testcase>
    <testcase classname="Scene Node bounds should expose node bounds, exluding the dpi scale factor" name="Scene Node bounds should expose node bounds, exluding the dpi scale factor" time="0">
    </testcase>
    <testcase classname="Scene Node bounds should handle when node doesnt expose a way to get the bounding rect" name="Scene Node bounds should handle when node doesnt expose a way to get the bounding rect" time="0">
    </testcase>
    <testcase classname="Scene Node bounds should return a copy of the node bounds to avoid mutation issues" name="Scene Node bounds should return a copy of the node bounds to avoid mutation issues" time="0.001">
    </testcase>
    <testcase classname="Scene Node localBounds should return node bounds, without any transform" name="Scene Node localBounds should return node bounds, without any transform" time="0">
    </testcase>
    <testcase classname="Scene Node boundsRelativeTo HTMLElement should return node bounds relative to the target, including any transform" name="Scene Node boundsRelativeTo HTMLElement should return node bounds relative to the target, including any transform" time="0">
    </testcase>
    <testcase classname="Scene Node boundsRelativeTo HTMLElement should return node bounds relative to the target, excluding any transform" name="Scene Node boundsRelativeTo HTMLElement should return node bounds relative to the target, excluding any transform" time="0.001">
    </testcase>
    <testcase classname="Scene Node boundsRelativeTo HTMLElement should handle when element is not set" name="Scene Node boundsRelativeTo HTMLElement should handle when element is not set" time="0">
    </testcase>
    <testcase classname="Scene Node boundsRelativeTo viewport should return node bounds relative to the viewport, including any transform" name="Scene Node boundsRelativeTo viewport should return node bounds relative to the viewport, including any transform" time="0">
    </testcase>
    <testcase classname="Scene Node boundsRelativeTo viewport should return node bounds relative to the viewport, excluding any transform" name="Scene Node boundsRelativeTo viewport should return node bounds relative to the viewport, excluding any transform" time="0">
    </testcase>
    <testcase classname="Scene Node boundsRelativeTo viewport should handle when element is not set" name="Scene Node boundsRelativeTo viewport should handle when element is not set" time="0">
    </testcase>
    <testcase classname="Scene Node should expose node collider as a geometrical shape rect" name="Scene Node should expose node collider as a geometrical shape rect" time="0.001">
    </testcase>
    <testcase classname="Scene Node should expose node collider as a geometrical shape line" name="Scene Node should expose node collider as a geometrical shape line" time="0">
    </testcase>
    <testcase classname="Scene Node should expose node collider as a geometrical shape circle" name="Scene Node should expose node collider as a geometrical shape circle" time="0">
    </testcase>
    <testcase classname="Scene Node should expose node collider as a geometrical shape polygon" name="Scene Node should expose node collider as a geometrical shape polygon" time="0">
    </testcase>
    <testcase classname="Scene Node should expose node collider as a geometrical shape collection" name="Scene Node should expose node collider as a geometrical shape collection" time="0.001">
    </testcase>
    <testcase classname="Scene Node should expose node collider as a geometrical shape bounds" name="Scene Node should expose node collider as a geometrical shape bounds" time="0">
    </testcase>
    <testcase classname="Scene Node should expose node collider as a geometrical shape and include any transform on the node" name="Scene Node should expose node collider as a geometrical shape and include any transform on the node" time="0">
    </testcase>
    <testcase classname="Scene Node should expose node collider as a geometrical shape and handle if node doesnt have any collider" name="Scene Node should expose node collider as a geometrical shape and handle if node doesnt have any collider" time="0">
    </testcase>
  </testsuite>
  <testsuite name="chart formatters" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.294" tests="12">
    <testcase classname="chart formatters collection should return fallback formatter when unknown config is used" name="chart formatters collection should return fallback formatter when unknown config is used" time="0">
    </testcase>
    <testcase classname="chart formatters collection should return formatter from config" name="chart formatters collection should return formatter from config" time="0">
    </testcase>
    <testcase classname="chart formatters collection should return named formatter from config" name="chart formatters collection should return named formatter from config" time="0.001">
    </testcase>
    <testcase classname="chart formatters collection should return named type from config" name="chart formatters collection should return named type from config" time="0">
    </testcase>
    <testcase classname="chart formatters collection should maintain cache of created formatters" name="chart formatters collection should maintain cache of created formatters" time="0">
    </testcase>
    <testcase classname="chart formatters collection should create formatter on the fly" name="chart formatters collection should create formatter on the fly" time="0">
    </testcase>
    <testcase classname="chart formatters collection should return all formatters" name="chart formatters collection should return all formatters" time="0">
    </testcase>
    <testcase classname="chart formatters create should throw when type is not registered" name="chart formatters create should throw when type is not registered" time="0">
    </testcase>
    <testcase classname="chart formatters create should create a formatter of a custom type" name="chart formatters create should create a formatter of a custom type" time="0.001">
    </testcase>
    <testcase classname="chart formatters create should create a formatter of a specific subtype" name="chart formatters create should create a formatter of a specific subtype" time="0">
    </testcase>
    <testcase classname="chart formatters create should create a number subtype by default" name="chart formatters create should create a number subtype by default" time="0">
    </testcase>
    <testcase classname="chart formatters create should return formatter from field" name="chart formatters create should return formatter from field" time="0">
    </testcase>
  </testsuite>
  <testsuite name="extract data" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.296" tests="13">
    <testcase classname="extract data from config as array should normalize values" name="extract data from config as array should normalize values" time="0">
    </testcase>
    <testcase classname="extract data from items as array should normalize values" name="extract data from items as array should normalize values" time="0">
    </testcase>
    <testcase classname="extract data from items as array with custom accessors should normalize values" name="extract data from items as array with custom accessors should normalize values" time="0">
    </testcase>
    <testcase classname="extract data from dataset should normalize field values using default field accessors" name="extract data from dataset should normalize field values using default field accessors" time="0.001">
    </testcase>
    <testcase classname="extract data from dataset should return the source fields of the extracted data" name="extract data from dataset should return the source fields of the extracted data" time="0">
    </testcase>
    <testcase classname="extract data from dataset should return the source fields" name="extract data from dataset should return the source fields" time="0">
    </testcase>
    <testcase classname="extract data from dataset should return the source fields from multiple sources" name="extract data from dataset should return the source fields from multiple sources" time="0">
    </testcase>
    <testcase classname="extract data from dataset should extract from multiple data sources" name="extract data from dataset should extract from multiple data sources" time="0.001">
    </testcase>
    <testcase classname="extract data from dataset should normalize field values using custom accessors" name="extract data from dataset should normalize field values using custom accessors" time="0">
    </testcase>
    <testcase classname="extract data from dataset should amend extracted data with custom items" name="extract data from dataset should amend extracted data with custom items" time="0">
    </testcase>
    <testcase classname="extract data from collection should return a collection" name="extract data from collection should return a collection" time="0">
    </testcase>
    <testcase classname="extract data with sort config should sort values" name="extract data with sort config should sort values" time="0">
    </testcase>
    <testcase classname="extract data with filter config should sort values" name="extract data with filter config should sort values" time="0">
    </testcase>
  </testsuite>
  <testsuite name="dataset" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.296" tests="21">
    <testcase classname="dataset api #key" name="dataset api #key" time="0.001">
    </testcase>
    <testcase classname="dataset api #raw" name="dataset api #raw" time="0">
    </testcase>
    <testcase classname="dataset api #field" name="dataset api #field" time="0">
    </testcase>
    <testcase classname="dataset api #fields" name="dataset api #fields" time="0">
    </testcase>
    <testcase classname="dataset api #extract" name="dataset api #extract" time="0">
    </testcase>
    <testcase classname="dataset api #hierarchy" name="dataset api #hierarchy" time="0">
    </testcase>
    <testcase classname="dataset object array should find product field" name="dataset object array should find product field" time="0">
    </testcase>
    <testcase classname="dataset object array should find sales field" name="dataset object array should find sales field" time="0">
    </testcase>
    <testcase classname="dataset object array with config should find product field" name="dataset object array with config should find product field" time="0">
    </testcase>
    <testcase classname="dataset object array with config should find sales field" name="dataset object array with config should find sales field" time="0.001">
    </testcase>
    <testcase classname="dataset object array with config should find extra field" name="dataset object array with config should find extra field" time="0">
    </testcase>
    <testcase classname="dataset 2d matrix should find the second field" name="dataset 2d matrix should find the second field" time="0">
    </testcase>
    <testcase classname="dataset 2d matrix with config should find the second field" name="dataset 2d matrix with config should find the second field" time="0">
    </testcase>
    <testcase classname="dataset 2d matrix with config should add a third field" name="dataset 2d matrix with config should add a third field" time="0">
    </testcase>
    <testcase classname="dataset 2d matrix without headers should find the second field" name="dataset 2d matrix without headers should find the second field" time="0">
    </testcase>
    <testcase classname="dataset dsv with explicit delimiter should find product field" name="dataset dsv with explicit delimiter should find product field" time="0">
    </testcase>
    <testcase classname="dataset dsv with explicit delimiter should find sales field" name="dataset dsv with explicit delimiter should find sales field" time="0">
    </testcase>
    <testcase classname="dataset dsv with guessed delimiter comma (,)" name="dataset dsv with guessed delimiter comma (,)" time="0">
    </testcase>
    <testcase classname="dataset dsv with guessed delimiter semicolon (;)" name="dataset dsv with guessed delimiter semicolon (;)" time="0">
    </testcase>
    <testcase classname="dataset dsv with guessed delimiter tab (\t)" name="dataset dsv with guessed delimiter tab (\t)" time="0">
    </testcase>
    <testcase classname="dataset dsv with guessed delimiter ; with header only" name="dataset dsv with guessed delimiter ; with header only" time="0">
    </testcase>
  </testsuite>
  <testsuite name="qTime - Tick generator" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.399" tests="8">
    <testcase classname="qTime - Tick generator transformTicks should transform qAxisticks to picasso format" name="qTime - Tick generator transformTicks should transform qAxisticks to picasso format" time="0.001">
    </testcase>
    <testcase classname="qTime - Tick generator transformTicks should position at start given anchor is set to start" name="qTime - Tick generator transformTicks should position at start given anchor is set to start" time="0">
    </testcase>
    <testcase classname="qTime - Tick generator transformTicks should position at end given anchor is set to end" name="qTime - Tick generator transformTicks should position at end given anchor is set to end" time="0">
    </testcase>
    <testcase classname="qTime - Tick generator createTicks should format with hh:mm:ss given any date tick seconds value &gt; 0" name="qTime - Tick generator createTicks should format with hh:mm:ss given any date tick seconds value &gt; 0" time="0.001">
    </testcase>
    <testcase classname="qTime - Tick generator createTicks should format with hh:mm given all date ticks have seconds value of 0" name="qTime - Tick generator createTicks should format with hh:mm given all date ticks have seconds value of 0" time="0.001">
    </testcase>
    <testcase classname="qTime - Tick generator createTicks should generate ticks even when no distance argument is passed" name="qTime - Tick generator createTicks should generate ticks even when no distance argument is passed" time="0">
    </testcase>
    <testcase classname="qTime - Tick generator createTicks should generate appropriate amount of ticks based on distance" name="qTime - Tick generator createTicks should generate appropriate amount of ticks based on distance" time="0.001">
    </testcase>
    <testcase classname="qTime - Tick generator createTicks should output ticks in picasso format" name="qTime - Tick generator createTicks should output ticks in picasso format" time="0">
    </testcase>
  </testsuite>
  <testsuite name="GradientItem" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.232" tests="9">
    <testcase classname="GradientItem Constructor should instantiate a new GradientItem" name="GradientItem Constructor should instantiate a new GradientItem" time="0">
    </testcase>
    <testcase classname="GradientItem Constructor should not have a collider by default" name="GradientItem Constructor should not have a collider by default" time="0">
    </testcase>
    <testcase classname="GradientItem Constructor should accept arguments" name="GradientItem Constructor should accept arguments" time="0.001">
    </testcase>
    <testcase classname="GradientItem Set should handle no arguments" name="GradientItem Set should handle no arguments" time="0">
    </testcase>
    <testcase classname="GradientItem Set should set correct values" name="GradientItem Set should set correct values" time="0">
    </testcase>
    <testcase classname="GradientItem Children should append properly" name="GradientItem Children should append properly" time="0">
    </testcase>
    <testcase classname="GradientItem Children should append multiple properly" name="GradientItem Children should append multiple properly" time="0">
    </testcase>
    <testcase classname="GradientItem Children should remove properly" name="GradientItem Children should remove properly" time="0">
    </testcase>
    <testcase classname="GradientItem Children should remove multiple properly" name="GradientItem Children should remove multiple properly" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Text" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.269" tests="23">
    <testcase classname="Text Constructor should instantiate a new Text" name="Text Constructor should instantiate a new Text" time="0.001">
    </testcase>
    <testcase classname="Text Constructor should accept arguments" name="Text Constructor should accept arguments" time="0">
    </testcase>
    <testcase classname="Text Constructor should instantiate collider given data and explicit bounds" name="Text Constructor should instantiate collider given data and explicit bounds" time="0">
    </testcase>
    <testcase classname="Text Constructor should instantiate collider given data and bounds function" name="Text Constructor should instantiate collider given data and bounds function" time="0">
    </testcase>
    <testcase classname="Text BoundingRect should handle default values" name="Text BoundingRect should handle default values" time="0">
    </testcase>
    <testcase classname="Text BoundingRect should use textBounds function if supplied" name="Text BoundingRect should use textBounds function if supplied" time="0">
    </testcase>
    <testcase classname="Text BoundingRect should cache result from textBounds function" name="Text BoundingRect should cache result from textBounds function" time="0.001">
    </testcase>
    <testcase classname="Text BoundingRect should use boundingRect attribute if supplied" name="Text BoundingRect should use boundingRect attribute if supplied" time="0">
    </testcase>
    <testcase classname="Text BoundingRect should return correct value with a scale transforma" name="Text BoundingRect should return correct value with a scale transforma" time="0">
    </testcase>
    <testcase classname="Text BoundingRect should return correct value with a translate transform" name="Text BoundingRect should return correct value with a translate transform" time="0">
    </testcase>
    <testcase classname="Text BoundingRect should return correct value with a rotate transformation" name="Text BoundingRect should return correct value with a rotate transformation" time="0.001">
    </testcase>
    <testcase classname="Text BoundingRect should return correct value with a negative vector direction" name="Text BoundingRect should return correct value with a negative vector direction" time="0">
    </testcase>
    <testcase classname="Text Bounds should handle default values" name="Text Bounds should handle default values" time="0">
    </testcase>
    <testcase classname="Text Bounds should use textBounds function if supplied" name="Text Bounds should use textBounds function if supplied" time="0">
    </testcase>
    <testcase classname="Text Bounds should use boundingRect attribute if supplied" name="Text Bounds should use boundingRect attribute if supplied" time="0">
    </testcase>
    <testcase classname="Text Bounds should return correct value with a scale transform" name="Text Bounds should return correct value with a scale transform" time="0">
    </testcase>
    <testcase classname="Text Bounds should return correct value with a translate transform" name="Text Bounds should return correct value with a translate transform" time="0.001">
    </testcase>
    <testcase classname="Text Bounds should return correct value with a rotate transformation" name="Text Bounds should return correct value with a rotate transformation" time="0">
    </testcase>
    <testcase classname="Text containsPoint should include transformation when resolving point" name="Text containsPoint should include transformation when resolving point" time="0">
    </testcase>
    <testcase classname="Text intersectsLine should include transformation when resolving line" name="Text intersectsLine should include transformation when resolving line" time="0">
    </testcase>
    <testcase classname="Text intersectsRect should include transformation when resolving rect" name="Text intersectsRect should include transformation when resolving rect" time="0">
    </testcase>
    <testcase classname="Text intersectsCircle should include transformation when resolving rect" name="Text intersectsCircle should include transformation when resolving rect" time="0.001">
    </testcase>
    <testcase classname="Text intersectsPolygon should include transformation when resolving rect" name="Text intersectsPolygon should include transformation when resolving rect" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Circle" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.23" tests="25">
    <testcase classname="Circle Constructor should instantiate a new Circle" name="Circle Constructor should instantiate a new Circle" time="0">
    </testcase>
    <testcase classname="Circle Constructor should accept arguments" name="Circle Constructor should accept arguments" time="0.001">
    </testcase>
    <testcase classname="Circle Set should set correct values" name="Circle Set should set correct values" time="0">
    </testcase>
    <testcase classname="Circle Set should default to zero cx" name="Circle Set should default to zero cx" time="0">
    </testcase>
    <testcase classname="Circle Set should default to zero cy" name="Circle Set should default to zero cy" time="0">
    </testcase>
    <testcase classname="Circle Set should default to zero radius" name="Circle Set should default to zero radius" time="0">
    </testcase>
    <testcase classname="Circle Set should handle no arguments" name="Circle Set should handle no arguments" time="0">
    </testcase>
    <testcase classname="Circle Set should be able to disable the default collider" name="Circle Set should be able to disable the default collider" time="0">
    </testcase>
    <testcase classname="Circle BoundingRect should handle default values" name="Circle BoundingRect should handle default values" time="0">
    </testcase>
    <testcase classname="Circle BoundingRect should return correct value for a circle without transformation" name="Circle BoundingRect should return correct value for a circle without transformation" time="0">
    </testcase>
    <testcase classname="Circle BoundingRect should return correct value for a circle with a scale transformation" name="Circle BoundingRect should return correct value for a circle with a scale transformation" time="0.001">
    </testcase>
    <testcase classname="Circle BoundingRect should return correct value for a circle with a translate transformation" name="Circle BoundingRect should return correct value for a circle with a translate transformation" time="0">
    </testcase>
    <testcase classname="Circle BoundingRect should return correct value for a circle with a rotate transformation" name="Circle BoundingRect should return correct value for a circle with a rotate transformation" time="0">
    </testcase>
    <testcase classname="Circle BoundingRect should return correct value for a circle with a negative vector direction" name="Circle BoundingRect should return correct value for a circle with a negative vector direction" time="0">
    </testcase>
    <testcase classname="Circle Bounds should handle default values" name="Circle Bounds should handle default values" time="0">
    </testcase>
    <testcase classname="Circle Bounds should return correct value for a circle without transformation" name="Circle Bounds should return correct value for a circle without transformation" time="0">
    </testcase>
    <testcase classname="Circle Bounds should return correct value for a circle with a scale transformation" name="Circle Bounds should return correct value for a circle with a scale transformation" time="0">
    </testcase>
    <testcase classname="Circle Bounds should return correct value for a circle with a translate transformation" name="Circle Bounds should return correct value for a circle with a translate transformation" time="0.001">
    </testcase>
    <testcase classname="Circle Bounds should return correct value for a circle with a rotate transformation" name="Circle Bounds should return correct value for a circle with a rotate transformation" time="0">
    </testcase>
    <testcase classname="Circle Bounds should return correct value for a circle with a negative vector direction" name="Circle Bounds should return correct value for a circle with a negative vector direction" time="0">
    </testcase>
    <testcase classname="Circle containsPoint should include transformation when resolving point" name="Circle containsPoint should include transformation when resolving point" time="0">
    </testcase>
    <testcase classname="Circle intersectsLine should include transformation when resolving line" name="Circle intersectsLine should include transformation when resolving line" time="0">
    </testcase>
    <testcase classname="Circle intersectsRect should include transformation when resolving rect" name="Circle intersectsRect should include transformation when resolving rect" time="0">
    </testcase>
    <testcase classname="Circle intersectsCircle should include transformation when resolving circle" name="Circle intersectsCircle should include transformation when resolving circle" time="0">
    </testcase>
    <testcase classname="Circle intersectsPolygon should include transformation when resolving polygon" name="Circle intersectsPolygon should include transformation when resolving polygon" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="d3 timeFormat" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.27" tests="4">
    <testcase classname="d3 timeFormat should format dates correctly according to constructor pattern" name="d3 timeFormat should format dates correctly according to constructor pattern" time="0">
    </testcase>
    <testcase classname="d3 timeFormat should format dates correctly when using custom format" name="d3 timeFormat should format dates correctly when using custom format" time="0.001">
    </testcase>
    <testcase classname="d3 timeFormat should format dates correctly with a custom locale" name="d3 timeFormat should format dates correctly with a custom locale" time="0">
    </testcase>
    <testcase classname="d3 timeFormat should parse dates correctly" name="d3 timeFormat should parse dates correctly" time="0">
    </testcase>
  </testsuite>
  <testsuite name="dom renderer" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.259" tests="13">
    <testcase classname="dom renderer should be a function" name="dom renderer should be a function" time="0">
    </testcase>
    <testcase classname="dom renderer should set rendererSettings correctly" name="dom renderer should set rendererSettings correctly" time="0">
    </testcase>
    <testcase classname="dom renderer appendTo should append root node to element" name="dom renderer appendTo should append root node to element" time="0">
    </testcase>
    <testcase classname="dom renderer appendTo should not create new root if it already exists" name="dom renderer appendTo should not create new root if it already exists" time="0">
    </testcase>
    <testcase classname="dom renderer appendTo should apply font smoothing" name="dom renderer appendTo should apply font smoothing" time="0">
    </testcase>
    <testcase classname="dom renderer render should not render before appending" name="dom renderer render should not render before appending" time="0">
    </testcase>
    <testcase classname="dom renderer render should apply transform if provided" name="dom renderer render should apply transform if provided" time="0">
    </testcase>
    <testcase classname="dom renderer clear should remove all elements" name="dom renderer clear should remove all elements" time="0.001">
    </testcase>
    <testcase classname="dom renderer destroy should detach root from its parent" name="dom renderer destroy should detach root from its parent" time="0">
    </testcase>
    <testcase classname="dom renderer destroy should not throw error if root does not exist" name="dom renderer destroy should not throw error if root does not exist" time="0">
    </testcase>
    <testcase classname="dom renderer size should return current size if no parameters are given" name="dom renderer size should return current size if no parameters are given" time="0.001">
    </testcase>
    <testcase classname="dom renderer size should ignore NaN values and fallback to default size value" name="dom renderer size should ignore NaN values and fallback to default size value" time="0">
    </testcase>
    <testcase classname="dom renderer setKey should set key attribute" name="dom renderer setKey should set key attribute" time="0">
    </testcase>
  </testsuite>
  <testsuite name="data collections" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.296" tests="6">
    <testcase classname="data collections create should throw when no key is provided" name="data collections create should throw when no key is provided" time="0.001">
    </testcase>
    <testcase classname="data collections create should throw when &quot;collection&quot; property is provided" name="data collections create should throw when &quot;collection&quot; property is provided" time="0">
    </testcase>
    <testcase classname="data collections create should not call extractor on initiation" name="data collections create should not call extractor on initiation" time="0">
    </testcase>
    <testcase classname="data collections get should return a function" name="data collections get should return a function" time="0">
    </testcase>
    <testcase classname="data collections get should fetch the correct collection" name="data collections get should fetch the correct collection" time="0.001">
    </testcase>
    <testcase classname="data collections get should extract only once" name="data collections get should extract only once" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Axis Label Node" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.258" tests="5">
    <testcase classname="Axis Label Node Label Style align start on left side of tick" name="Axis Label Node Label Style align start on left side of tick" time="0.001">
    </testcase>
    <testcase classname="Axis Label Node Label Style align start on left side of tick" name="Axis Label Node Label Style align start on left side of tick" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Style align start on right side of tick" name="Axis Label Node Label Style align start on right side of tick" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Style align the label should be centered on the tick" name="Axis Label Node Label Style align the label should be centered on the tick" time="0.011">
    </testcase>
    <testcase classname="Axis Label Node Label Not text in tick label tick.label is undefined" name="Axis Label Node Label Not text in tick label tick.label is undefined" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Field" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.287" tests="12">
    <testcase classname="Field defaults should return id" name="Field defaults should return id" time="0">
    </testcase>
    <testcase classname="Field defaults should return min value" name="Field defaults should return min value" time="0">
    </testcase>
    <testcase classname="Field defaults should return max value" name="Field defaults should return max value" time="0">
    </testcase>
    <testcase classname="Field defaults should return tags" name="Field defaults should return tags" time="0">
    </testcase>
    <testcase classname="Field defaults should return title" name="Field defaults should return title" time="0">
    </testcase>
    <testcase classname="Field defaults should return values" name="Field defaults should return values" time="0">
    </testcase>
    <testcase classname="Field defaults should return raw data" name="Field defaults should return raw data" time="0">
    </testcase>
    <testcase classname="Field custom accessors should return min value" name="Field custom accessors should return min value" time="0">
    </testcase>
    <testcase classname="Field custom accessors should return max value" name="Field custom accessors should return max value" time="0">
    </testcase>
    <testcase classname="Field custom accessors should return tags" name="Field custom accessors should return tags" time="0">
    </testcase>
    <testcase classname="Field custom accessors should return title" name="Field custom accessors should return title" time="0">
    </testcase>
    <testcase classname="Field custom accessors should return values" name="Field custom accessors should return values" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Rect" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.28" tests="22">
    <testcase classname="Rect Constructor should instantiate a new Rect" name="Rect Constructor should instantiate a new Rect" time="0.001">
    </testcase>
    <testcase classname="Rect Constructor should accept arguments" name="Rect Constructor should accept arguments" time="0">
    </testcase>
    <testcase classname="Rect Set should set correct values" name="Rect Set should set correct values" time="0">
    </testcase>
    <testcase classname="Rect Set should handle no arguments" name="Rect Set should handle no arguments" time="0">
    </testcase>
    <testcase classname="Rect Set should be able to disable the default collider" name="Rect Set should be able to disable the default collider" time="0.001">
    </testcase>
    <testcase classname="Rect BoundingRect should handle default values" name="Rect BoundingRect should handle default values" time="0">
    </testcase>
    <testcase classname="Rect BoundingRect should return correct value without transformation" name="Rect BoundingRect should return correct value without transformation" time="0">
    </testcase>
    <testcase classname="Rect BoundingRect should return correct value with a scale transformation" name="Rect BoundingRect should return correct value with a scale transformation" time="0">
    </testcase>
    <testcase classname="Rect BoundingRect should return correct value with a translate transformation" name="Rect BoundingRect should return correct value with a translate transformation" time="0.001">
    </testcase>
    <testcase classname="Rect BoundingRect should return correct value with a rotate transformation" name="Rect BoundingRect should return correct value with a rotate transformation" time="0">
    </testcase>
    <testcase classname="Rect BoundingRect should return correct value with a negative vector direction" name="Rect BoundingRect should return correct value with a negative vector direction" time="0">
    </testcase>
    <testcase classname="Rect Bounds should handle default values" name="Rect Bounds should handle default values" time="0">
    </testcase>
    <testcase classname="Rect Bounds should return correct value without transformation" name="Rect Bounds should return correct value without transformation" time="0">
    </testcase>
    <testcase classname="Rect Bounds should return correct value with a scale transformation" name="Rect Bounds should return correct value with a scale transformation" time="0">
    </testcase>
    <testcase classname="Rect Bounds should return correct value with a translate transformation" name="Rect Bounds should return correct value with a translate transformation" time="0.001">
    </testcase>
    <testcase classname="Rect Bounds should return correct value with a rotate transformation" name="Rect Bounds should return correct value with a rotate transformation" time="0">
    </testcase>
    <testcase classname="Rect Bounds should return correct value with a negative vector direction" name="Rect Bounds should return correct value with a negative vector direction" time="0">
    </testcase>
    <testcase classname="Rect containsPoint should include transformation when resolving point" name="Rect containsPoint should include transformation when resolving point" time="0">
    </testcase>
    <testcase classname="Rect intersectsLine should include transformation when resolving line" name="Rect intersectsLine should include transformation when resolving line" time="0">
    </testcase>
    <testcase classname="Rect intersectsRect should include transformation when resolving rect" name="Rect intersectsRect should include transformation when resolving rect" time="0">
    </testcase>
    <testcase classname="Rect intersectsCircle should include transformation when resolving rect" name="Rect intersectsCircle should include transformation when resolving rect" time="0.001">
    </testcase>
    <testcase classname="Rect intersectsPolygon should include transformation when resolving rect" name="Rect intersectsPolygon should include transformation when resolving rect" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Symbols" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.241" tests="25">
    <testcase classname="Symbols Register should accept new symbols to be registered" name="Symbols Register should accept new symbols to be registered" time="0">
    </testcase>
    <testcase classname="Symbols Register should allow new symbols to have custom colliders" name="Symbols Register should allow new symbols to have custom colliders" time="0">
    </testcase>
    <testcase classname="Symbols Circle should output a circle" name="Symbols Circle should output a circle" time="0">
    </testcase>
    <testcase classname="Symbols Bar should output a bar" name="Symbols Bar should output a bar" time="0.001">
    </testcase>
    <testcase classname="Symbols Bar Options direction - vertical" name="Symbols Bar Options direction - vertical" time="0">
    </testcase>
    <testcase classname="Symbols Cross should output a cross" name="Symbols Cross should output a cross" time="0">
    </testcase>
    <testcase classname="Symbols Cross Options width" name="Symbols Cross Options width" time="0">
    </testcase>
    <testcase classname="Symbols Diamond should output a diamond" name="Symbols Diamond should output a diamond" time="0">
    </testcase>
    <testcase classname="Symbols Line should output a horizontal line" name="Symbols Line should output a horizontal line" time="0">
    </testcase>
    <testcase classname="Symbols Line Options direction - vertical" name="Symbols Line Options direction - vertical" time="0">
    </testcase>
    <testcase classname="Symbols n-polygon should output a n-polygon" name="Symbols n-polygon should output a n-polygon" time="0">
    </testcase>
    <testcase classname="Symbols n-polygon Options sides" name="Symbols n-polygon Options sides" time="0.001">
    </testcase>
    <testcase classname="Symbols n-polygon Options startAngle" name="Symbols n-polygon Options startAngle" time="0">
    </testcase>
    <testcase classname="Symbols Saltire should output a saltire" name="Symbols Saltire should output a saltire" time="0">
    </testcase>
    <testcase classname="Symbols Saltire Options width" name="Symbols Saltire Options width" time="0">
    </testcase>
    <testcase classname="Symbols Square should output a square" name="Symbols Square should output a square" time="0">
    </testcase>
    <testcase classname="Symbols Star should output a star" name="Symbols Star should output a star" time="0">
    </testcase>
    <testcase classname="Symbols Star Options points" name="Symbols Star Options points" time="0">
    </testcase>
    <testcase classname="Symbols Star Options startAngle" name="Symbols Star Options startAngle" time="0">
    </testcase>
    <testcase classname="Symbols Star Options innerRadius" name="Symbols Star Options innerRadius" time="0.001">
    </testcase>
    <testcase classname="Symbols Triangle should output a triangle" name="Symbols Triangle should output a triangle" time="0">
    </testcase>
    <testcase classname="Symbols Triangle Options direction - up" name="Symbols Triangle Options direction - up" time="0">
    </testcase>
    <testcase classname="Symbols Triangle Options direction - down" name="Symbols Triangle Options direction - down" time="0">
    </testcase>
    <testcase classname="Symbols Triangle Options direction - left" name="Symbols Triangle Options direction - left" time="0">
    </testcase>
    <testcase classname="Symbols Triangle Options direction - right" name="Symbols Triangle Options direction - right" time="0">
    </testcase>
  </testsuite>
  <testsuite name="svg-nodes" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.26" tests="28">
    <testcase classname="svg-nodes should have the correct svg namespace" name="svg-nodes should have the correct svg namespace" time="0">
    </testcase>
    <testcase classname="svg-nodes creator should throw error when type is invalid" name="svg-nodes creator should throw error when type is invalid" time="0.001">
    </testcase>
    <testcase classname="svg-nodes creator should create an element and append it to the parent" name="svg-nodes creator should create an element and append it to the parent" time="0">
    </testcase>
    <testcase classname="svg-nodes creator should return the created element" name="svg-nodes creator should return the created element" time="0.001">
    </testcase>
    <testcase classname="svg-nodes creator should create a group element for type container" name="svg-nodes creator should create a group element for type container" time="0">
    </testcase>
    <testcase classname="svg-nodes destroyer should remove node from parent" name="svg-nodes destroyer should remove node from parent" time="0">
    </testcase>
    <testcase classname="svg-nodes destroyer should not throw error if parentNode is falsy" name="svg-nodes destroyer should not throw error if parentNode is falsy" time="0">
    </testcase>
    <testcase classname="svg-nodes maintainer should apply given attributes" name="svg-nodes maintainer should apply given attributes" time="0">
    </testcase>
    <testcase classname="svg-nodes maintainer should always append whites-space attribute to text nodes" name="svg-nodes maintainer should always append whites-space attribute to text nodes" time="0">
    </testcase>
    <testcase classname="svg-nodes maintainer should ignore attributes id, type, children, and complex data objects" name="svg-nodes maintainer should ignore attributes id, type, children, and complex data objects" time="0">
    </testcase>
    <testcase classname="svg-nodes maintainer should set data attribute if data value is a primitive" name="svg-nodes maintainer should set data attribute if data value is a primitive" time="0">
    </testcase>
    <testcase classname="svg-nodes maintainer should set data attributes if data object contains primitives" name="svg-nodes maintainer should set data attributes if data object contains primitives" time="0.001">
    </testcase>
    <testcase classname="svg-nodes maintainer should always append dy attribute on text item" name="svg-nodes maintainer should always append dy attribute on text item" time="0">
    </testcase>
    <testcase classname="svg-nodes maintainer should transform dominant-baseline into dy attribute on text item" name="svg-nodes maintainer should transform dominant-baseline into dy attribute on text item" time="0">
    </testcase>
    <testcase classname="svg-nodes maintainer should append a title element on text item with the title attribute" name="svg-nodes maintainer should append a title element on text item with the title attribute" time="0">
    </testcase>
    <testcase classname="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes circle - cx" name="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes circle - cx" time="0">
    </testcase>
    <testcase classname="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes circle - cy" name="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes circle - cy" time="0">
    </testcase>
    <testcase classname="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes circle - r" name="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes circle - r" time="0">
    </testcase>
    <testcase classname="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes rect - x" name="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes rect - x" time="0">
    </testcase>
    <testcase classname="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes rect - y" name="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes rect - y" time="0">
    </testcase>
    <testcase classname="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes rect - width" name="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes rect - width" time="0">
    </testcase>
    <testcase classname="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes rect - height" name="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes rect - height" time="0">
    </testcase>
    <testcase classname="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes line - x1" name="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes line - x1" time="0">
    </testcase>
    <testcase classname="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes line - y1" name="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes line - y1" time="0">
    </testcase>
    <testcase classname="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes line - x2" name="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes line - x2" time="0">
    </testcase>
    <testcase classname="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes line - y2" name="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes line - y2" time="0">
    </testcase>
    <testcase classname="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes text - x" name="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes text - x" time="0">
    </testcase>
    <testcase classname="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes text - y" name="svg-nodes maintainer should ignore item with &quot;NaN&quot; attributes text - y" time="0">
    </testcase>
  </testsuite>
  <testsuite name="labeling - bars" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.244" tests="44">
    <testcase classname="labeling - bars bar rects inside" name="labeling - bars bar rects inside" time="0">
    </testcase>
    <testcase classname="labeling - bars bar rects outside-up/opposite-down" name="labeling - bars bar rects outside-up/opposite-down" time="0">
    </testcase>
    <testcase classname="labeling - bars bar rects outside-down/opposite-up" name="labeling - bars bar rects outside-down/opposite-up" time="0">
    </testcase>
    <testcase classname="labeling - bars bar rects outside-right/opposite-left" name="labeling - bars bar rects outside-right/opposite-left" time="0">
    </testcase>
    <testcase classname="labeling - bars bar rects outside-left/opposite-right" name="labeling - bars bar rects outside-left/opposite-right" time="0.001">
    </testcase>
    <testcase classname="labeling - bars is text in rect when rotate = false should return false if rect width &lt; text width" name="labeling - bars is text in rect when rotate = false should return false if rect width &lt; text width" time="0">
    </testcase>
    <testcase classname="labeling - bars is text in rect when rotate = false should return false if rect height &lt; text height" name="labeling - bars is text in rect when rotate = false should return false if rect height &lt; text height" time="0">
    </testcase>
    <testcase classname="labeling - bars is text in rect when rotate = false should return true if rect width &gt;= text width, and rect height &gt;= text height" name="labeling - bars is text in rect when rotate = false should return true if rect width &gt;= text width, and rect height &gt;= text height" time="0">
    </testcase>
    <testcase classname="labeling - bars is text in rect when rotate = true should return false if rect height &lt; text width" name="labeling - bars is text in rect when rotate = true should return false if rect height &lt; text width" time="0">
    </testcase>
    <testcase classname="labeling - bars is text in rect when rotate = true should return false if rect width &lt; text height" name="labeling - bars is text in rect when rotate = true should return false if rect width &lt; text height" time="0">
    </testcase>
    <testcase classname="labeling - bars is text in rect when rotate = true should return true if rect height &gt;= text width, and rect width &gt;= text height" name="labeling - bars is text in rect when rotate = true should return true if rect height &gt;= text width, and rect width &gt;= text height" time="0">
    </testcase>
    <testcase classname="labeling - bars placeSegmentInSegment should return correct position when align = 0 and minorSegmentSize &lt; majorSegmentSize" name="labeling - bars placeSegmentInSegment should return correct position when align = 0 and minorSegmentSize &lt; majorSegmentSize" time="0">
    </testcase>
    <testcase classname="labeling - bars placeSegmentInSegment should return correct position when align = 0 and minorSegmentSize &gt; majorSegmentSize" name="labeling - bars placeSegmentInSegment should return correct position when align = 0 and minorSegmentSize &gt; majorSegmentSize" time="0">
    </testcase>
    <testcase classname="labeling - bars placeSegmentInSegment should return correct position when align = 1 and minorSegmentSize &lt; majorSegmentSize" name="labeling - bars placeSegmentInSegment should return correct position when align = 1 and minorSegmentSize &lt; majorSegmentSize" time="0">
    </testcase>
    <testcase classname="labeling - bars placeSegmentInSegment should return correct position when align = 1 and minorSegmentSize &gt; majorSegmentSize" name="labeling - bars placeSegmentInSegment should return correct position when align = 1 and minorSegmentSize &gt; majorSegmentSize" time="0">
    </testcase>
    <testcase classname="labeling - bars placeSegmentInSegment should return correct position when align = 0.5 and minorSegmentSize &lt; majorSegmentSize" name="labeling - bars placeSegmentInSegment should return correct position when align = 0.5 and minorSegmentSize &lt; majorSegmentSize" time="0">
    </testcase>
    <testcase classname="labeling - bars placeSegmentInSegment should return correct position when align = 0.5 and minorSegmentSize &gt; majorSegmentSize" name="labeling - bars placeSegmentInSegment should return correct position when align = 0.5 and minorSegmentSize &gt; majorSegmentSize" time="0">
    </testcase>
    <testcase classname="labeling - bars place text in rect should wiggle a bit" name="labeling - bars place text in rect should wiggle a bit" time="0">
    </testcase>
    <testcase classname="labeling - bars place text in rect should justify a bit" name="labeling - bars place text in rect should justify a bit" time="0">
    </testcase>
    <testcase classname="labeling - bars place text in rect should rotate the label" name="labeling - bars place text in rect should rotate the label" time="0">
    </testcase>
    <testcase classname="labeling - bars findBestPlacement should find first placement that fits in a vertical bar" name="labeling - bars findBestPlacement should find first placement that fits in a vertical bar" time="0.001">
    </testcase>
    <testcase classname="labeling - bars findBestPlacement should find first placement that fits in a vertical bar, horizontally" name="labeling - bars findBestPlacement should find first placement that fits in a vertical bar, horizontally" time="0">
    </testcase>
    <testcase classname="labeling - bars findBestPlacement should find first placement that fits in a horizontal bar" name="labeling - bars findBestPlacement should find first placement that fits in a horizontal bar" time="0">
    </testcase>
    <testcase classname="labeling - bars findBestPlacement should find largest rect as fallback, horizontal" name="labeling - bars findBestPlacement should find largest rect as fallback, horizontal" time="0">
    </testcase>
    <testcase classname="labeling - bars findBestPlacement should find largest rect as fallback, horizontal, and when all rects have the same height" name="labeling - bars findBestPlacement should find largest rect as fallback, horizontal, and when all rects have the same height" time="0">
    </testcase>
    <testcase classname="labeling - bars findBestPlacement should find largest rect as fallback, vertical" name="labeling - bars findBestPlacement should find largest rect as fallback, vertical" time="0">
    </testcase>
    <testcase classname="labeling - bars findBestPlacement should find largest rect as fallback, vertical, and when all rects have the same width" name="labeling - bars findBestPlacement should find largest rect as fallback, vertical, and when all rects have the same width" time="0">
    </testcase>
    <testcase classname="labeling - bars findBestPlacement should find placement with overflow and other size is fit, horizontal" name="labeling - bars findBestPlacement should find placement with overflow and other size is fit, horizontal" time="0">
    </testcase>
    <testcase classname="labeling - bars findBestPlacement should find largest rect as fallback when overflow is true but both width and height are not fit , horizontal" name="labeling - bars findBestPlacement should find largest rect as fallback when overflow is true but both width and height are not fit , horizontal" time="0">
    </testcase>
    <testcase classname="labeling - bars findBestPlacement should find largest rect as fallback when overflow is true but both width and height are not fit, vertical" name="labeling - bars findBestPlacement should find largest rect as fallback when overflow is true but both width and height are not fit, vertical" time="0">
    </testcase>
    <testcase classname="labeling - bars findBestPlacement should find placement with overflow and other size is fit, vertical" name="labeling - bars findBestPlacement should find placement with overflow and other size is fit, vertical" time="0">
    </testcase>
    <testcase classname="labeling - bars placeInBars should skip label when text is falsy" name="labeling - bars placeInBars should skip label when text is falsy" time="0.001">
    </testcase>
    <testcase classname="labeling - bars placeInBars should skip label when placement is not possible" name="labeling - bars placeInBars should skip label when placement is not possible" time="0">
    </testcase>
    <testcase classname="labeling - bars placeInBars should return label" name="labeling - bars placeInBars should return label" time="0">
    </testcase>
    <testcase classname="labeling - bars placeInBars should return label with background" name="labeling - bars placeInBars should return label with background" time="0.001">
    </testcase>
    <testcase classname="labeling - bars placeInBars should call placer with certain arguments" name="labeling - bars placeInBars should call placer with certain arguments" time="0">
    </testcase>
    <testcase classname="labeling - bars bar strategy should return some labels" name="labeling - bars bar strategy should return some labels" time="0">
    </testcase>
    <testcase classname="labeling - bars bar strategy should link data" name="labeling - bars bar strategy should link data" time="0.001">
    </testcase>
    <testcase classname="labeling - bars bar strategy should skip node if outside container" name="labeling - bars bar strategy should skip node if outside container" time="0">
    </testcase>
    <testcase classname="labeling - bars bar strategy should skip node if label is falsy" name="labeling - bars bar strategy should skip node if label is falsy" time="0">
    </testcase>
    <testcase classname="labeling - bars bar strategy should accept padding top/bottom/left/right as functions" name="labeling - bars bar strategy should accept padding top/bottom/left/right as functions" time="0">
    </testcase>
    <testcase classname="labeling - bars orientation should support setting &quot;horizontal&quot;" name="labeling - bars orientation should support setting &quot;horizontal&quot;" time="0.002">
    </testcase>
    <testcase classname="labeling - bars orientation should support setting &quot;vertical&quot;" name="labeling - bars orientation should support setting &quot;vertical&quot;" time="0">
    </testcase>
    <testcase classname="labeling - bars orientation should fallback to default orientation for setting &quot;auto&quot;" name="labeling - bars orientation should fallback to default orientation for setting &quot;auto&quot;" time="0">
    </testcase>
  </testsuite>
  <testsuite name="component - label" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.251" tests="2">
    <testcase classname="component - label strategy should return empty when component is not found" name="component - label strategy should return empty when component is not found" time="0">
    </testcase>
    <testcase classname="component - label strategy should filter shapes based on selector" name="component - label strategy should filter shapes based on selector" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="brush" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.271" tests="88">
    <testcase classname="brush api should be a factory function" name="brush api should be a factory function" time="0">
    </testcase>
    <testcase classname="brush events should emit a start event with parameters when started" name="brush events should emit a start event with parameters when started" time="0.001">
    </testcase>
    <testcase classname="brush events should not emit a start event when alredy started" name="brush events should not emit a start event when alredy started" time="0">
    </testcase>
    <testcase classname="brush events should emit an end event with parameters when ended" name="brush events should emit an end event with parameters when ended" time="0">
    </testcase>
    <testcase classname="brush events should be active when started" name="brush events should be active when started" time="0">
    </testcase>
    <testcase classname="brush events should emit an &quot;update&quot; event when state changes" name="brush events should emit an &quot;update&quot; event when state changes" time="0.001">
    </testcase>
    <testcase classname="brush brushes should return all created brushes" name="brush brushes should return all created brushes" time="0">
    </testcase>
    <testcase classname="brush brushes should return empty after brush is ended" name="brush brushes should return empty after brush is ended" time="0.001">
    </testcase>
    <testcase classname="brush addValue should call value.add() with value &quot;Car&quot;" name="brush addValue should call value.add() with value &quot;Car&quot;" time="0">
    </testcase>
    <testcase classname="brush addValue should not create more than one instance per id" name="brush addValue should not create more than one instance per id" time="0">
    </testcase>
    <testcase classname="brush addValue should emit &quot;start&quot; event if not activated" name="brush addValue should emit &quot;start&quot; event if not activated" time="0.001">
    </testcase>
    <testcase classname="brush addValue should emit &quot;update&quot; event when state changes" name="brush addValue should emit &quot;update&quot; event when state changes" time="0">
    </testcase>
    <testcase classname="brush addValue should not emit &quot;update&quot; event when state does not change" name="brush addValue should not emit &quot;update&quot; event when state does not change" time="0">
    </testcase>
    <testcase classname="brush removeValue should call value.remove() with value &quot;Car&quot;" name="brush removeValue should call value.remove() with value &quot;Car&quot;" time="0.001">
    </testcase>
    <testcase classname="brush removeValue should emit &quot;update&quot; event when state changes" name="brush removeValue should emit &quot;update&quot; event when state changes" time="0">
    </testcase>
    <testcase classname="brush removeValue should not emit &quot;update&quot; event when state does not change" name="brush removeValue should not emit &quot;update&quot; event when state does not change" time="0">
    </testcase>
    <testcase classname="brush addRange should call range.add() with { min: 3 max: 7 }" name="brush addRange should call range.add() with { min: 3 max: 7 }" time="0.001">
    </testcase>
    <testcase classname="brush addRange should not create more than one instance per id" name="brush addRange should not create more than one instance per id" time="0">
    </testcase>
    <testcase classname="brush addRange should emit &quot;start&quot; event if not activated" name="brush addRange should emit &quot;start&quot; event if not activated" time="0">
    </testcase>
    <testcase classname="brush addRange should emit &quot;update&quot; event" name="brush addRange should emit &quot;update&quot; event" time="0.001">
    </testcase>
    <testcase classname="brush addRange should not emit &quot;update&quot; event when state does not change" name="brush addRange should not emit &quot;update&quot; event when state does not change" time="0">
    </testcase>
    <testcase classname="brush removeRange should call range.remove() with { min: 3 max: 7 }" name="brush removeRange should call range.remove() with { min: 3 max: 7 }" time="0.001">
    </testcase>
    <testcase classname="brush removeRange should not create more than one instance per id" name="brush removeRange should not create more than one instance per id" time="0">
    </testcase>
    <testcase classname="brush removeRange should emit &quot;start&quot; event if not activated" name="brush removeRange should emit &quot;start&quot; event if not activated" time="0">
    </testcase>
    <testcase classname="brush removeRange should emit &quot;update&quot; event" name="brush removeRange should emit &quot;update&quot; event" time="0">
    </testcase>
    <testcase classname="brush removeRange should not emit &quot;update&quot; event when state does not change" name="brush removeRange should not emit &quot;update&quot; event when state does not change" time="0.001">
    </testcase>
    <testcase classname="brush toggleRange should call range.toggle() with { min: 3 max: 7 }" name="brush toggleRange should call range.toggle() with { min: 3 max: 7 }" time="0">
    </testcase>
    <testcase classname="brush toggleRange should not create more than one instance per id" name="brush toggleRange should not create more than one instance per id" time="0.002">
    </testcase>
    <testcase classname="brush toggleRange should emit &quot;start&quot; event if not activated" name="brush toggleRange should emit &quot;start&quot; event if not activated" time="0.001">
    </testcase>
    <testcase classname="brush toggleRange should emit &quot;update&quot; event" name="brush toggleRange should emit &quot;update&quot; event" time="0">
    </testcase>
    <testcase classname="brush toggleRange should not emit &quot;update&quot; event when state does not change" name="brush toggleRange should not emit &quot;update&quot; event when state does not change" time="0">
    </testcase>
    <testcase classname="brush setRange should call range.set() with { min: 3 max: 7 }" name="brush setRange should call range.set() with { min: 3 max: 7 }" time="0.001">
    </testcase>
    <testcase classname="brush setRange should not create more than one instance per id" name="brush setRange should not create more than one instance per id" time="0">
    </testcase>
    <testcase classname="brush setRange should emit &quot;start&quot; event if not activated" name="brush setRange should emit &quot;start&quot; event if not activated" time="0">
    </testcase>
    <testcase classname="brush setRange should emit &quot;update&quot; event" name="brush setRange should emit &quot;update&quot; event" time="0">
    </testcase>
    <testcase classname="brush setRange should not emit &quot;update&quot; event when state does not change" name="brush setRange should not emit &quot;update&quot; event when state does not change" time="0.001">
    </testcase>
    <testcase classname="brush containsValue should return false when given id does not exist in the brush context" name="brush containsValue should return false when given id does not exist in the brush context" time="0">
    </testcase>
    <testcase classname="brush containsValue should return true when given value exists" name="brush containsValue should return true when given value exists" time="0">
    </testcase>
    <testcase classname="brush containsValue should return true when given value exists from an aliased key" name="brush containsValue should return true when given value exists from an aliased key" time="0">
    </testcase>
    <testcase classname="brush containsValue should return false when given value does not exist" name="brush containsValue should return false when given value does not exist" time="0.001">
    </testcase>
    <testcase classname="brush containsRangeValue should return false when given id does not exist in the brush context" name="brush containsRangeValue should return false when given id does not exist in the brush context" time="0">
    </testcase>
    <testcase classname="brush containsRangeValue should return true when given value exists" name="brush containsRangeValue should return true when given value exists" time="0">
    </testcase>
    <testcase classname="brush containsRangeValue should return true when given value exists for an aliased key" name="brush containsRangeValue should return true when given value exists for an aliased key" time="0">
    </testcase>
    <testcase classname="brush containsRangeValue should return false when given value does not exist" name="brush containsRangeValue should return false when given value does not exist" time="0.001">
    </testcase>
    <testcase classname="brush containsRange should return false when given id does not exist in the brush context" name="brush containsRange should return false when given id does not exist in the brush context" time="0">
    </testcase>
    <testcase classname="brush containsRange should return true when given value exists" name="brush containsRange should return true when given value exists" time="0">
    </testcase>
    <testcase classname="brush containsRange should return true when given value exists for an aliased key" name="brush containsRange should return true when given value exists for an aliased key" time="0">
    </testcase>
    <testcase classname="brush containsRange should return false when given value does not exist" name="brush containsRange should return false when given value does not exist" time="0.001">
    </testcase>
    <testcase classname="brush clear should not emit an &quot;update&quot; event when state has not changed" name="brush clear should not emit an &quot;update&quot; event when state has not changed" time="0">
    </testcase>
    <testcase classname="brush clear should emit an &quot;update&quot; event when state has changed" name="brush clear should emit an &quot;update&quot; event when state has changed" time="0">
    </testcase>
    <testcase classname="brush containsData should return true when data contains a brushed range" name="brush containsData should return true when data contains a brushed range" time="0.001">
    </testcase>
    <testcase classname="brush containsData should return true when data contains a brushed range value" name="brush containsData should return true when data contains a brushed range value" time="0">
    </testcase>
    <testcase classname="brush containsData should return false when data contains only a brushed range and mode=and" name="brush containsData should return false when data contains only a brushed range and mode=and" time="0">
    </testcase>
    <testcase classname="brush containsData should return true when data contains only a brushed range and mode=xor" name="brush containsData should return true when data contains only a brushed range and mode=xor" time="0.001">
    </testcase>
    <testcase classname="brush containsData should return true when data contains a brushed value" name="brush containsData should return true when data contains a brushed value" time="0">
    </testcase>
    <testcase classname="brush containsData should return true when data contains a brushed value from an aliased key" name="brush containsData should return true when data contains a brushed value from an aliased key" time="0.001">
    </testcase>
    <testcase classname="brush containsData should return true when data contains a brushed value from a data source with a key" name="brush containsData should return true when data contains a brushed value from a data source with a key" time="0">
    </testcase>
    <testcase classname="brush containsData should return false when data has no source" name="brush containsData should return false when data has no source" time="0">
    </testcase>
    <testcase classname="brush containsData should return false when brushed data is not part of property filter" name="brush containsData should return false when brushed data is not part of property filter" time="0.001">
    </testcase>
    <testcase classname="brush containsData should return false when brushed data is not part of property filter for mode=and" name="brush containsData should return false when brushed data is not part of property filter for mode=and" time="0">
    </testcase>
    <testcase classname="brush containsData should return false when brushed data is not part of property filter for mode=xor " name="brush containsData should return false when brushed data is not part of property filter for mode=xor " time="0.001">
    </testcase>
    <testcase classname="brush toggle should toggle duplicate values" name="brush toggle should toggle duplicate values" time="0">
    </testcase>
    <testcase classname="brush toggle should toggle on new values" name="brush toggle should toggle on new values" time="0">
    </testcase>
    <testcase classname="brush toggle should toggle off existing values" name="brush toggle should toggle off existing values" time="0.001">
    </testcase>
    <testcase classname="brush set should add the new values" name="brush set should add the new values" time="0">
    </testcase>
    <testcase classname="brush set should not add existing values" name="brush set should not add existing values" time="0.001">
    </testcase>
    <testcase classname="brush set should not remove existing values" name="brush set should not remove existing values" time="0">
    </testcase>
    <testcase classname="brush set should remove old values from same collection" name="brush set should remove old values from same collection" time="0">
    </testcase>
    <testcase classname="brush set should remove old values" name="brush set should remove old values" time="0">
    </testcase>
    <testcase classname="brush set should set duplicate values" name="brush set should set duplicate values" time="0">
    </testcase>
    <testcase classname="brush interceptors should intercept &quot;add-values&quot;" name="brush interceptors should intercept &quot;add-values&quot;" time="0">
    </testcase>
    <testcase classname="brush interceptors should be updated with the values returned from the interceptor" name="brush interceptors should be updated with the values returned from the interceptor" time="0">
    </testcase>
    <testcase classname="brush interceptors should remove the interceptor" name="brush interceptors should remove the interceptor" time="0">
    </testcase>
    <testcase classname="brush interceptors should remove all interceptors" name="brush interceptors should remove all interceptors" time="0">
    </testcase>
    <testcase classname="brush interceptors should remove all named interceptors" name="brush interceptors should remove all named interceptors" time="0.001">
    </testcase>
    <testcase classname="brush addAndRemoveValues should call value.remove() with value &quot;Car&quot;" name="brush addAndRemoveValues should call value.remove() with value &quot;Car&quot;" time="0">
    </testcase>
    <testcase classname="brush addAndRemoveValues should emit &quot;update&quot; event when state changes (by add)" name="brush addAndRemoveValues should emit &quot;update&quot; event when state changes (by add)" time="0">
    </testcase>
    <testcase classname="brush addAndRemoveValues should emit &quot;update&quot; event when state changes (by remove)" name="brush addAndRemoveValues should emit &quot;update&quot; event when state changes (by remove)" time="0">
    </testcase>
    <testcase classname="brush addAndRemoveValues should emit &quot;update&quot; event once when state changes by add and remove" name="brush addAndRemoveValues should emit &quot;update&quot; event once when state changes by add and remove" time="0">
    </testcase>
    <testcase classname="brush addAndRemoveValues should not emit &quot;update&quot; event when state does not change" name="brush addAndRemoveValues should not emit &quot;update&quot; event when state does not change" time="0.002">
    </testcase>
    <testcase classname="brush link should throw when linking to itself" name="brush link should throw when linking to itself" time="0.001">
    </testcase>
    <testcase classname="brush link target should maintain same state as source" name="brush link target should maintain same state as source" time="0.001">
    </testcase>
    <testcase classname="brush link should hook into same state" name="brush link should hook into same state" time="0">
    </testcase>
    <testcase classname="brush configure ranges should be able to configure sourced and default" name="brush configure ranges should be able to configure sourced and default" time="0">
    </testcase>
    <testcase classname="brush configure ranges should be able to configure only default values" name="brush configure ranges should be able to configure only default values" time="0">
    </testcase>
    <testcase classname="brush configure ranges should be able to configure only sourced values" name="brush configure ranges should be able to configure only sourced values" time="0.001">
    </testcase>
    <testcase classname="brush configure ranges should handle configure call without any parameter" name="brush configure ranges should handle configure call without any parameter" time="0">
    </testcase>
    <testcase classname="brush configure ranges should update ranges with new configuration" name="brush configure ranges should update ranges with new configuration" time="0">
    </testcase>
  </testsuite>
  <testsuite name="q-data-extractor-t" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.335" tests="21">
    <testcase classname="q-data-extractor-t without pseudo should return origin field depth for virtual field" name="q-data-extractor-t without pseudo should return origin field depth for virtual field" time="0">
    </testcase>
    <testcase classname="q-data-extractor-t without pseudo should return empty array when root node is missing or empty" name="q-data-extractor-t without pseudo should return empty array when root node is missing or empty" time="0">
    </testcase>
    <testcase classname="q-data-extractor-t without pseudo should return dim field values based on default field accessor" name="q-data-extractor-t without pseudo should return dim field values based on default field accessor" time="0.001">
    </testcase>
    <testcase classname="q-data-extractor-t without pseudo should return measure field values based on default field accessor" name="q-data-extractor-t without pseudo should return measure field values based on default field accessor" time="0">
    </testcase>
    <testcase classname="q-data-extractor-t without pseudo should return joined set when array of fields is used" name="q-data-extractor-t without pseudo should return joined set when array of fields is used" time="0.001">
    </testcase>
    <testcase classname="q-data-extractor-t without pseudo should return attr dim field values based on default field accessor" name="q-data-extractor-t without pseudo should return attr dim field values based on default field accessor" time="0">
    </testcase>
    <testcase classname="q-data-extractor-t without pseudo should return attr expr field values based on default field accessor" name="q-data-extractor-t without pseudo should return attr expr field values based on default field accessor" time="0">
    </testcase>
    <testcase classname="q-data-extractor-t without pseudo should return attr expr field values based on default field accessor again" name="q-data-extractor-t without pseudo should return attr expr field values based on default field accessor again" time="0.001">
    </testcase>
    <testcase classname="q-data-extractor-t without pseudo should return mapped properties from same field" name="q-data-extractor-t without pseudo should return mapped properties from same field" time="0">
    </testcase>
    <testcase classname="q-data-extractor-t without pseudo should return mapped properties to ancestor fields" name="q-data-extractor-t without pseudo should return mapped properties to ancestor fields" time="0.001">
    </testcase>
    <testcase classname="q-data-extractor-t without pseudo should return mapped properties to descendant fields" name="q-data-extractor-t without pseudo should return mapped properties to descendant fields" time="0">
    </testcase>
    <testcase classname="q-data-extractor-t without pseudo should return primitive nodes" name="q-data-extractor-t without pseudo should return primitive nodes" time="0.001">
    </testcase>
    <testcase classname="q-data-extractor-t without pseudo should support track by" name="q-data-extractor-t without pseudo should support track by" time="0.002">
    </testcase>
    <testcase classname="q-data-extractor-t without pseudo should support properties from multiple fields" name="q-data-extractor-t without pseudo should support properties from multiple fields" time="0.001">
    </testcase>
    <testcase classname="q-data-extractor-t without pseudo should support properties from multiple descendant fields" name="q-data-extractor-t without pseudo should support properties from multiple descendant fields" time="0">
    </testcase>
    <testcase classname="q-data-extractor-t without pseudo should filter main field" name="q-data-extractor-t without pseudo should filter main field" time="0.001">
    </testcase>
    <testcase classname="q-data-extractor-t without pseudo should be fine with nodes missing qAttrDims" name="q-data-extractor-t without pseudo should be fine with nodes missing qAttrDims" time="0">
    </testcase>
    <testcase classname="q-data-extractor-t without pseudo should be fine with nodes missing qAttrExps" name="q-data-extractor-t without pseudo should be fine with nodes missing qAttrExps" time="0">
    </testcase>
    <testcase classname="q-data-extractor-t with pseudo should return proper pseudo measure" name="q-data-extractor-t with pseudo should return proper pseudo measure" time="0">
    </testcase>
    <testcase classname="q-data-extractor-t with pseudo should return proper descendants of pseudo measure" name="q-data-extractor-t with pseudo should return proper descendants of pseudo measure" time="0.001">
    </testcase>
    <testcase classname="q-data-extractor-t with weird data should return empty" name="q-data-extractor-t with weird data should return empty" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Node Selector" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.251" tests="26">
    <testcase classname="Node Selector Tokenize should support multiple groups" name="Node Selector Tokenize should support multiple groups" time="0.001">
    </testcase>
    <testcase classname="Node Selector Tokenize should support multiple selectors within same group" name="Node Selector Tokenize should support multiple selectors within same group" time="0">
    </testcase>
    <testcase classname="Node Selector Tokenize should support combination of type and attribute" name="Node Selector Tokenize should support combination of type and attribute" time="0">
    </testcase>
    <testcase classname="Node Selector Tokenize type should support exact class name" name="Node Selector Tokenize type should support exact class name" time="0">
    </testcase>
    <testcase classname="Node Selector Tokenize type should support hyphenated class name" name="Node Selector Tokenize type should support hyphenated class name" time="0">
    </testcase>
    <testcase classname="Node Selector Tokenize attribute should support attribute existance" name="Node Selector Tokenize attribute should support attribute existance" time="0">
    </testcase>
    <testcase classname="Node Selector Tokenize attribute should support attribute value" name="Node Selector Tokenize attribute should support attribute value" time="0">
    </testcase>
    <testcase classname="Node Selector Tokenize attribute should support empty attribute value" name="Node Selector Tokenize attribute should support empty attribute value" time="0.001">
    </testcase>
    <testcase classname="Node Selector Tokenize attribute should support combinations of attributes" name="Node Selector Tokenize attribute should support combinations of attributes" time="0">
    </testcase>
    <testcase classname="Node Selector Tokenize universal should support universal selector" name="Node Selector Tokenize universal should support universal selector" time="0">
    </testcase>
    <testcase classname="Node Selector Tokenize universal should support universal selector within a group" name="Node Selector Tokenize universal should support universal selector within a group" time="0">
    </testcase>
    <testcase classname="Node Selector Tokenize tag should support tag selector" name="Node Selector Tokenize tag should support tag selector" time="0">
    </testcase>
    <testcase classname="Node Selector Tokenize tag should support combinations of tag selector" name="Node Selector Tokenize tag should support combinations of tag selector" time="0">
    </testcase>
    <testcase classname="Node Selector filter type should select all objects of a given type" name="Node Selector filter type should select all objects of a given type" time="0">
    </testcase>
    <testcase classname="Node Selector filter attr should select all objects with a defined color attribute" name="Node Selector filter attr should select all objects with a defined color attribute" time="0">
    </testcase>
    <testcase classname="Node Selector filter attr should select all objects that have attribute color=&quot;red&quot;" name="Node Selector filter attr should select all objects that have attribute color=&quot;red&quot;" time="0.001">
    </testcase>
    <testcase classname="Node Selector filter attr should select all objects that have attribute color!=&quot;red&quot;" name="Node Selector filter attr should select all objects that have attribute color!=&quot;red&quot;" time="0">
    </testcase>
    <testcase classname="Node Selector filter universal should select all objects" name="Node Selector filter universal should select all objects" time="0">
    </testcase>
    <testcase classname="Node Selector filter tag should select all objects that contains tag" name="Node Selector filter tag should select all objects that contains tag" time="0">
    </testcase>
    <testcase classname="Node Selector filter tag should handle multiple whitespaces in tag" name="Node Selector filter tag should handle multiple whitespaces in tag" time="0">
    </testcase>
    <testcase classname="Node Selector filter tag should be case-sensitive" name="Node Selector filter tag should be case-sensitive" time="0">
    </testcase>
    <testcase classname="Node Selector filter tag should not match empty tag" name="Node Selector filter tag should not match empty tag" time="0">
    </testcase>
    <testcase classname="Node Selector find should find all objects that have attribute color=&quot;red&quot; and stroke=&quot;black&quot;" name="Node Selector find should find all objects that have attribute color=&quot;red&quot; and stroke=&quot;black&quot;" time="0">
    </testcase>
    <testcase classname="Node Selector find should find objects that are descendants of another object" name="Node Selector find should find objects that are descendants of another object" time="0.001">
    </testcase>
    <testcase classname="Node Selector find should find all objects that are descendants" name="Node Selector find should find all objects that are descendants" time="0">
    </testcase>
    <testcase classname="Node Selector find should find all objects that contains multiple tags" name="Node Selector find should find all objects that contains multiple tags" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Line" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.244" tests="22">
    <testcase classname="Line Constructor should instantiate a new Line" name="Line Constructor should instantiate a new Line" time="0.001">
    </testcase>
    <testcase classname="Line Constructor should accept arguments" name="Line Constructor should accept arguments" time="0">
    </testcase>
    <testcase classname="Line Set should set correct values" name="Line Set should set correct values" time="0">
    </testcase>
    <testcase classname="Line Set should handle no arguments" name="Line Set should handle no arguments" time="0">
    </testcase>
    <testcase classname="Line Set should be able to disable the default collider" name="Line Set should be able to disable the default collider" time="0">
    </testcase>
    <testcase classname="Line BoundingRect should handle default values" name="Line BoundingRect should handle default values" time="0">
    </testcase>
    <testcase classname="Line BoundingRect should return correct value without transformation" name="Line BoundingRect should return correct value without transformation" time="0">
    </testcase>
    <testcase classname="Line BoundingRect should return correct value with a scale transformation" name="Line BoundingRect should return correct value with a scale transformation" time="0.001">
    </testcase>
    <testcase classname="Line BoundingRect should return correct value with a translate transformation" name="Line BoundingRect should return correct value with a translate transformation" time="0">
    </testcase>
    <testcase classname="Line BoundingRect should return correct value with a rotate transformation" name="Line BoundingRect should return correct value with a rotate transformation" time="0">
    </testcase>
    <testcase classname="Line BoundingRect should return correct value with a negative vector direction" name="Line BoundingRect should return correct value with a negative vector direction" time="0">
    </testcase>
    <testcase classname="Line Bounds should handle default values" name="Line Bounds should handle default values" time="0">
    </testcase>
    <testcase classname="Line Bounds should return correct value without transformation" name="Line Bounds should return correct value without transformation" time="0">
    </testcase>
    <testcase classname="Line Bounds should return correct value with a scale transformation" name="Line Bounds should return correct value with a scale transformation" time="0">
    </testcase>
    <testcase classname="Line Bounds should return correct value with a translate transformation" name="Line Bounds should return correct value with a translate transformation" time="0">
    </testcase>
    <testcase classname="Line Bounds should return correct value with a rotate transformation" name="Line Bounds should return correct value with a rotate transformation" time="0.001">
    </testcase>
    <testcase classname="Line Bounds should return correct value with a negative vector direction" name="Line Bounds should return correct value with a negative vector direction" time="0">
    </testcase>
    <testcase classname="Line containsPoint should include transformation when resolving collision" name="Line containsPoint should include transformation when resolving collision" time="0">
    </testcase>
    <testcase classname="Line intersectsRect should include transformation when resolving collision" name="Line intersectsRect should include transformation when resolving collision" time="0">
    </testcase>
    <testcase classname="Line intersectsLine should include transformation when resolving collision" name="Line intersectsLine should include transformation when resolving collision" time="0">
    </testcase>
    <testcase classname="Line intersectsCircle should include transformation when resolving collision" name="Line intersectsCircle should include transformation when resolving collision" time="0">
    </testcase>
    <testcase classname="Line intersectsPolygon should include transformation when resolving collision" name="Line intersectsPolygon should include transformation when resolving collision" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Display Object" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.235" tests="17">
    <testcase classname="Display Object Constructor should instantiate a new DisplayObject" name="Display Object Constructor should instantiate a new DisplayObject" time="0.001">
    </testcase>
    <testcase classname="Display Object Constructor should not have a collider by default" name="Display Object Constructor should not have a collider by default" time="0">
    </testcase>
    <testcase classname="Display Object Set should accept arguments" name="Display Object Set should accept arguments" time="0">
    </testcase>
    <testcase classname="Display Object Set desc attribute must be of type object" name="Display Object Set desc attribute must be of type object" time="0">
    </testcase>
    <testcase classname="Display Object Set tag attribute must be of type string" name="Display Object Set tag attribute must be of type string" time="0">
    </testcase>
    <testcase classname="Display Object getItemsFrom should return a collision with it self, if it contains point" name="Display Object getItemsFrom should return a collision with it self, if it contains point" time="0">
    </testcase>
    <testcase classname="Display Object getItemsFrom should return a collision with it self, if it intersects line" name="Display Object getItemsFrom should return a collision with it self, if it intersects line" time="0.001">
    </testcase>
    <testcase classname="Display Object getItemsFrom should return a collision with it self, if it intersects rect" name="Display Object getItemsFrom should return a collision with it self, if it intersects rect" time="0">
    </testcase>
    <testcase classname="Display Object getItemsFrom should return a collision with it self, if it intersects circle" name="Display Object getItemsFrom should return a collision with it self, if it intersects circle" time="0">
    </testcase>
    <testcase classname="Display Object containsPoint should return a true if it contains point" name="Display Object containsPoint should return a true if it contains point" time="0">
    </testcase>
    <testcase classname="Display Object containsPoint should return a false if it doesnt contains point" name="Display Object containsPoint should return a false if it doesnt contains point" time="0">
    </testcase>
    <testcase classname="Display Object intersectsLine should return a true if it intersect line" name="Display Object intersectsLine should return a true if it intersect line" time="0">
    </testcase>
    <testcase classname="Display Object intersectsLine should return a false if it doesnt intersect line" name="Display Object intersectsLine should return a false if it doesnt intersect line" time="0">
    </testcase>
    <testcase classname="Display Object intersectsRect should return a true if it intersect rect" name="Display Object intersectsRect should return a true if it intersect rect" time="0.001">
    </testcase>
    <testcase classname="Display Object intersectsRect should return a false if it doesnt intersect rect" name="Display Object intersectsRect should return a false if it doesnt intersect rect" time="0">
    </testcase>
    <testcase classname="Display Object intersectsCircle should return a true if it intersect circle" name="Display Object intersectsCircle should return a true if it intersect circle" time="0">
    </testcase>
    <testcase classname="Display Object intersectsCircle should return a false if it doesnt intersect circle" name="Display Object intersectsCircle should return a false if it doesnt intersect circle" time="0">
    </testcase>
  </testsuite>
  <testsuite name="buildShapes" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.226" tests="6">
    <testcase classname="buildShapes should return box marker when keys contains only box and there is no out-of-bounds" name="buildShapes should return box marker when keys contains only box and there is no out-of-bounds" time="0.001">
    </testcase>
    <testcase classname="buildShapes should return line markers when keys contains only line and there is no out-of-bounds" name="buildShapes should return line markers when keys contains only line and there is no out-of-bounds" time="0.001">
    </testcase>
    <testcase classname="buildShapes should return median marker when keys contains only median and there is no out-of-bounds" name="buildShapes should return median marker when keys contains only median and there is no out-of-bounds" time="0">
    </testcase>
    <testcase classname="buildShapes should return whisker marker when keys contains only whisker and there is no out-of-bounds" name="buildShapes should return whisker marker when keys contains only whisker and there is no out-of-bounds" time="0.001">
    </testcase>
    <testcase classname="buildShapes should return out-of-bounds marker there is out-of-bounds" name="buildShapes should return out-of-bounds marker there is out-of-bounds" time="0">
    </testcase>
    <testcase classname="buildShapes should not return shapes that have show === false" name="buildShapes should not return shapes that have show === false" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Parse data path" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.235" tests="28">
    <testcase classname="Parse data path moveTo M" name="Parse data path moveTo M" time="0.001">
    </testcase>
    <testcase classname="Parse data path moveTo m" name="Parse data path moveTo m" time="0">
    </testcase>
    <testcase classname="Parse data path moveTo M - should split multiple commands into segments" name="Parse data path moveTo M - should split multiple commands into segments" time="0">
    </testcase>
    <testcase classname="Parse data path moveTo m - should split multiple commands into segments" name="Parse data path moveTo m - should split multiple commands into segments" time="0.001">
    </testcase>
    <testcase classname="Parse data path lineTo L" name="Parse data path lineTo L" time="0">
    </testcase>
    <testcase classname="Parse data path lineTo l" name="Parse data path lineTo l" time="0">
    </testcase>
    <testcase classname="Parse data path lineTo H" name="Parse data path lineTo H" time="0">
    </testcase>
    <testcase classname="Parse data path lineTo h" name="Parse data path lineTo h" time="0">
    </testcase>
    <testcase classname="Parse data path lineTo V" name="Parse data path lineTo V" time="0">
    </testcase>
    <testcase classname="Parse data path lineTo v" name="Parse data path lineTo v" time="0">
    </testcase>
    <testcase classname="Parse data path closePath Z" name="Parse data path closePath Z" time="0">
    </testcase>
    <testcase classname="Parse data path closePath z" name="Parse data path closePath z" time="0">
    </testcase>
    <testcase classname="Parse data path elliptical arc curve A" name="Parse data path elliptical arc curve A" time="0.001">
    </testcase>
    <testcase classname="Parse data path elliptical arc curve a" name="Parse data path elliptical arc curve a" time="0">
    </testcase>
    <testcase classname="Parse data path elliptical arc curve given no radius, threat as lineTo command" name="Parse data path elliptical arc curve given no radius, threat as lineTo command" time="0">
    </testcase>
    <testcase classname="Parse data path elliptical arc curve ignore command if arc end at start at the same position" name="Parse data path elliptical arc curve ignore command if arc end at start at the same position" time="0">
    </testcase>
    <testcase classname="Parse data path cubic bézier curve C" name="Parse data path cubic bézier curve C" time="0">
    </testcase>
    <testcase classname="Parse data path cubic bézier curve c" name="Parse data path cubic bézier curve c" time="0.001">
    </testcase>
    <testcase classname="Parse data path cubic bézier curve S - with previous cubic command" name="Parse data path cubic bézier curve S - with previous cubic command" time="0">
    </testcase>
    <testcase classname="Parse data path cubic bézier curve S - without previous cubic command" name="Parse data path cubic bézier curve S - without previous cubic command" time="0.001">
    </testcase>
    <testcase classname="Parse data path cubic bézier curve s - with previous cubic command" name="Parse data path cubic bézier curve s - with previous cubic command" time="0">
    </testcase>
    <testcase classname="Parse data path cubic bézier curve s - without previous cubic command" name="Parse data path cubic bézier curve s - without previous cubic command" time="0">
    </testcase>
    <testcase classname="Parse data path quad bézier curve Q" name="Parse data path quad bézier curve Q" time="0.001">
    </testcase>
    <testcase classname="Parse data path quad bézier curve q" name="Parse data path quad bézier curve q" time="0">
    </testcase>
    <testcase classname="Parse data path quad bézier curve T - with previous quad command" name="Parse data path quad bézier curve T - with previous quad command" time="0">
    </testcase>
    <testcase classname="Parse data path quad bézier curve T - without previous quad command" name="Parse data path quad bézier curve T - without previous quad command" time="0">
    </testcase>
    <testcase classname="Parse data path quad bézier curve t - with previous quad command" name="Parse data path quad bézier curve t - with previous quad command" time="0">
    </testcase>
    <testcase classname="Parse data path quad bézier curve t - without previous quad command" name="Parse data path quad bézier curve t - without previous quad command" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="qs-formatter" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:27" time="0.222" tests="7">
    <testcase classname="qs-formatter should create a numeric formatter by default" name="qs-formatter should create a numeric formatter by default" time="0.001">
    </testcase>
    <testcase classname="qs-formatter should create an abbreviation formatter when qIsAutoFormat=true" name="qs-formatter should create an abbreviation formatter when qIsAutoFormat=true" time="0">
    </testcase>
    <testcase classname="qs-formatter should create an abbreviation formatter when qNumFormat.qType=U" name="qs-formatter should create an abbreviation formatter when qNumFormat.qType=U" time="0">
    </testcase>
    <testcase classname="qs-formatter should not create an abbreviation formatter when qType=&quot;M&quot;" name="qs-formatter should not create an abbreviation formatter when qType=&quot;M&quot;" time="0">
    </testcase>
    <testcase classname="qs-formatter should create locale specific numeric pattern" name="qs-formatter should create locale specific numeric pattern" time="0">
    </testcase>
    <testcase classname="qs-formatter should create locale specific date pattern" name="qs-formatter should create locale specific date pattern" time="0.001">
    </testcase>
    <testcase classname="qs-formatter should use default values if localeInfo object is empty" name="qs-formatter should use default values if localeInfo object is empty" time="0">
    </testcase>
  </testsuite>
  <testsuite name="numberFormat" errors="0" failures="0" skipped="1" timestamp="2024-11-14T11:48:28" time="0.243" tests="42">
    <testcase classname="numberFormat formatter should return the correct formatter api" name="numberFormat formatter should return the correct formatter api" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should format scientific notation" name="numberFormat formatter with arguments specified at construction format should format scientific notation" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format numbers &gt;= 1e15 should always be formatted in scientific notation" name="numberFormat formatter with arguments specified at construction format numbers &gt;= 1e15 should always be formatted in scientific notation" time="0.001">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should round values correctly when type is &quot;I&quot;" name="numberFormat formatter with arguments specified at construction format should round values correctly when type is &quot;I&quot;" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should round values correctly when type is &quot;I&quot;" name="numberFormat formatter with arguments specified at construction format should round values correctly when type is &quot;I&quot;" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should round values correctly when type is &quot;F&quot;" name="numberFormat formatter with arguments specified at construction format should round values correctly when type is &quot;F&quot;" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should use significant digits from pattern when decimal pattern is not defined" name="numberFormat formatter with arguments specified at construction format should use significant digits from pattern when decimal pattern is not defined" time="0.001">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should support negative numbers" name="numberFormat formatter with arguments specified at construction format should support negative numbers" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should support arbitrary grouping separator" name="numberFormat formatter with arguments specified at construction format should support arbitrary grouping separator" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should support arbitrary decimal separator" name="numberFormat formatter with arguments specified at construction format should support arbitrary decimal separator" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should support arbitrary mix of grouping and decimal separators" name="numberFormat formatter with arguments specified at construction format should support arbitrary mix of grouping and decimal separators" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should ignore grouping if grouping separator is same as decimal separator" name="numberFormat formatter with arguments specified at construction format should ignore grouping if grouping separator is same as decimal separator" time="0.001">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should format integers" name="numberFormat formatter with arguments specified at construction format should format integers" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should format decimals" name="numberFormat formatter with arguments specified at construction format should format decimals" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should support grouping" name="numberFormat formatter with arguments specified at construction format should support grouping" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should support percentage" name="numberFormat formatter with arguments specified at construction format should support percentage" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should support text surrounding the pattern" name="numberFormat formatter with arguments specified at construction format should support text surrounding the pattern" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should support positive and negative formatting" name="numberFormat formatter with arguments specified at construction format should support positive and negative formatting" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should support positive and negative formatting with percentage" name="numberFormat formatter with arguments specified at construction format should support positive and negative formatting with percentage" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should support zero formatting" name="numberFormat formatter with arguments specified at construction format should support zero formatting" time="0.001">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should use list separator from locale info" name="numberFormat formatter with arguments specified at construction format should use list separator from locale info" time="0">
      <skipped/>
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should support hexadecimal formatting" name="numberFormat formatter with arguments specified at construction format should support hexadecimal formatting" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should support octal formatting" name="numberFormat formatter with arguments specified at construction format should support octal formatting" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should support binary formatting" name="numberFormat formatter with arguments specified at construction format should support binary formatting" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should support arbitrary base/radix" name="numberFormat formatter with arguments specified at construction format should support arbitrary base/radix" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should not format if radix is less than 2 or larger than 36" name="numberFormat formatter with arguments specified at construction format should not format if radix is less than 2 or larger than 36" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should support roman numerals and format integers" name="numberFormat formatter with arguments specified at construction format should support roman numerals and format integers" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should support roman numerals and ignore decimals" name="numberFormat formatter with arguments specified at construction format should support roman numerals and ignore decimals" time="0.001">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should support roman numerals and handle negative values" name="numberFormat formatter with arguments specified at construction format should support roman numerals and handle negative values" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should support roman numerals and return the same format as engine when value &gt; 500000" name="numberFormat formatter with arguments specified at construction format should support roman numerals and return the same format as engine when value &gt; 500000" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should support roman numerals and return lowercase letters when lowercase pattern is used" name="numberFormat formatter with arguments specified at construction format should support roman numerals and return lowercase letters when lowercase pattern is used" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format should support coercible values" name="numberFormat formatter with arguments specified at construction format should support coercible values" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format format should use the passed arguments instead of the ones passed at construction" name="numberFormat formatter with arguments specified at construction format format should use the passed arguments instead of the ones passed at construction" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format pattern should return the current pattern when no argument passed" name="numberFormat formatter with arguments specified at construction format pattern should return the current pattern when no argument passed" time="0">
    </testcase>
    <testcase classname="numberFormat formatter with arguments specified at construction format pattern should change the pattern of the existing formatter when argument passed" name="numberFormat formatter with arguments specified at construction format pattern should change the pattern of the existing formatter when argument passed" time="0">
    </testcase>
    <testcase classname="numberFormat formatter without arguments specified at construction format should not format numbers" name="numberFormat formatter without arguments specified at construction format should not format numbers" time="0">
    </testcase>
    <testcase classname="numberFormat formatter without arguments specified at construction format should handle NaNs correctly" name="numberFormat formatter without arguments specified at construction format should handle NaNs correctly" time="0.002">
    </testcase>
    <testcase classname="numberFormat formatter without arguments specified at construction format should not format non-numerics" name="numberFormat formatter without arguments specified at construction format should not format non-numerics" time="0">
    </testcase>
    <testcase classname="numberFormat formatter without arguments specified at construction format should handle Date correctly" name="numberFormat formatter without arguments specified at construction format should handle Date correctly" time="0">
    </testcase>
    <testcase classname="numberFormat formatter without arguments specified at construction format format should use the passed arguments instead of the ones passed at construction" name="numberFormat formatter without arguments specified at construction format format should use the passed arguments instead of the ones passed at construction" time="0">
    </testcase>
    <testcase classname="numberFormat formatter without arguments specified at construction format pattern should return the current pattern when no argument passed" name="numberFormat formatter without arguments specified at construction format pattern should return the current pattern when no argument passed" time="0.001">
    </testcase>
    <testcase classname="numberFormat formatter without arguments specified at construction format pattern should change the pattern of the existing formatter when argument passed" name="numberFormat formatter without arguments specified at construction format pattern should change the pattern of the existing formatter when argument passed" time="0">
    </testcase>
  </testsuite>
  <testsuite name="q-field" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.264" tests="15">
    <testcase classname="q-field meta should return id" name="q-field meta should return id" time="0.001">
    </testcase>
    <testcase classname="q-field meta should return meta" name="q-field meta should return meta" time="0.001">
    </testcase>
    <testcase classname="q-field meta should return min value" name="q-field meta should return min value" time="0">
    </testcase>
    <testcase classname="q-field meta should return max value" name="q-field meta should return max value" time="0">
    </testcase>
    <testcase classname="q-field meta should return tags" name="q-field meta should return tags" time="0">
    </testcase>
    <testcase classname="q-field meta should return title" name="q-field meta should return title" time="0">
    </testcase>
    <testcase classname="q-field meta should identify when the field is a dimension" name="q-field meta should identify when the field is a dimension" time="0">
    </testcase>
    <testcase classname="q-field meta should identify an attribute dimension as a dimension" name="q-field meta should identify an attribute dimension as a dimension" time="0">
    </testcase>
    <testcase classname="q-field meta should identify when the field is a measure" name="q-field meta should identify when the field is a measure" time="0">
    </testcase>
    <testcase classname="q-field meta should call field extractor with itself as parameter" name="q-field meta should call field extractor with itself as parameter" time="0.001">
    </testcase>
    <testcase classname="q-field meta should not call field extractor more than once" name="q-field meta should not call field extractor more than once" time="0">
    </testcase>
    <testcase classname="q-field meta should have a formatter" name="q-field meta should have a formatter" time="0">
    </testcase>
    <testcase classname="q-field meta should take localeInfo into account when formatting" name="q-field meta should take localeInfo into account when formatting" time="0">
    </testcase>
    <testcase classname="q-field meta should have a default reducer of &quot;avg&quot; for a measure" name="q-field meta should have a default reducer of &quot;avg&quot; for a measure" time="0.001">
    </testcase>
    <testcase classname="q-field meta should have a default reducer of &quot;first&quot; for a dimension" name="q-field meta should have a default reducer of &quot;first&quot; for a dimension" time="0">
    </testcase>
  </testsuite>
  <testsuite name="GeoCircle" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.249" tests="34">
    <testcase classname="GeoCircle constructor should set correct default values when no arguments passed" name="GeoCircle constructor should set correct default values when no arguments passed" time="0">
    </testcase>
    <testcase classname="GeoCircle constructor should set the correct values when arguments passed" name="GeoCircle constructor should set the correct values when arguments passed" time="0">
    </testcase>
    <testcase classname="GeoCircle set should set the correct values" name="GeoCircle set should set the correct values" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Point should intersect with a point inside its circumference " name="GeoCircle Intersection Point should intersect with a point inside its circumference " time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Point should not intersect with a point outside its circumference " name="GeoCircle Intersection Point should not intersect with a point outside its circumference " time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Point should intersect with a point on its circumference" name="GeoCircle Intersection Point should intersect with a point on its circumference" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Point should not intersect if the size of the circle is zero" name="GeoCircle Intersection Point should not intersect if the size of the circle is zero" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Rect should intersect if circle coordinate is on rect circumference" name="GeoCircle Intersection Rect should intersect if circle coordinate is on rect circumference" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Rect should intersect if rect is inside circle circumference" name="GeoCircle Intersection Rect should intersect if rect is inside circle circumference" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Rect should intersect if circle coordinate is inside rect circumference" name="GeoCircle Intersection Rect should intersect if circle coordinate is inside rect circumference" time="0.001">
    </testcase>
    <testcase classname="GeoCircle Intersection Rect should intersect if circle circumference is inside rect" name="GeoCircle Intersection Rect should intersect if circle circumference is inside rect" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Rect should not intersect if circle circumference is outside rect" name="GeoCircle Intersection Rect should not intersect if circle circumference is outside rect" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Rect should not intersect if the size of the circle is zero" name="GeoCircle Intersection Rect should not intersect if the size of the circle is zero" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Rect should not intersect if the width of the rect is zero" name="GeoCircle Intersection Rect should not intersect if the width of the rect is zero" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Rect should not intersect if the height of the rect is zero" name="GeoCircle Intersection Rect should not intersect if the height of the rect is zero" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Line should intersect with a vertical line passing through the circle" name="GeoCircle Intersection Line should intersect with a vertical line passing through the circle" time="0.001">
    </testcase>
    <testcase classname="GeoCircle Intersection Line should intersect with a vertical line passing through the circle circumference" name="GeoCircle Intersection Line should intersect with a vertical line passing through the circle circumference" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Line should not intersect with a vertical line outside the circle circumference" name="GeoCircle Intersection Line should not intersect with a vertical line outside the circle circumference" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Line should intersect with a horizontal line passing through the circle" name="GeoCircle Intersection Line should intersect with a horizontal line passing through the circle" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Line should intersect with a horizontal line passing through the circle circumference" name="GeoCircle Intersection Line should intersect with a horizontal line passing through the circle circumference" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Line should not intersect with a horizontal line outside the circle circumference" name="GeoCircle Intersection Line should not intersect with a horizontal line outside the circle circumference" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Line should intersect with a diagonal line passing through the circle" name="GeoCircle Intersection Line should intersect with a diagonal line passing through the circle" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Line should intersect with a diagonal line passing through the circle circumference" name="GeoCircle Intersection Line should intersect with a diagonal line passing through the circle circumference" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Line should not intersect with a diagonal line outside the circle circumference" name="GeoCircle Intersection Line should not intersect with a diagonal line outside the circle circumference" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Line should intersect with a coincident diagonal line of longer magnitude" name="GeoCircle Intersection Line should intersect with a coincident diagonal line of longer magnitude" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Line should not intersect with a coincident diagonal line of shorten magnitude" name="GeoCircle Intersection Line should not intersect with a coincident diagonal line of shorten magnitude" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Line should intersect with a line that has start point inside the circle circumference" name="GeoCircle Intersection Line should intersect with a line that has start point inside the circle circumference" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Line should intersect with a line that has end point inside the circle circumference" name="GeoCircle Intersection Line should intersect with a line that has end point inside the circle circumference" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Line should not intersect if the size of the circle is zero" name="GeoCircle Intersection Line should not intersect if the size of the circle is zero" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Circle should intersect with a circle center inside its circumference " name="GeoCircle Intersection Circle should intersect with a circle center inside its circumference " time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Circle should not intersect with a circle outside its circumference " name="GeoCircle Intersection Circle should not intersect with a circle outside its circumference " time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Circle should intersect with a circle on its circumference" name="GeoCircle Intersection Circle should intersect with a circle on its circumference" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Circle should not intersect if the size of the circle is zero" name="GeoCircle Intersection Circle should not intersect if the size of the circle is zero" time="0">
    </testcase>
    <testcase classname="GeoCircle Intersection Circle should not intersect if the size of the colliding circle is zero" name="GeoCircle Intersection Circle should not intersect if the size of the colliding circle is zero" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Polygon" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.25" tests="31">
    <testcase classname="Polygon constructor should set correct default values when no arguments passed" name="Polygon constructor should set correct default values when no arguments passed" time="0">
    </testcase>
    <testcase classname="Polygon constructor should set the correct values when arguments passed" name="Polygon constructor should set the correct values when arguments passed" time="0">
    </testcase>
    <testcase classname="Polygon constructor should close edges if not already closed" name="Polygon constructor should close edges if not already closed" time="0">
    </testcase>
    <testcase classname="Polygon set should set correct default values when no arguments passed" name="Polygon set should set correct default values when no arguments passed" time="0.001">
    </testcase>
    <testcase classname="Polygon set should set the correct values when arguments passed" name="Polygon set should set the correct values when arguments passed" time="0">
    </testcase>
    <testcase classname="Polygon set should remove any duplicate sibling vertices" name="Polygon set should remove any duplicate sibling vertices" time="0">
    </testcase>
    <testcase classname="Polygon bounds should return the correct bounds" name="Polygon bounds should return the correct bounds" time="0">
    </testcase>
    <testcase classname="Polygon bounds should handle negative points" name="Polygon bounds should handle negative points" time="0">
    </testcase>
    <testcase classname="Polygon Intersection Point convex polygon" name="Polygon Intersection Point convex polygon" time="0">
    </testcase>
    <testcase classname="Polygon Intersection Point concave polygon" name="Polygon Intersection Point concave polygon" time="0">
    </testcase>
    <testcase classname="Polygon Intersection Point self-Intersecting polygon" name="Polygon Intersection Point self-Intersecting polygon" time="0.001">
    </testcase>
    <testcase classname="Polygon Intersection Point should not intersect if polygon contains less then 2 vertices" name="Polygon Intersection Point should not intersect if polygon contains less then 2 vertices" time="0">
    </testcase>
    <testcase classname="Polygon Intersection Point should return true if the point is coincident with a vertex of the polygon" name="Polygon Intersection Point should return true if the point is coincident with a vertex of the polygon" time="0">
    </testcase>
    <testcase classname="Polygon Intersection Point should return true if the point is on an edge of the polygon" name="Polygon Intersection Point should return true if the point is on an edge of the polygon" time="0.001">
    </testcase>
    <testcase classname="Polygon Intersection Point should calculate that these points are outside" name="Polygon Intersection Point should calculate that these points are outside" time="0">
    </testcase>
    <testcase classname="Polygon Intersection Point should return true if the point is inside and the horizontal line of the point goes through a vertex of the polygon" name="Polygon Intersection Point should return true if the point is inside and the horizontal line of the point goes through a vertex of the polygon" time="0">
    </testcase>
    <testcase classname="Polygon Intersection Point should return true if the point is inside and the horizontal line of the point goes through an edge of the polygon" name="Polygon Intersection Point should return true if the point is inside and the horizontal line of the point goes through an edge of the polygon" time="0">
    </testcase>
    <testcase classname="Polygon Intersection Point should return false if the point is outside and the horizontal line of the point goes through an edge of the polygon" name="Polygon Intersection Point should return false if the point is outside and the horizontal line of the point goes through an edge of the polygon" time="0">
    </testcase>
    <testcase classname="Polygon Intersection Point should return false if the point is outside and the horizontal line of the point goes through a vertex of the polygon" name="Polygon Intersection Point should return false if the point is outside and the horizontal line of the point goes through a vertex of the polygon" time="0">
    </testcase>
    <testcase classname="Polygon Intersection intersectsCircle convex polygon" name="Polygon Intersection intersectsCircle convex polygon" time="0">
    </testcase>
    <testcase classname="Polygon Intersection intersectsCircle concave polygon" name="Polygon Intersection intersectsCircle concave polygon" time="0">
    </testcase>
    <testcase classname="Polygon Intersection intersectsCircle self-Intersecting polygon" name="Polygon Intersection intersectsCircle self-Intersecting polygon" time="0.001">
    </testcase>
    <testcase classname="Polygon Intersection intersectsCircle should not intersect if polygon contains less then 2 vertices" name="Polygon Intersection intersectsCircle should not intersect if polygon contains less then 2 vertices" time="0">
    </testcase>
    <testcase classname="Polygon Intersection intersectsLine should intersect line" name="Polygon Intersection intersectsLine should intersect line" time="0">
    </testcase>
    <testcase classname="Polygon Intersection intersectsRect should intersect rect" name="Polygon Intersection intersectsRect should intersect rect" time="0">
    </testcase>
    <testcase classname="Polygon Intersection intersectsPolygon convex polygon" name="Polygon Intersection intersectsPolygon convex polygon" time="0">
    </testcase>
    <testcase classname="Polygon Intersection intersectsPolygon concave polygon" name="Polygon Intersection intersectsPolygon concave polygon" time="0">
    </testcase>
    <testcase classname="Polygon Intersection intersectsPolygon self-intersecting polygon" name="Polygon Intersection intersectsPolygon self-intersecting polygon" time="0">
    </testcase>
    <testcase classname="Polygon Intersection intersectsPolygon fully contains another polygon, case 1" name="Polygon Intersection intersectsPolygon fully contains another polygon, case 1" time="0">
    </testcase>
    <testcase classname="Polygon Intersection intersectsPolygon fully contains another polygon, case 2" name="Polygon Intersection intersectsPolygon fully contains another polygon, case 2" time="0">
    </testcase>
    <testcase classname="Polygon Intersection intersectsPolygon fully being contained by another polygon" name="Polygon Intersection intersectsPolygon fully being contained by another polygon" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Text Manipulation" errors="0" failures="0" skipped="1" timestamp="2024-11-14T11:48:28" time="0.247" tests="12">
    <testcase classname="Text Manipulation ellips text should ellips text until it is below max width" name="Text Manipulation ellips text should ellips text until it is below max width" time="0">
    </testcase>
    <testcase classname="Text Manipulation ellips text should not ellips text if it already is below max width" name="Text Manipulation ellips text should not ellips text if it already is below max width" time="0">
    </testcase>
    <testcase classname="Text Manipulation ellips text should never return an empty string" name="Text Manipulation ellips text should never return an empty string" time="0">
    </testcase>
    <testcase classname="Text Manipulation ellips text should handle if max width is negative" name="Text Manipulation ellips text should handle if max width is negative" time="0">
    </testcase>
    <testcase classname="Text Manipulation ellips text should handle if max width is undefined" name="Text Manipulation ellips text should handle if max width is undefined" time="0">
    </testcase>
    <testcase classname="Text Manipulation ellips text should not modify text node" name="Text Manipulation ellips text should not modify text node" time="0">
    </testcase>
    <testcase classname="Text Manipulation ellips text should handle undefined text" name="Text Manipulation ellips text should handle undefined text" time="0">
    </testcase>
    <testcase classname="Text Manipulation ellips text should handle null text" name="Text Manipulation ellips text should handle null text" time="0">
    </testcase>
    <testcase classname="Text Manipulation ellips text should handle object as text" name="Text Manipulation ellips text should handle object as text" time="0">
    </testcase>
    <testcase classname="Text Manipulation ellips text should handle function as text" name="Text Manipulation ellips text should handle function as text" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Text Manipulation ellips text should handle number as text" name="Text Manipulation ellips text should handle number as text" time="0">
    </testcase>
    <testcase classname="Text Manipulation ellips text should handle boolean as text" name="Text Manipulation ellips text should handle boolean as text" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Axis Label Node" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.283" tests="54">
    <testcase classname="Axis Label Node Label Style align align start with vertical orientation" name="Axis Label Node Label Style align align start with vertical orientation" time="0.001">
    </testcase>
    <testcase classname="Axis Label Node Label Style align align middle with vertical orientation" name="Axis Label Node Label Style align align middle with vertical orientation" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Style align align end with vertical orientation" name="Axis Label Node Label Style align align end with vertical orientation" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Style align align start with horizontal orientation" name="Axis Label Node Label Style align align start with horizontal orientation" time="0.001">
    </testcase>
    <testcase classname="Axis Label Node Label Style align align middle with horizontal orientation" name="Axis Label Node Label Style align align middle with horizontal orientation" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Style align align end with horizontal orientation" name="Axis Label Node Label Style align align end with horizontal orientation" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Style align align end with horizontal orientation and tilted labels" name="Axis Label Node Label Style align align end with horizontal orientation and tilted labels" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Left align middle label" name="Axis Label Node Label Left align middle label" time="0.001">
    </testcase>
    <testcase classname="Axis Label Node Label Left align end label" name="Axis Label Node Label Left align end label" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Left align end label with margin" name="Axis Label Node Label Left align end label with margin" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Left align start label" name="Axis Label Node Label Left align start label" time="0.001">
    </testcase>
    <testcase classname="Axis Label Node Label Left align start label with margin" name="Axis Label Node Label Left align start label with margin" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Right align middle label" name="Axis Label Node Label Right align middle label" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Right align end label" name="Axis Label Node Label Right align end label" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Right align end label with margin" name="Axis Label Node Label Right align end label with margin" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Right align start label" name="Axis Label Node Label Right align start label" time="0.001">
    </testcase>
    <testcase classname="Axis Label Node Label Right align start label with margin" name="Axis Label Node Label Right align start label with margin" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Top align middle label" name="Axis Label Node Label Top align middle label" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Top align start label" name="Axis Label Node Label Top align start label" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Top align start label with margin" name="Axis Label Node Label Top align start label with margin" time="0.001">
    </testcase>
    <testcase classname="Axis Label Node Label Top align end label" name="Axis Label Node Label Top align end label" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Top align end label with margin" name="Axis Label Node Label Top align end label with margin" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Bottom align middle label" name="Axis Label Node Label Bottom align middle label" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Bottom align start label" name="Axis Label Node Label Bottom align start label" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Bottom align start label with margin" name="Axis Label Node Label Bottom align start label with margin" time="0.001">
    </testcase>
    <testcase classname="Axis Label Node Label Bottom align end label" name="Axis Label Node Label Bottom align end label" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Bottom align end label with margin" name="Axis Label Node Label Bottom align end label with margin" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Tilted align bottom 45deg" name="Axis Label Node Label Tilted align bottom 45deg" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Tilted align bottom 60deg" name="Axis Label Node Label Tilted align bottom 60deg" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Tilted align bottom -45deg" name="Axis Label Node Label Tilted align bottom -45deg" time="0.001">
    </testcase>
    <testcase classname="Axis Label Node Label Tilted align top 45deg" name="Axis Label Node Label Tilted align top 45deg" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Tilted align top 60deg" name="Axis Label Node Label Tilted align top 60deg" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Tilted align top -45deg" name="Axis Label Node Label Tilted align top -45deg" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Collider should have a bounds collider if stepSize is zero" name="Axis Label Node Label Collider should have a bounds collider if stepSize is zero" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Collider align left should have a collider" name="Axis Label Node Label Collider align left should have a collider" time="0.001">
    </testcase>
    <testcase classname="Axis Label Node Label Collider align left should clip collider at the bottom boundary of outerRect" name="Axis Label Node Label Collider align left should clip collider at the bottom boundary of outerRect" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Collider align left should clip collider at the top boundary of outerRect" name="Axis Label Node Label Collider align left should clip collider at the top boundary of outerRect" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Collider align right should have a collider" name="Axis Label Node Label Collider align right should have a collider" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Collider align right should clip collider at the bottom boundary of outerRect" name="Axis Label Node Label Collider align right should clip collider at the bottom boundary of outerRect" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Collider align right should clip collider at the top boundary of outerRect" name="Axis Label Node Label Collider align right should clip collider at the top boundary of outerRect" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Collider align top should have a collider for horizontal labels" name="Axis Label Node Label Collider align top should have a collider for horizontal labels" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Collider align top should have a collider for layered labels" name="Axis Label Node Label Collider align top should have a collider for layered labels" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Collider align top should have a collider for tilted labels" name="Axis Label Node Label Collider align top should have a collider for tilted labels" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Collider align top should have a collider for tilted labels with a negative angle" name="Axis Label Node Label Collider align top should have a collider for tilted labels with a negative angle" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Collider align top should clip collider at the bottom boundary of outerRect" name="Axis Label Node Label Collider align top should clip collider at the bottom boundary of outerRect" time="0.001">
    </testcase>
    <testcase classname="Axis Label Node Label Collider align top should clip collider at the top boundary of outerRect" name="Axis Label Node Label Collider align top should clip collider at the top boundary of outerRect" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Collider align bottom should have a collider for horizontal labels" name="Axis Label Node Label Collider align bottom should have a collider for horizontal labels" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Collider align bottom should have a collider for layered labels" name="Axis Label Node Label Collider align bottom should have a collider for layered labels" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Collider align bottom should have a collider for tilted labels" name="Axis Label Node Label Collider align bottom should have a collider for tilted labels" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Collider align bottom should have a collider for tilted labels with a negative angle" name="Axis Label Node Label Collider align bottom should have a collider for tilted labels with a negative angle" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Collider align bottom should clip collider at the bottom boundary of outerRect" name="Axis Label Node Label Collider align bottom should clip collider at the bottom boundary of outerRect" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Collider align bottom should clip collider at the top boundary of outerRect" name="Axis Label Node Label Collider align bottom should clip collider at the top boundary of outerRect" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Offset should set offset along y-axis" name="Axis Label Node Label Offset should set offset along y-axis" time="0">
    </testcase>
    <testcase classname="Axis Label Node Label Offset should set offset along x-axis" name="Axis Label Node Label Offset should set offset along x-axis" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="text" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.276" tests="12">
    <testcase classname="text render should set font correctly" name="text render should set font correctly" time="0">
    </testcase>
    <testcase classname="text render should set defined fontWeight" name="text render should set defined fontWeight" time="0.001">
    </testcase>
    <testcase classname="text render should not fire stroke if stroke condition is falsy" name="text render should not fire stroke if stroke condition is falsy" time="0">
    </testcase>
    <testcase classname="text render should fire stroke if stroke condition is truthy" name="text render should fire stroke if stroke condition is truthy" time="0.001">
    </testcase>
    <testcase classname="text render textAlign should be set correctly when text-anchor is left" name="text render textAlign should be set correctly when text-anchor is left" time="0">
    </testcase>
    <testcase classname="text render textAlign should be set correctly when text-anchor is right" name="text render textAlign should be set correctly when text-anchor is right" time="0">
    </testcase>
    <testcase classname="text render textAlign should be set correctly when text-anchor is center" name="text render textAlign should be set correctly when text-anchor is center" time="0">
    </testcase>
    <testcase classname="text render textAlign should be set correctly when text-anchor is start" name="text render textAlign should be set correctly when text-anchor is start" time="0.001">
    </testcase>
    <testcase classname="text render textAlign should be set correctly when text-anchor is end" name="text render textAlign should be set correctly when text-anchor is end" time="0">
    </testcase>
    <testcase classname="text render textAlign should be set correctly when text-anchor is middle" name="text render textAlign should be set correctly when text-anchor is middle" time="0">
    </testcase>
    <testcase classname="text render textAlign should be set correctly when text-anchor is inherit" name="text render textAlign should be set correctly when text-anchor is inherit" time="0">
    </testcase>
    <testcase classname="text render baseline should transform dominant-baseline into a dy value" name="text render baseline should transform dominant-baseline into a dy value" time="0">
    </testcase>
  </testsuite>
  <testsuite name="axis - get horizontal continuous label width" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.247" tests="10">
    <testcase classname="axis - get horizontal continuous label width Case 1 - Less than 2 ticks should return inner rect width" name="axis - get horizontal continuous label width Case 1 - Less than 2 ticks should return inner rect width" time="0">
    </testcase>
    <testcase classname="axis - get horizontal continuous label width Case 2 - Is first or last tick first tick is positioned at 0" name="axis - get horizontal continuous label width Case 2 - Is first or last tick first tick is positioned at 0" time="0">
    </testcase>
    <testcase classname="axis - get horizontal continuous label width Case 2 - Is first or last tick first tick double distance to neighbouring tick is less than available edge bleed" name="axis - get horizontal continuous label width Case 2 - Is first or last tick first tick double distance to neighbouring tick is less than available edge bleed" time="0">
    </testcase>
    <testcase classname="axis - get horizontal continuous label width Case 2 - Is first or last tick first tick distance to neighbouring tick is greater than double available edge bleed" name="axis - get horizontal continuous label width Case 2 - Is first or last tick first tick distance to neighbouring tick is greater than double available edge bleed" time="0">
    </testcase>
    <testcase classname="axis - get horizontal continuous label width Case 2 - Is first or last tick first tick double distance of edge bleed is greater than distance to neighbouring tick" name="axis - get horizontal continuous label width Case 2 - Is first or last tick first tick double distance of edge bleed is greater than distance to neighbouring tick" time="0">
    </testcase>
    <testcase classname="axis - get horizontal continuous label width Case 2 - Is first or last tick last tick is positioned at 1" name="axis - get horizontal continuous label width Case 2 - Is first or last tick last tick is positioned at 1" time="0">
    </testcase>
    <testcase classname="axis - get horizontal continuous label width Case 2 - Is first or last tick last tick double distance to neighbouring tick is less than available edge bleed" name="axis - get horizontal continuous label width Case 2 - Is first or last tick last tick double distance to neighbouring tick is less than available edge bleed" time="0.001">
    </testcase>
    <testcase classname="axis - get horizontal continuous label width Case 2 - Is first or last tick last tick distance to neighbouring tick is greater than double available edge bleed" name="axis - get horizontal continuous label width Case 2 - Is first or last tick last tick distance to neighbouring tick is greater than double available edge bleed" time="0">
    </testcase>
    <testcase classname="axis - get horizontal continuous label width Case 2 - Is first or last tick last tick double distance of edge bleed is greater than distance to neighbouring tick" name="axis - get horizontal continuous label width Case 2 - Is first or last tick last tick double distance of edge bleed is greater than distance to neighbouring tick" time="0">
    </testcase>
    <testcase classname="axis - get horizontal continuous label width Case 3 - Default should return the shortest distance" name="axis - get horizontal continuous label width Case 3 - Default should return the shortest distance" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Container" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.308" tests="69">
    <testcase classname="Container Constructor should instantiate a new Container" name="Container Constructor should instantiate a new Container" time="0.001">
    </testcase>
    <testcase classname="Container Constructor should not have a collider by default" name="Container Constructor should not have a collider by default" time="0">
    </testcase>
    <testcase classname="Container Constructor should accept arguments" name="Container Constructor should accept arguments" time="0">
    </testcase>
    <testcase classname="Container Set should set correct values" name="Container Set should set correct values" time="0">
    </testcase>
    <testcase classname="Container Set should handle no arguments" name="Container Set should handle no arguments" time="0">
    </testcase>
    <testcase classname="Container Set should be able to disable the collider" name="Container Set should be able to disable the collider" time="0">
    </testcase>
    <testcase classname="Container BoundingRect should return a zero sized rect if no children have been added" name="Container BoundingRect should return a zero sized rect if no children have been added" time="0.001">
    </testcase>
    <testcase classname="Container BoundingRect should return correct value if container and children are without a transformation" name="Container BoundingRect should return correct value if container and children are without a transformation" time="0">
    </testcase>
    <testcase classname="Container BoundingRect should return correct value with a transformation on its children" name="Container BoundingRect should return correct value with a transformation on its children" time="0.001">
    </testcase>
    <testcase classname="Container BoundingRect should return correct value with a transformation the container and its children" name="Container BoundingRect should return correct value with a transformation the container and its children" time="0">
    </testcase>
    <testcase classname="Container BoundingRect should return correct value a scale transformation" name="Container BoundingRect should return correct value a scale transformation" time="0">
    </testcase>
    <testcase classname="Container BoundingRect should return correct value with a translate transformation" name="Container BoundingRect should return correct value with a translate transformation" time="0">
    </testcase>
    <testcase classname="Container BoundingRect should return correct value with a rotate transformation" name="Container BoundingRect should return correct value with a rotate transformation" time="0.001">
    </testcase>
    <testcase classname="Container Bounds should return a zero sized rect if no children have been added" name="Container Bounds should return a zero sized rect if no children have been added" time="0">
    </testcase>
    <testcase classname="Container Bounds should return correct value if container and children are without a transformation" name="Container Bounds should return correct value if container and children are without a transformation" time="0">
    </testcase>
    <testcase classname="Container Bounds should return correct value with a transformation on its children" name="Container Bounds should return correct value with a transformation on its children" time="0">
    </testcase>
    <testcase classname="Container Bounds should return correct value with a transformation the container and its children" name="Container Bounds should return correct value with a transformation the container and its children" time="0">
    </testcase>
    <testcase classname="Container Bounds should return correct value a scale transformation" name="Container Bounds should return correct value a scale transformation" time="0">
    </testcase>
    <testcase classname="Container Bounds should return correct value with a translate transformation" name="Container Bounds should return correct value with a translate transformation" time="0.001">
    </testcase>
    <testcase classname="Container Bounds should return correct value with a rotate transformation" name="Container Bounds should return correct value with a rotate transformation" time="0">
    </testcase>
    <testcase classname="Container containsPoint should return true if any child contains point" name="Container containsPoint should return true if any child contains point" time="0">
    </testcase>
    <testcase classname="Container containsPoint should return true if any childs child contains point" name="Container containsPoint should return true if any childs child contains point" time="0">
    </testcase>
    <testcase classname="Container containsPoint should return false if no child contains point" name="Container containsPoint should return false if no child contains point" time="0">
    </testcase>
    <testcase classname="Container containsPoint should return true if bounds contains point" name="Container containsPoint should return true if bounds contains point" time="0">
    </testcase>
    <testcase classname="Container containsPoint should include self transformation when resolving collision" name="Container containsPoint should include self transformation when resolving collision" time="0.001">
    </testcase>
    <testcase classname="Container containsPoint should include descendant transformation when resolving collision" name="Container containsPoint should include descendant transformation when resolving collision" time="0">
    </testcase>
    <testcase classname="Container containsPoint should include self and descendant transformation when resolving collision" name="Container containsPoint should include self and descendant transformation when resolving collision" time="0">
    </testcase>
    <testcase classname="Container containsPoint should include ancestors transformation when resolving collision" name="Container containsPoint should include ancestors transformation when resolving collision" time="0">
    </testcase>
    <testcase classname="Container containsPoint should return true if custom collider contains point" name="Container containsPoint should return true if custom collider contains point" time="0">
    </testcase>
    <testcase classname="Container containsPoint should return true if frontChild contains point" name="Container containsPoint should return true if frontChild contains point" time="0">
    </testcase>
    <testcase classname="Container intersectsLine should return true if any child intersects line" name="Container intersectsLine should return true if any child intersects line" time="0">
    </testcase>
    <testcase classname="Container intersectsLine should return true if any childs child intersects line" name="Container intersectsLine should return true if any childs child intersects line" time="0.001">
    </testcase>
    <testcase classname="Container intersectsLine should return false if no child intersects line" name="Container intersectsLine should return false if no child intersects line" time="0">
    </testcase>
    <testcase classname="Container intersectsLine should return true if bounds intersects line" name="Container intersectsLine should return true if bounds intersects line" time="0">
    </testcase>
    <testcase classname="Container intersectsLine should return true if custom collider intersects line" name="Container intersectsLine should return true if custom collider intersects line" time="0">
    </testcase>
    <testcase classname="Container intersectsLine should return true if frontChild intersects line" name="Container intersectsLine should return true if frontChild intersects line" time="0">
    </testcase>
    <testcase classname="Container intersectsRect should return true if any child intersects rect" name="Container intersectsRect should return true if any child intersects rect" time="0">
    </testcase>
    <testcase classname="Container intersectsRect should return true if bounds intersects rect" name="Container intersectsRect should return true if bounds intersects rect" time="0">
    </testcase>
    <testcase classname="Container intersectsRect should return true if custom collider intersects rect" name="Container intersectsRect should return true if custom collider intersects rect" time="0">
    </testcase>
    <testcase classname="Container intersectsRect should return true if frontChild intersects rect" name="Container intersectsRect should return true if frontChild intersects rect" time="0">
    </testcase>
    <testcase classname="Container intersectsRect should return true if any childs child intersects rect" name="Container intersectsRect should return true if any childs child intersects rect" time="0">
    </testcase>
    <testcase classname="Container intersectsRect should return false if no child intersects rect" name="Container intersectsRect should return false if no child intersects rect" time="0">
    </testcase>
    <testcase classname="Container intersectsCircle should return true if any child intersects circle" name="Container intersectsCircle should return true if any child intersects circle" time="0">
    </testcase>
    <testcase classname="Container intersectsCircle should return true if bounds intersects circle" name="Container intersectsCircle should return true if bounds intersects circle" time="0.001">
    </testcase>
    <testcase classname="Container intersectsCircle should return true if custom collider intersects circle" name="Container intersectsCircle should return true if custom collider intersects circle" time="0">
    </testcase>
    <testcase classname="Container intersectsCircle should return true if frontChild intersects circle" name="Container intersectsCircle should return true if frontChild intersects circle" time="0">
    </testcase>
    <testcase classname="Container intersectsCircle should return true if any childs child intersects circle" name="Container intersectsCircle should return true if any childs child intersects circle" time="0">
    </testcase>
    <testcase classname="Container intersectsCircle should return false if no child intersects circle" name="Container intersectsCircle should return false if no child intersects circle" time="0">
    </testcase>
    <testcase classname="Container getItemsFrom should return an empty array if call has no argument" name="Container getItemsFrom should return an empty array if call has no argument" time="0">
    </testcase>
    <testcase classname="Container getItemsFrom should return an empty array if call argument is an empty object" name="Container getItemsFrom should return an empty array if call argument is an empty object" time="0">
    </testcase>
    <testcase classname="Container getItemsFrom should return an empty array if call argument is null" name="Container getItemsFrom should return an empty array if call argument is null" time="0">
    </testcase>
    <testcase classname="Container getItemsFrom should return an empty array if call argument shape is not supported" name="Container getItemsFrom should return an empty array if call argument shape is not supported" time="0">
    </testcase>
    <testcase classname="Container getItemsFrom Bounds should return the bounding node" name="Container getItemsFrom Bounds should return the bounding node" time="0">
    </testcase>
    <testcase classname="Container getItemsFrom Bounds should include childrens children" name="Container getItemsFrom Bounds should include childrens children" time="0">
    </testcase>
    <testcase classname="Container getItemsFrom Bounds should return empty result if no collision is detected" name="Container getItemsFrom Bounds should return empty result if no collision is detected" time="0">
    </testcase>
    <testcase classname="Container getItemsFrom Bounds should handle polygon as input shape" name="Container getItemsFrom Bounds should handle polygon as input shape" time="0.001">
    </testcase>
    <testcase classname="Container getItemsFrom FrontChild should return the first colliding child node" name="Container getItemsFrom FrontChild should return the first colliding child node" time="0">
    </testcase>
    <testcase classname="Container getItemsFrom FrontChild should include childrens children" name="Container getItemsFrom FrontChild should include childrens children" time="0">
    </testcase>
    <testcase classname="Container getItemsFrom FrontChild should ignore children with no collider" name="Container getItemsFrom FrontChild should ignore children with no collider" time="0">
    </testcase>
    <testcase classname="Container getItemsFrom FrontChild should return empty result if there are no children" name="Container getItemsFrom FrontChild should return empty result if there are no children" time="0">
    </testcase>
    <testcase classname="Container getItemsFrom Default collider should return the all colliding child nodes" name="Container getItemsFrom Default collider should return the all colliding child nodes" time="0">
    </testcase>
    <testcase classname="Container getItemsFrom Default collider should include childrens children" name="Container getItemsFrom Default collider should include childrens children" time="0">
    </testcase>
    <testcase classname="Container getItemsFrom Default collider should return ignore children with no collider" name="Container getItemsFrom Default collider should return ignore children with no collider" time="0">
    </testcase>
    <testcase classname="Container getItemsFrom Default collider should return empty result if there are no children" name="Container getItemsFrom Default collider should return empty result if there are no children" time="0">
    </testcase>
    <testcase classname="Container getItemsFrom Default collider should return empty result if there are no colliding children" name="Container getItemsFrom Default collider should return empty result if there are no colliding children" time="0">
    </testcase>
    <testcase classname="Container getItemsFrom Custom collider should return the colliding container" name="Container getItemsFrom Custom collider should return the colliding container" time="0">
    </testcase>
    <testcase classname="Container getItemsFrom Custom collider should return the colliding container if child collider also matches" name="Container getItemsFrom Custom collider should return the colliding container if child collider also matches" time="0">
    </testcase>
    <testcase classname="Container getItemsFrom Custom collider should not collide if custom collider doesnt but child collider does" name="Container getItemsFrom Custom collider should not collide if custom collider doesnt but child collider does" time="0.001">
    </testcase>
    <testcase classname="Container getItemsFrom Custom collider should return empty result if no collision is detected" name="Container getItemsFrom Custom collider should return empty result if no collision is detected" time="0">
    </testcase>
  </testsuite>
  <testsuite name="transposer" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.244" tests="5">
    <testcase classname="transposer should return correct opposite keys" name="transposer should return correct opposite keys" time="0">
    </testcase>
    <testcase classname="transposer should return correct coordinates" name="transposer should return correct coordinates" time="0">
    </testcase>
    <testcase classname="transposer should handle basic pushing correctly" name="transposer should handle basic pushing correctly" time="0">
    </testcase>
    <testcase classname="transposer should export the expected objects in horizontal mode" name="transposer should export the expected objects in horizontal mode" time="0.001">
    </testcase>
    <testcase classname="transposer should export the expected objects in flipXY mode" name="transposer should export the expected objects in flipXY mode" time="0">
    </testcase>
  </testsuite>
  <testsuite name="TreeNode" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.248" tests="18">
    <testcase classname="TreeNode upon instantiation should have no parent" name="TreeNode upon instantiation should have no parent" time="0">
    </testcase>
    <testcase classname="TreeNode upon instantiation should have no children" name="TreeNode upon instantiation should have no children" time="0.001">
    </testcase>
    <testcase classname="TreeNode #addChild general should have the right parent" name="TreeNode #addChild general should have the right parent" time="0">
    </testcase>
    <testcase classname="TreeNode #addChild general should not be possible to add anything else but a Node as child" name="TreeNode #addChild general should not be possible to add anything else but a Node as child" time="0">
    </testcase>
    <testcase classname="TreeNode #addChild relatives - parents none" name="TreeNode #addChild relatives - parents none" time="0">
    </testcase>
    <testcase classname="TreeNode #addChild relatives - parents parent" name="TreeNode #addChild relatives - parents parent" time="0">
    </testcase>
    <testcase classname="TreeNode #addChild relatives - ancestors none" name="TreeNode #addChild relatives - ancestors none" time="0">
    </testcase>
    <testcase classname="TreeNode #addChild relatives - ancestors parents" name="TreeNode #addChild relatives - ancestors parents" time="0">
    </testcase>
    <testcase classname="TreeNode #addChild relatives - ancestors grandparents" name="TreeNode #addChild relatives - ancestors grandparents" time="0.001">
    </testcase>
    <testcase classname="TreeNode #addChild for related nodes should not be possible to add itself as a child" name="TreeNode #addChild for related nodes should not be possible to add itself as a child" time="0">
    </testcase>
    <testcase classname="TreeNode #addChild for related nodes should not be possible to add a parent/ancestor as a child" name="TreeNode #addChild for related nodes should not be possible to add a parent/ancestor as a child" time="0">
    </testcase>
    <testcase classname="TreeNode #removeChild after removing child from parent: child node should not have a parent" name="TreeNode #removeChild after removing child from parent: child node should not have a parent" time="0">
    </testcase>
    <testcase classname="TreeNode #removeChild after removing child from parent: child node should not have any ancestors" name="TreeNode #removeChild after removing child from parent: child node should not have any ancestors" time="0">
    </testcase>
    <testcase classname="TreeNode #removeChild after removing child from parent: parent node should have removed node as child" name="TreeNode #removeChild after removing child from parent: parent node should have removed node as child" time="0">
    </testcase>
    <testcase classname="TreeNode #removeChild after removing child from parent: parent node should have one child left" name="TreeNode #removeChild after removing child from parent: parent node should have one child left" time="0">
    </testcase>
    <testcase classname="TreeNode coupling/decoupling adding a child that has a parent to another node: child node should have new parent" name="TreeNode coupling/decoupling adding a child that has a parent to another node: child node should have new parent" time="0">
    </testcase>
    <testcase classname="TreeNode coupling/decoupling adding a child that has a parent to another node: old parent node should not have old child as child any longer" name="TreeNode coupling/decoupling adding a child that has a parent to another node: old parent node should not have old child as child any longer" time="0">
    </testcase>
    <testcase classname="TreeNode coupling/decoupling adding a child that has a parent to another node: new parent node should have newly added child as child" name="TreeNode coupling/decoupling adding a child that has a parent to another node: new parent node should have newly added child as child" time="0">
    </testcase>
  </testsuite>
  <testsuite name="get-value" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.232" tests="5">
    <testcase classname="get-value should return fallback value if object is undefined" name="get-value should return fallback value if object is undefined" time="0">
    </testcase>
    <testcase classname="get-value should return fallback value if reference is undefined" name="get-value should return fallback value if reference is undefined" time="0">
    </testcase>
    <testcase classname="get-value should get correct values from first level" name="get-value should get correct values from first level" time="0.001">
    </testcase>
    <testcase classname="get-value should get correct values from second level" name="get-value should get correct values from second level" time="0">
    </testcase>
    <testcase classname="get-value should get correct values from third level" name="get-value should get correct values from third level" time="0">
    </testcase>
  </testsuite>
  <testsuite name="rect" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.238" tests="8">
    <testcase classname="rect render should fire beginPath" name="rect render should fire beginPath" time="0.001">
    </testcase>
    <testcase classname="rect render should fire rect with correct arguments" name="rect render should fire rect with correct arguments" time="0">
    </testcase>
    <testcase classname="rect render should not fire fill if fill condition is falsy" name="rect render should not fire fill if fill condition is falsy" time="0.001">
    </testcase>
    <testcase classname="rect render should fire fill if fill condition is truthy" name="rect render should fire fill if fill condition is truthy" time="0">
    </testcase>
    <testcase classname="rect render should not fire stroke if stroke condition is falsy" name="rect render should not fire stroke if stroke condition is falsy" time="0.001">
    </testcase>
    <testcase classname="rect render should fire stroke if stroke condition is truthy" name="rect render should fire stroke if stroke condition is truthy" time="0">
    </testcase>
    <testcase classname="rect render should fire methods in correct order" name="rect render should fire methods in correct order" time="0">
    </testcase>
    <testcase classname="rect render rounded rect should call context methods in correct order and with correct arguments" name="rect render rounded rect should call context methods in correct order and with correct arguments" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="box resolver" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.244" tests="1">
    <testcase classname="box resolver complexResolver should resolve compelex settings objects correctly" name="box resolver complexResolver should resolve compelex settings objects correctly" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="component-collection" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.246" tests="5">
    <testcase classname="component-collection layout should layout components" name="component-collection layout should layout components" time="0.001">
    </testcase>
    <testcase classname="component-collection layout should hide children of hidden components" name="component-collection layout should hide children of hidden components" time="0">
    </testcase>
    <testcase classname="component-collection update should apply transform when transform function is available" name="component-collection update should apply transform when transform function is available" time="0.001">
    </testcase>
    <testcase classname="component-collection update should not update settings if there is no component with rendererSettings" name="component-collection update should not update settings if there is no component with rendererSettings" time="0">
    </testcase>
    <testcase classname="component-collection update should not update settings if there is no component with rendererSettings" name="component-collection update should not update settings if there is no component with rendererSettings" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Transform resolver" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.222" tests="21">
    <testcase classname="Transform resolver Notations should support scientific exponent notation" name="Transform resolver Notations should support scientific exponent notation" time="0">
    </testcase>
    <testcase classname="Transform resolver Notations should support fractional-constant notation" name="Transform resolver Notations should support fractional-constant notation" time="0.001">
    </testcase>
    <testcase classname="Transform resolver Notations should support x/- sign notation" name="Transform resolver Notations should support x/- sign notation" time="0">
    </testcase>
    <testcase classname="Transform resolver Parameter format should support comma seperated values" name="Transform resolver Parameter format should support comma seperated values" time="0">
    </testcase>
    <testcase classname="Transform resolver Parameter format should support space seperated values" name="Transform resolver Parameter format should support space seperated values" time="0">
    </testcase>
    <testcase classname="Transform resolver Parameter format should handle multiple spaces between parameters" name="Transform resolver Parameter format should handle multiple spaces between parameters" time="0">
    </testcase>
    <testcase classname="Transform resolver Parameter format should handle multiple tabs between parameters" name="Transform resolver Parameter format should handle multiple tabs between parameters" time="0.001">
    </testcase>
    <testcase classname="Transform resolver Transforms Translate should support translate" name="Transform resolver Transforms Translate should support translate" time="0">
    </testcase>
    <testcase classname="Transform resolver Transforms Translate should translate y to zero if parameter is omitted" name="Transform resolver Transforms Translate should translate y to zero if parameter is omitted" time="0">
    </testcase>
    <testcase classname="Transform resolver Transforms Translate should not translate if parameters are omitted" name="Transform resolver Transforms Translate should not translate if parameters are omitted" time="0">
    </testcase>
    <testcase classname="Transform resolver Transforms Scale should support scale" name="Transform resolver Transforms Scale should support scale" time="0">
    </testcase>
    <testcase classname="Transform resolver Transforms Scale should scale y to x if y parameter is omitted" name="Transform resolver Transforms Scale should scale y to x if y parameter is omitted" time="0">
    </testcase>
    <testcase classname="Transform resolver Transforms Scale should not scale if parameters are omitted" name="Transform resolver Transforms Scale should not scale if parameters are omitted" time="0.001">
    </testcase>
    <testcase classname="Transform resolver Transforms Rotate should support rotate" name="Transform resolver Transforms Rotate should support rotate" time="0">
    </testcase>
    <testcase classname="Transform resolver Transforms Rotate should allow optional parameters x and y" name="Transform resolver Transforms Rotate should allow optional parameters x and y" time="0">
    </testcase>
    <testcase classname="Transform resolver Transforms Rotate should not apply rotation if x or y is omitted" name="Transform resolver Transforms Rotate should not apply rotation if x or y is omitted" time="0">
    </testcase>
    <testcase classname="Transform resolver Transforms Rotate should not rotate if parameters are omitted" name="Transform resolver Transforms Rotate should not rotate if parameters are omitted" time="0">
    </testcase>
    <testcase classname="Transform resolver Transforms Matrix should support matrix" name="Transform resolver Transforms Matrix should support matrix" time="0">
    </testcase>
    <testcase classname="Transform resolver Transforms Matrix should not apply transform if a parameter is omitted" name="Transform resolver Transforms Matrix should not apply transform if a parameter is omitted" time="0.001">
    </testcase>
    <testcase classname="Transform resolver Transforms Matrix should not apply transform if parameters is omitted" name="Transform resolver Transforms Matrix should not apply transform if parameters is omitted" time="0">
    </testcase>
    <testcase classname="Transform resolver Transforms Stack transform operations should support stacking transform operations" name="Transform resolver Transforms Stack transform operations should support stacking transform operations" time="0">
    </testcase>
  </testsuite>
  <testsuite name="labeling - rows" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.228" tests="10">
    <testcase classname="labeling - rows rows strategy should support rects" name="labeling - rows rows strategy should support rects" time="0.001">
    </testcase>
    <testcase classname="labeling - rows rows strategy should support circles" name="labeling - rows rows strategy should support circles" time="0">
    </testcase>
    <testcase classname="labeling - rows rows strategy should support &quot;circle&quot; pie slice " name="labeling - rows rows strategy should support &quot;circle&quot; pie slice " time="0.001">
    </testcase>
    <testcase classname="labeling - rows rows strategy should not support pie slice that are not a &quot;circle&quot;" name="labeling - rows rows strategy should not support pie slice that are not a &quot;circle&quot;" time="0">
    </testcase>
    <testcase classname="labeling - rows rows strategy should stack labels" name="labeling - rows rows strategy should stack labels" time="0.001">
    </testcase>
    <testcase classname="labeling - rows rows strategy should cut labels if there are to may to fit" name="labeling - rows rows strategy should cut labels if there are to may to fit" time="0">
    </testcase>
    <testcase classname="labeling - rows rows strategy should precalculate ellipsed value" name="labeling - rows rows strategy should precalculate ellipsed value" time="0">
    </testcase>
    <testcase classname="labeling - rows rows strategy should not include labels that are ellipsed to the ellipsis only" name="labeling - rows rows strategy should not include labels that are ellipsed to the ellipsis only" time="0">
    </testcase>
    <testcase classname="labeling - rows rows strategy should link data" name="labeling - rows rows strategy should link data" time="0">
    </testcase>
    <testcase classname="labeling - rows rows strategy should keep empty labels" name="labeling - rows rows strategy should keep empty labels" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="memoize" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.214" tests="6">
    <testcase classname="memoize should cache return value" name="memoize should cache return value" time="0.001">
    </testcase>
    <testcase classname="memoize should return cached value" name="memoize should return cached value" time="0">
    </testcase>
    <testcase classname="memoize should cache all stringifiable values" name="memoize should cache all stringifiable values" time="0">
    </testcase>
    <testcase classname="memoize should handle multiple arguments" name="memoize should handle multiple arguments" time="0.001">
    </testcase>
    <testcase classname="memoize should behave as a first-in-first-out cache when max size is reached" name="memoize should behave as a first-in-first-out cache when max size is reached" time="0">
    </testcase>
    <testcase classname="memoize should use cache key from optional toKey function" name="memoize should use cache key from optional toKey function" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Stage" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.31" tests="13">
    <testcase classname="Stage getItemsFrom Point should handle a call when there are no children" name="Stage getItemsFrom Point should handle a call when there are no children" time="0.001">
    </testcase>
    <testcase classname="Stage getItemsFrom Point should return an empty array when there are no hits" name="Stage getItemsFrom Point should return an empty array when there are no hits" time="0">
    </testcase>
    <testcase classname="Stage getItemsFrom Point should return child objects that intersect with a point" name="Stage getItemsFrom Point should return child objects that intersect with a point" time="0.001">
    </testcase>
    <testcase classname="Stage getItemsFrom Point should travese child objects children and return objects that intersect with a point" name="Stage getItemsFrom Point should travese child objects children and return objects that intersect with a point" time="0">
    </testcase>
    <testcase classname="Stage getItemsFrom Point should transform the input point based on the dpi ratio" name="Stage getItemsFrom Point should transform the input point based on the dpi ratio" time="0">
    </testcase>
    <testcase classname="Stage getItemsFrom Line should handle a call when there are no children" name="Stage getItemsFrom Line should handle a call when there are no children" time="0">
    </testcase>
    <testcase classname="Stage getItemsFrom Line should return an empty array when there are no hits" name="Stage getItemsFrom Line should return an empty array when there are no hits" time="0.001">
    </testcase>
    <testcase classname="Stage getItemsFrom Line should return child objects that intersect with a line" name="Stage getItemsFrom Line should return child objects that intersect with a line" time="0">
    </testcase>
    <testcase classname="Stage getItemsFrom Line should transform the input line based on the dpi ratio" name="Stage getItemsFrom Line should transform the input line based on the dpi ratio" time="0">
    </testcase>
    <testcase classname="Stage getItemsFrom Rect should handle a call when there are no children" name="Stage getItemsFrom Rect should handle a call when there are no children" time="0">
    </testcase>
    <testcase classname="Stage getItemsFrom Rect should return an empty array when there are no hits" name="Stage getItemsFrom Rect should return an empty array when there are no hits" time="0">
    </testcase>
    <testcase classname="Stage getItemsFrom Rect should return child objects that intersect with a rect" name="Stage getItemsFrom Rect should return child objects that intersect with a rect" time="0.001">
    </testcase>
    <testcase classname="Stage getItemsFrom Rect should transform the input line based on the dpi ratio" name="Stage getItemsFrom Rect should transform the input line based on the dpi ratio" time="0">
    </testcase>
  </testsuite>
  <testsuite name="findCommonPointsFromTwoLines" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.246" tests="1">
    <testcase classname="findCommonPointsFromTwoLines should return correct common points" name="findCommonPointsFromTwoLines should return correct common points" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Axis Node Builder" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.225" tests="6">
    <testcase classname="Axis Node Builder filterOverlappingLabels 3 vertical nodes, upper node collide with middle node" name="Axis Node Builder filterOverlappingLabels 3 vertical nodes, upper node collide with middle node" time="0">
    </testcase>
    <testcase classname="Axis Node Builder filterOverlappingLabels 3 vertical nodes, upper node collide with middle node and lower node" name="Axis Node Builder filterOverlappingLabels 3 vertical nodes, upper node collide with middle node and lower node" time="0">
    </testcase>
    <testcase classname="Axis Node Builder filterOverlappingLabels 2 vertical nodes, upper node collide with lower node" name="Axis Node Builder filterOverlappingLabels 2 vertical nodes, upper node collide with lower node" time="0.001">
    </testcase>
    <testcase classname="Axis Node Builder filterOverlappingLabels 1 vertical node" name="Axis Node Builder filterOverlappingLabels 1 vertical node" time="0">
    </testcase>
    <testcase classname="Axis Node Builder filterOverlappingLabels multiple vertical nodes colliding" name="Axis Node Builder filterOverlappingLabels multiple vertical nodes colliding" time="0">
    </testcase>
    <testcase classname="Axis Node Builder filterOverlappingLabels multiple vertical nodes, none colliding" name="Axis Node Builder filterOverlappingLabels multiple vertical nodes, none colliding" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Axis Arc Line Node" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.228" tests="1">
    <testcase classname="Axis Arc Line Node Arc Structure Properties" name="Axis Arc Line Node Arc Structure Properties" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="text-metrics" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.232" tests="18">
    <testcase classname="text-metrics measureText should return correct result" name="text-metrics measureText should return correct result" time="0.001">
    </testcase>
    <testcase classname="text-metrics measureText should set the correct font before firing measureText" name="text-metrics measureText should set the correct font before firing measureText" time="0">
    </testcase>
    <testcase classname="text-metrics measureText should fire measureText once with correct arguments" name="text-metrics measureText should fire measureText once with correct arguments" time="0">
    </testcase>
    <testcase classname="text-metrics measureText should reuse the previously created canvas element" name="text-metrics measureText should reuse the previously created canvas element" time="0">
    </testcase>
    <testcase classname="text-metrics measureText should reuse past width calculations if arguments match previous use case" name="text-metrics measureText should reuse past width calculations if arguments match previous use case" time="0">
    </testcase>
    <testcase classname="text-metrics measureText should not reuse past width calculations if arguments does not match previous use case" name="text-metrics measureText should not reuse past width calculations if arguments does not match previous use case" time="0.001">
    </testcase>
    <testcase classname="text-metrics textBounds should handle different properties no line-break should return correct bounds" name="text-metrics textBounds should handle different properties no line-break should return correct bounds" time="0">
    </testcase>
    <testcase classname="text-metrics textBounds should handle different properties no line-break with anchor middle" name="text-metrics textBounds should handle different properties no line-break with anchor middle" time="0">
    </testcase>
    <testcase classname="text-metrics textBounds should handle different properties no line-break with anchor end" name="text-metrics textBounds should handle different properties no line-break with anchor end" time="0">
    </testcase>
    <testcase classname="text-metrics textBounds should handle different properties no line-break without x and y" name="text-metrics textBounds should handle different properties no line-break without x and y" time="0">
    </testcase>
    <testcase classname="text-metrics textBounds should handle different properties no line-break with dx and dy" name="text-metrics textBounds should handle different properties no line-break with dx and dy" time="0">
    </testcase>
    <testcase classname="text-metrics textBounds should handle different properties no line-break with fontSize and fontFamily" name="text-metrics textBounds should handle different properties no line-break with fontSize and fontFamily" time="0">
    </testcase>
    <testcase classname="text-metrics textBounds should handle different properties no line-break with font-size and font-family" name="text-metrics textBounds should handle different properties no line-break with font-size and font-family" time="0">
    </testcase>
    <testcase classname="text-metrics textBounds should handle different properties no line-break with baseline" name="text-metrics textBounds should handle different properties no line-break with baseline" time="0">
    </testcase>
    <testcase classname="text-metrics textBounds should handle different properties wordBreak break-all should not compute bounds based on line break given no maxWidth is set" name="text-metrics textBounds should handle different properties wordBreak break-all should not compute bounds based on line break given no maxWidth is set" time="0.001">
    </testcase>
    <testcase classname="text-metrics textBounds should handle different properties wordBreak break-all should compute bounds based on line break given all conditions are meet" name="text-metrics textBounds should handle different properties wordBreak break-all should compute bounds based on line break given all conditions are meet" time="0">
    </testcase>
    <testcase classname="text-metrics textBounds should handle different properties wordBreak break-all should require text width to be more than node maxWidth" name="text-metrics textBounds should handle different properties wordBreak break-all should require text width to be more than node maxWidth" time="0">
    </testcase>
    <testcase classname="text-metrics textBounds should handle different properties wordBreak break-all should compute bounds based on line break given node text contains a line break character" name="text-metrics textBounds should handle different properties wordBreak break-all should compute bounds based on line break given node text contains a line break character" time="0">
    </testcase>
  </testsuite>
  <testsuite name="GeometryCollection" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.232" tests="8">
    <testcase classname="GeometryCollection Constructor should set correct default values" name="GeometryCollection Constructor should set correct default values" time="0">
    </testcase>
    <testcase classname="GeometryCollection Constructor should accept an array of geometries" name="GeometryCollection Constructor should accept an array of geometries" time="0.001">
    </testcase>
    <testcase classname="GeometryCollection Set should accept an array of geometries" name="GeometryCollection Set should accept an array of geometries" time="0">
    </testcase>
    <testcase classname="GeometryCollection Intersection containsPoint - should call geometries until match is found" name="GeometryCollection Intersection containsPoint - should call geometries until match is found" time="0.001">
    </testcase>
    <testcase classname="GeometryCollection Intersection intersectsRect - should call geometries until match is found" name="GeometryCollection Intersection intersectsRect - should call geometries until match is found" time="0">
    </testcase>
    <testcase classname="GeometryCollection Intersection intersectsLine - should call geometries until match is found" name="GeometryCollection Intersection intersectsLine - should call geometries until match is found" time="0">
    </testcase>
    <testcase classname="GeometryCollection Intersection intersectsCircle - should call geometries until match is found" name="GeometryCollection Intersection intersectsCircle - should call geometries until match is found" time="0.001">
    </testcase>
    <testcase classname="GeometryCollection Intersection intersectsPolygon - should call geometries until match is found" name="GeometryCollection Intersection intersectsPolygon - should call geometries until match is found" time="0">
    </testcase>
  </testsuite>
  <testsuite name="straight mapping" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.23" tests="9">
    <testcase classname="straight mapping should return dim field values based on default field accessor" name="straight mapping should return dim field values based on default field accessor" time="0">
    </testcase>
    <testcase classname="straight mapping should return joined set when array of fields is used" name="straight mapping should return joined set when array of fields is used" time="0.001">
    </testcase>
    <testcase classname="straight mapping should support custom accessor" name="straight mapping should support custom accessor" time="0">
    </testcase>
    <testcase classname="straight mapping should return mapped properties from same field" name="straight mapping should return mapped properties from same field" time="0">
    </testcase>
    <testcase classname="straight mapping should return primitive values" name="straight mapping should return primitive values" time="0">
    </testcase>
    <testcase classname="straight mapping should return mapped properties from other fields" name="straight mapping should return mapped properties from other fields" time="0">
    </testcase>
    <testcase classname="straight mapping should filter values on main field" name="straight mapping should filter values on main field" time="0">
    </testcase>
    <testcase classname="straight mapping should return collected values" name="straight mapping should return collected values" time="0.001">
    </testcase>
    <testcase classname="straight mapping should return reduced values" name="straight mapping should return reduced values" time="0">
    </testcase>
  </testsuite>
  <testsuite name="String Tokenizer" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.227" tests="11">
    <testcase classname="String Tokenizer should tokenize input string" name="String Tokenizer should tokenize input string" time="0.001">
    </testcase>
    <testcase classname="String Tokenizer Error handling should handle non-string types" name="String Tokenizer Error handling should handle non-string types" time="0">
    </testcase>
    <testcase classname="String Tokenizer Error handling should handle no arguments" name="String Tokenizer Error handling should handle no arguments" time="0">
    </testcase>
    <testcase classname="String Tokenizer Parameters should accept a string as seperator" name="String Tokenizer Parameters should accept a string as seperator" time="0">
    </testcase>
    <testcase classname="String Tokenizer Parameters should accept a regex as seperator" name="String Tokenizer Parameters should accept a regex as seperator" time="0">
    </testcase>
    <testcase classname="String Tokenizer Parameters should iterator from end to start of string" name="String Tokenizer Parameters should iterator from end to start of string" time="0">
    </testcase>
    <testcase classname="String Tokenizer Parameters should trigger mandatory break opportunity if mandatory break identifier resolves to true" name="String Tokenizer Parameters should trigger mandatory break opportunity if mandatory break identifier resolves to true" time="0">
    </testcase>
    <testcase classname="String Tokenizer Parameters should trigger noBreak opportunity if any noBreak identifier resolves to true" name="String Tokenizer Parameters should trigger noBreak opportunity if any noBreak identifier resolves to true" time="0">
    </testcase>
    <testcase classname="String Tokenizer Parameters should not trigger noBreak opportunity if mandatory identifier resolves to true" name="String Tokenizer Parameters should not trigger noBreak opportunity if mandatory identifier resolves to true" time="0">
    </testcase>
    <testcase classname="String Tokenizer Parameters should trigger suppress flag if any suppress identifier resolves to true" name="String Tokenizer Parameters should trigger suppress flag if any suppress identifier resolves to true" time="0.001">
    </testcase>
    <testcase classname="String Tokenizer Parameters should accept a custom text metrics function" name="String Tokenizer Parameters should accept a custom text metrics function" time="0">
    </testcase>
  </testsuite>
  <testsuite name="set-value" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.219" tests="5">
    <testcase classname="set-value should be able to handle undefined object" name="set-value should be able to handle undefined object" time="0">
    </testcase>
    <testcase classname="set-value should not mutate object if reference is undefined" name="set-value should not mutate object if reference is undefined" time="0">
    </testcase>
    <testcase classname="set-value should set correct values on first level" name="set-value should set correct values on first level" time="0.001">
    </testcase>
    <testcase classname="set-value should set correct values on second level" name="set-value should set correct values on second level" time="0">
    </testcase>
    <testcase classname="set-value should set correct values on third level" name="set-value should set correct values on third level" time="0">
    </testcase>
  </testsuite>
  <testsuite name="hammer interaction mixin" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.229" tests="9">
    <testcase classname="hammer interaction mixin should add " name="hammer interaction mixin should add " time="0">
    </testcase>
    <testcase classname="hammer interaction mixin should not add events to element if enabled is false" name="hammer interaction mixin should not add events to element if enabled is false" time="0">
    </testcase>
    <testcase classname="hammer interaction mixin should not add events to element if gesture is disabled" name="hammer interaction mixin should not add events to element if gesture is disabled" time="0">
    </testcase>
    <testcase classname="hammer interaction mixin should remove event listeners when off is called" name="hammer interaction mixin should remove event listeners when off is called" time="0.001">
    </testcase>
    <testcase classname="hammer interaction mixin should add event listeners again when on is called" name="hammer interaction mixin should add event listeners again when on is called" time="0">
    </testcase>
    <testcase classname="hammer interaction mixin should not add event listeners when state is off" name="hammer interaction mixin should not add event listeners when state is off" time="0">
    </testcase>
    <testcase classname="hammer interaction mixin should change hammer events when set is called with new props" name="hammer interaction mixin should change hammer events when set is called with new props" time="0">
    </testcase>
    <testcase classname="hammer interaction mixin remove all event listeners on destroy" name="hammer interaction mixin remove all event listeners on destroy" time="0">
    </testcase>
    <testcase classname="hammer interaction mixin set recognizewith and requirefailure" name="hammer interaction mixin set recognizewith and requirefailure" time="0">
    </testcase>
  </testsuite>
  <testsuite name="legend-item-renderer" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.227" tests="21">
    <testcase classname="legend-item-renderer itemize should filter out hidden items" name="legend-item-renderer itemize should filter out hidden items" time="0">
    </testcase>
    <testcase classname="legend-item-renderer itemize should return items" name="legend-item-renderer itemize should return items" time="0.001">
    </testcase>
    <testcase classname="legend-item-renderer itemize should calculate absolute metrics" name="legend-item-renderer itemize should calculate absolute metrics" time="0">
    </testcase>
    <testcase classname="legend-item-renderer extent should calculate when vertical" name="legend-item-renderer extent should calculate when vertical" time="0">
    </testcase>
    <testcase classname="legend-item-renderer extent should calculate when horizontal" name="legend-item-renderer extent should calculate when horizontal" time="0">
    </testcase>
    <testcase classname="legend-item-renderer spread should calculate when vertical" name="legend-item-renderer spread should calculate when vertical" time="0">
    </testcase>
    <testcase classname="legend-item-renderer spread should calculate when horizontal" name="legend-item-renderer spread should calculate when horizontal" time="0">
    </testcase>
    <testcase classname="legend-item-renderer parallelize should fill up allowed space" name="legend-item-renderer parallelize should fill up allowed space" time="0">
    </testcase>
    <testcase classname="legend-item-renderer parallelize should not overflow allowd spread" name="legend-item-renderer parallelize should not overflow allowd spread" time="0">
    </testcase>
    <testcase classname="legend-item-renderer parallelize horizontal layout should not overflow allowed spread of two rows" name="legend-item-renderer parallelize horizontal layout should not overflow allowed spread of two rows" time="0">
    </testcase>
    <testcase classname="legend-item-renderer parallelize horizontal layout should not overflow allowed spread of one row" name="legend-item-renderer parallelize horizontal layout should not overflow allowed spread of one row" time="0">
    </testcase>
    <testcase classname="legend-item-renderer getItemsToRender vertical should position items in two columns" name="legend-item-renderer getItemsToRender vertical should position items in two columns" time="0">
    </testcase>
    <testcase classname="legend-item-renderer getItemsToRender horizontal should position items in two rows" name="legend-item-renderer getItemsToRender horizontal should position items in two rows" time="0.001">
    </testcase>
    <testcase classname="legend-item-renderer createRenderItem create" name="legend-item-renderer createRenderItem create" time="0">
    </testcase>
    <testcase classname="legend-item-renderer offset should return correct offset after itemize is executed" name="legend-item-renderer offset should return correct offset after itemize is executed" time="0">
    </testcase>
    <testcase classname="legend-item-renderer offset should return correct offset after itemize and getItemsToRender are executed and overflow = 0" name="legend-item-renderer offset should return correct offset after itemize and getItemsToRender are executed and overflow = 0" time="0.001">
    </testcase>
    <testcase classname="legend-item-renderer offset should return correct offset after itemize and getItemsToRender are executed and overflow &lt; offset" name="legend-item-renderer offset should return correct offset after itemize and getItemsToRender are executed and overflow &lt; offset" time="0">
    </testcase>
    <testcase classname="legend-item-renderer offset should return correct offset after itemize and getItemsToRender are executed and overflow &gt; offset" name="legend-item-renderer offset should return correct offset after itemize and getItemsToRender are executed and overflow &gt; offset" time="0">
    </testcase>
    <testcase classname="legend-item-renderer offset should return correct offset after itemize and getItemsToRender and then itemize are executed" name="legend-item-renderer offset should return correct offset after itemize and getItemsToRender and then itemize are executed" time="0">
    </testcase>
    <testcase classname="legend-item-renderer offset should return correct offset after itemize and getItemsToRender and then itemize and getItemsToRender are executed and overflow &lt; offset" name="legend-item-renderer offset should return correct offset after itemize and getItemsToRender and then itemize and getItemsToRender are executed and overflow &lt; offset" time="0">
    </testcase>
    <testcase classname="legend-item-renderer offset should return correct offset after itemize and getItemsToRender and then itemize and getItemsToRender are executed and overflow &gt; offset" name="legend-item-renderer offset should return correct offset after itemize and getItemsToRender and then itemize and getItemsToRender are executed and overflow &gt; offset" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Context" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.226" tests="3">
    <testcase classname="Context should handle inheritance correctly" name="Context should handle inheritance correctly" time="0">
    </testcase>
    <testcase classname="Context should handle inheritance with pre-made item correctly" name="Context should handle inheritance with pre-made item correctly" time="0">
    </testcase>
    <testcase classname="Context should handle overwriting values correctly" name="Context should handle overwriting values correctly" time="0">
    </testcase>
  </testsuite>
  <testsuite name="GeoRect" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.23" tests="38">
    <testcase classname="GeoRect constructor should set correct default values when no arguments passed" name="GeoRect constructor should set correct default values when no arguments passed" time="0">
    </testcase>
    <testcase classname="GeoRect constructor should set the correct values when arguments passed" name="GeoRect constructor should set the correct values when arguments passed" time="0">
    </testcase>
    <testcase classname="GeoRect constructor should handle negative width correctly" name="GeoRect constructor should handle negative width correctly" time="0">
    </testcase>
    <testcase classname="GeoRect constructor should handle negative height correctly" name="GeoRect constructor should handle negative height correctly" time="0">
    </testcase>
    <testcase classname="GeoRect set should set the correct values" name="GeoRect set should set the correct values" time="0">
    </testcase>
    <testcase classname="GeoRect set should handle negative width correctly" name="GeoRect set should handle negative width correctly" time="0.001">
    </testcase>
    <testcase classname="GeoRect set should handle negative height correctly" name="GeoRect set should handle negative height correctly" time="0">
    </testcase>
    <testcase classname="GeoRect set should handle no arguments" name="GeoRect set should handle no arguments" time="0">
    </testcase>
    <testcase classname="GeoRect points should return the correct points" name="GeoRect points should return the correct points" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Point should intersect if point is within the circumference" name="GeoRect Intersection Point should intersect if point is within the circumference" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Point should intersect if point is on the circumference" name="GeoRect Intersection Point should intersect if point is on the circumference" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Point should not intersect if point is outside the circumference" name="GeoRect Intersection Point should not intersect if point is outside the circumference" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Point should not intersect if the width is zero" name="GeoRect Intersection Point should not intersect if the width is zero" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Point should not intersect if the height is zero" name="GeoRect Intersection Point should not intersect if the height is zero" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Rect should intersect if circumferences are crossing" name="GeoRect Intersection Rect should intersect if circumferences are crossing" time="0.001">
    </testcase>
    <testcase classname="GeoRect Intersection Rect should intersect if circumferences are touching" name="GeoRect Intersection Rect should intersect if circumferences are touching" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Rect should intersect if target rect is contained within the circumference" name="GeoRect Intersection Rect should intersect if target rect is contained within the circumference" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Rect should not intersect if circumferences are not crossing" name="GeoRect Intersection Rect should not intersect if circumferences are not crossing" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Rect should not intersect if the width is zero" name="GeoRect Intersection Rect should not intersect if the width is zero" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Rect should not intersect if the height is zero" name="GeoRect Intersection Rect should not intersect if the height is zero" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Line should intersect if a parrallel vertical line is crossing the circumference" name="GeoRect Intersection Line should intersect if a parrallel vertical line is crossing the circumference" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Line should intersect if a parrallel horizontal line is crossing the circumference" name="GeoRect Intersection Line should intersect if a parrallel horizontal line is crossing the circumference" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Line should intersect if diagonal line is crossing the circumference" name="GeoRect Intersection Line should intersect if diagonal line is crossing the circumference" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Line should intersect if line is inside the circumference" name="GeoRect Intersection Line should intersect if line is inside the circumference" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Line should intersect if a line point is inside the circumference" name="GeoRect Intersection Line should intersect if a line point is inside the circumference" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Line should intersect if a line is on the circumference" name="GeoRect Intersection Line should intersect if a line is on the circumference" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Line should intersect if a line start point is on the circumference and points outwards" name="GeoRect Intersection Line should intersect if a line start point is on the circumference and points outwards" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Line should intersect if a line end point is on the circumference and points outwards" name="GeoRect Intersection Line should intersect if a line end point is on the circumference and points outwards" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Line should not intersect if the width is zero" name="GeoRect Intersection Line should not intersect if the width is zero" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Line should not intersect if the height is zero" name="GeoRect Intersection Line should not intersect if the height is zero" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Circle should intersect if circle center is within the circumference" name="GeoRect Intersection Circle should intersect if circle center is within the circumference" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Circle should intersect if circle circumference is on the rect circumference" name="GeoRect Intersection Circle should intersect if circle circumference is on the rect circumference" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Circle should intersect if circle circumference is inside the rect circumference" name="GeoRect Intersection Circle should intersect if circle circumference is inside the rect circumference" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Circle should intersect if circle circumference is inside the rect circumference while circle is proportional with a rect bound" name="GeoRect Intersection Circle should intersect if circle circumference is inside the rect circumference while circle is proportional with a rect bound" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Circle should not intersect if point is outside the circumference" name="GeoRect Intersection Circle should not intersect if point is outside the circumference" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Circle should not intersect if the width is zero" name="GeoRect Intersection Circle should not intersect if the width is zero" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Circle should not intersect if the height is zero" name="GeoRect Intersection Circle should not intersect if the height is zero" time="0">
    </testcase>
    <testcase classname="GeoRect Intersection Circle should not intersect if the radius is zero" name="GeoRect Intersection Circle should not intersect if the radius is zero" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Ticks" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.225" tests="4">
    <testcase classname="Ticks should produce nice numbers by extending the given value into a multiple of [1, 2, 5, 10]" name="Ticks should produce nice numbers by extending the given value into a multiple of [1, 2, 5, 10]" time="0">
    </testcase>
    <testcase classname="Ticks should produce nice numbers by rounding the given value into a multiple of [1, 2, 5, 10]" name="Ticks should produce nice numbers by rounding the given value into a multiple of [1, 2, 5, 10]" time="0">
    </testcase>
    <testcase classname="Ticks should produce nice ticks" name="Ticks should produce nice ticks" time="0.001">
    </testcase>
    <testcase classname="Ticks should produce nice ticks with negative range" name="Ticks should produce nice ticks with negative range" time="0">
    </testcase>
  </testsuite>
  <testsuite name="GeoLine" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.233" tests="38">
    <testcase classname="GeoLine constructor should set correct default values when no arguments passed" name="GeoLine constructor should set correct default values when no arguments passed" time="0">
    </testcase>
    <testcase classname="GeoLine constructor should set the correct values when arguments passed" name="GeoLine constructor should set the correct values when arguments passed" time="0">
    </testcase>
    <testcase classname="GeoLine set should set the correct values" name="GeoLine set should set the correct values" time="0">
    </testcase>
    <testcase classname="GeoLine set should handle no arguments" name="GeoLine set should handle no arguments" time="0">
    </testcase>
    <testcase classname="GeoLine points should return the correct points" name="GeoLine points should return the correct points" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Point should intersect point on a horizontal line segment" name="GeoLine Intersection Point should intersect point on a horizontal line segment" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Point should intersect point on a vertical line segment" name="GeoLine Intersection Point should intersect point on a vertical line segment" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Point should intersect point on a angled line segment" name="GeoLine Intersection Point should intersect point on a angled line segment" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Point should not intersect point if outside vertical line segment" name="GeoLine Intersection Point should not intersect point if outside vertical line segment" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Point should not intersect point if outside angled line segment" name="GeoLine Intersection Point should not intersect point if outside angled line segment" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Point should intersect point with tolerance on line segment" name="GeoLine Intersection Point should intersect point with tolerance on line segment" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Point should not intersect point if line segment has zero size" name="GeoLine Intersection Point should not intersect point if line segment has zero size" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Line should intersect perpendicular axis-aligned line segments" name="GeoLine Intersection Line should intersect perpendicular axis-aligned line segments" time="0.001">
    </testcase>
    <testcase classname="GeoLine Intersection Line should not intersect perpendicular axis-aligned line segments" name="GeoLine Intersection Line should not intersect perpendicular axis-aligned line segments" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Line should intersect perpendicular non-axis-aligned line segments" name="GeoLine Intersection Line should intersect perpendicular non-axis-aligned line segments" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Line should not intersect perpendicular non-axis-aligned line segments" name="GeoLine Intersection Line should not intersect perpendicular non-axis-aligned line segments" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Line should intersect non-perpendicular non-axis-aligned line segments" name="GeoLine Intersection Line should intersect non-perpendicular non-axis-aligned line segments" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Line should not intersect non-perpendicular non-axis-aligned line segments" name="GeoLine Intersection Line should not intersect non-perpendicular non-axis-aligned line segments" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Line should intersect collinear axis-aligned line segments" name="GeoLine Intersection Line should intersect collinear axis-aligned line segments" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Line should not intersect if any of the line segment has zero size" name="GeoLine Intersection Line should not intersect if any of the line segment has zero size" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Rect should intersect if line is inside rect" name="GeoLine Intersection Rect should intersect if line is inside rect" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Rect should intersect if start or end of line is inside rect" name="GeoLine Intersection Rect should intersect if start or end of line is inside rect" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Rect should intersect if line is collinear with rect circumference" name="GeoLine Intersection Rect should intersect if line is collinear with rect circumference" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Rect should intersect if line is coincident with rect circumference" name="GeoLine Intersection Rect should intersect if line is coincident with rect circumference" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Rect should intersect if line is axis-aligned and crossing rect" name="GeoLine Intersection Rect should intersect if line is axis-aligned and crossing rect" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Rect should intersect if line is non-axis-aligned and crossing rect" name="GeoLine Intersection Rect should intersect if line is non-axis-aligned and crossing rect" time="0.001">
    </testcase>
    <testcase classname="GeoLine Intersection Rect should intersect if line start or end is on rect circumference" name="GeoLine Intersection Rect should intersect if line start or end is on rect circumference" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Rect should not intersect if line outside rect circumference" name="GeoLine Intersection Rect should not intersect if line outside rect circumference" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Rect should not intersect if line segment has zero size" name="GeoLine Intersection Rect should not intersect if line segment has zero size" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Rect should not intersect if rect has zero size" name="GeoLine Intersection Rect should not intersect if rect has zero size" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Circle should intersect a collinear line that start or end inside circle circumference" name="GeoLine Intersection Circle should intersect a collinear line that start or end inside circle circumference" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Circle should intersect a collinear line that crosses the circle circumference" name="GeoLine Intersection Circle should intersect a collinear line that crosses the circle circumference" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Circle should intersect a axis-aligned line that start or end inside circle circumference" name="GeoLine Intersection Circle should intersect a axis-aligned line that start or end inside circle circumference" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Circle should intersect a axis-aligned line that crosses the circle circumference" name="GeoLine Intersection Circle should intersect a axis-aligned line that crosses the circle circumference" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Circle should not intersect a axis-aligned line outside the circle circumference" name="GeoLine Intersection Circle should not intersect a axis-aligned line outside the circle circumference" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Circle should not intersect a collinear line that doesnt not cross or start/end on circle circumference" name="GeoLine Intersection Circle should not intersect a collinear line that doesnt not cross or start/end on circle circumference" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Circle should not intersect if line segment has zero size" name="GeoLine Intersection Circle should not intersect if line segment has zero size" time="0">
    </testcase>
    <testcase classname="GeoLine Intersection Circle should not intersect if circle has zero size" name="GeoLine Intersection Circle should not intersect if circle has zero size" time="0">
    </testcase>
  </testsuite>
  <testsuite name="NarrowPhaseCollision" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.236" tests="8">
    <testcase classname="NarrowPhaseCollision testPolygonLine convex polygon" name="NarrowPhaseCollision testPolygonLine convex polygon" time="0">
    </testcase>
    <testcase classname="NarrowPhaseCollision testPolygonLine concave polygon" name="NarrowPhaseCollision testPolygonLine concave polygon" time="0">
    </testcase>
    <testcase classname="NarrowPhaseCollision testPolygonLine self-Intersecting polygon" name="NarrowPhaseCollision testPolygonLine self-Intersecting polygon" time="0">
    </testcase>
    <testcase classname="NarrowPhaseCollision testPolygonLine to few vertices" name="NarrowPhaseCollision testPolygonLine to few vertices" time="0">
    </testcase>
    <testcase classname="NarrowPhaseCollision testPolygonRect convex polygon" name="NarrowPhaseCollision testPolygonRect convex polygon" time="0">
    </testcase>
    <testcase classname="NarrowPhaseCollision testPolygonRect concave polygon" name="NarrowPhaseCollision testPolygonRect concave polygon" time="0">
    </testcase>
    <testcase classname="NarrowPhaseCollision testPolygonRect self-Intersecting polygon" name="NarrowPhaseCollision testPolygonRect self-Intersecting polygon" time="0">
    </testcase>
    <testcase classname="NarrowPhaseCollision testPolygonRect to few vertices" name="NarrowPhaseCollision testPolygonRect to few vertices" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Polyline" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.237" tests="14">
    <testcase classname="Polyline should omit duplicate points" name="Polyline should omit duplicate points" time="0">
    </testcase>
    <testcase classname="Polyline constructor should set correct default values" name="Polyline constructor should set correct default values" time="0.001">
    </testcase>
    <testcase classname="Polyline constructor should set correct values" name="Polyline constructor should set correct values" time="0">
    </testcase>
    <testcase classname="Polyline set should set correct values" name="Polyline set should set correct values" time="0">
    </testcase>
    <testcase classname="Polyline containsPoint should return true if intersection" name="Polyline containsPoint should return true if intersection" time="0">
    </testcase>
    <testcase classname="Polyline containsPoint should return false if no intersection" name="Polyline containsPoint should return false if no intersection" time="0">
    </testcase>
    <testcase classname="Polyline intersectsCircle should return true if intersection" name="Polyline intersectsCircle should return true if intersection" time="0">
    </testcase>
    <testcase classname="Polyline intersectsCircle should return false if no intersection" name="Polyline intersectsCircle should return false if no intersection" time="0">
    </testcase>
    <testcase classname="Polyline intersectsLine should return true if intersection" name="Polyline intersectsLine should return true if intersection" time="0">
    </testcase>
    <testcase classname="Polyline intersectsLine should return false if no intersection" name="Polyline intersectsLine should return false if no intersection" time="0.001">
    </testcase>
    <testcase classname="Polyline intersectsRect should return true if intersection" name="Polyline intersectsRect should return true if intersection" time="0">
    </testcase>
    <testcase classname="Polyline intersectsRect should return false if no intersection" name="Polyline intersectsRect should return false if no intersection" time="0">
    </testcase>
    <testcase classname="Polyline intersectsPolygon should return true if intersection" name="Polyline intersectsPolygon should return true if intersection" time="0">
    </testcase>
    <testcase classname="Polyline intersectsPolygon should return false if no intersection" name="Polyline intersectsPolygon should return false if no intersection" time="0">
    </testcase>
  </testsuite>
  <testsuite name="GradientItem" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.29" tests="9">
    <testcase classname="GradientItem Constructor should instantiate a new GradientItem" name="GradientItem Constructor should instantiate a new GradientItem" time="0">
    </testcase>
    <testcase classname="GradientItem Constructor should not have a collider by default" name="GradientItem Constructor should not have a collider by default" time="0">
    </testcase>
    <testcase classname="GradientItem Constructor should accept arguments" name="GradientItem Constructor should accept arguments" time="0">
    </testcase>
    <testcase classname="GradientItem Set should handle no arguments" name="GradientItem Set should handle no arguments" time="0">
    </testcase>
    <testcase classname="GradientItem Set should set correct values" name="GradientItem Set should set correct values" time="0">
    </testcase>
    <testcase classname="GradientItem Children should append properly" name="GradientItem Children should append properly" time="0">
    </testcase>
    <testcase classname="GradientItem Children should append multiple properly" name="GradientItem Children should append multiple properly" time="0">
    </testcase>
    <testcase classname="GradientItem Children should remove properly" name="GradientItem Children should remove properly" time="0">
    </testcase>
    <testcase classname="GradientItem Children should remove multiple properly" name="GradientItem Children should remove multiple properly" time="0">
    </testcase>
  </testsuite>
  <testsuite name="range component" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.233" tests="12">
    <testcase classname="range component should render empty when brush is not active" name="range component should render empty when brush is not active" time="0">
    </testcase>
    <testcase classname="range component active ranges should render along vertical direction" name="range component active ranges should render along vertical direction" time="0.001">
    </testcase>
    <testcase classname="range component active ranges should render along horizontal direction" name="range component active ranges should render along horizontal direction" time="0">
    </testcase>
    <testcase classname="range component active ranges should have a default fill of &quot;#ccc&quot;" name="range component active ranges should have a default fill of &quot;#ccc&quot;" time="0.001">
    </testcase>
    <testcase classname="range component active ranges should have a fill of &quot;#f00&quot;" name="range component active ranges should have a fill of &quot;#f00&quot;" time="0">
    </testcase>
    <testcase classname="range component active ranges should have a default opacity of 1" name="range component active ranges should have a default opacity of 1" time="0">
    </testcase>
    <testcase classname="range component active ranges should have an opacity of 0.2" name="range component active ranges should have an opacity of 0.2" time="0.001">
    </testcase>
    <testcase classname="range component life should attach event handlers on brush start, update and end" name="range component life should attach event handlers on brush start, update and end" time="0">
    </testcase>
    <testcase classname="range component life should remove event handlers ondestroy" name="range component life should remove event handlers ondestroy" time="0.001">
    </testcase>
    <testcase classname="range component life should render when brush &quot;start&quot; is triggered" name="range component life should render when brush &quot;start&quot; is triggered" time="0">
    </testcase>
    <testcase classname="range component life should render when brush &quot;update&quot; is triggered" name="range component life should render when brush &quot;update&quot; is triggered" time="0.001">
    </testcase>
    <testcase classname="range component life should render when brush &quot;end&quot; is triggered" name="range component life should render when brush &quot;end&quot; is triggered" time="0">
    </testcase>
  </testsuite>
  <testsuite name="circle" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.229" tests="8">
    <testcase classname="circle render should fire beginPath" name="circle render should fire beginPath" time="0.001">
    </testcase>
    <testcase classname="circle render should fire moveTo with correct arguments" name="circle render should fire moveTo with correct arguments" time="0">
    </testcase>
    <testcase classname="circle render should fire arc with correct arguments" name="circle render should fire arc with correct arguments" time="0.001">
    </testcase>
    <testcase classname="circle render should not fire fill if fill condition is falsy" name="circle render should not fire fill if fill condition is falsy" time="0">
    </testcase>
    <testcase classname="circle render should fire fill if fill condition is truthy" name="circle render should fire fill if fill condition is truthy" time="0.001">
    </testcase>
    <testcase classname="circle render should not fire stroke if stroke condition is falsy" name="circle render should not fire stroke if stroke condition is falsy" time="0">
    </testcase>
    <testcase classname="circle render should fire stroke if stroke condition is truthy" name="circle render should fire stroke if stroke condition is truthy" time="0.001">
    </testcase>
    <testcase classname="circle render should fire methods in correct order" name="circle render should fire methods in correct order" time="0">
    </testcase>
  </testsuite>
  <testsuite name="BrushRange Interaction" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.235" tests="11">
    <testcase classname="BrushRange Interaction Start should set started to true" name="BrushRange Interaction Start should set started to true" time="0.001">
    </testcase>
    <testcase classname="BrushRange Interaction Start should set state.active when only range" name="BrushRange Interaction Start should set state.active when only range" time="0">
    </testcase>
    <testcase classname="BrushRange Interaction Start should set state.active limited by others" name="BrushRange Interaction Start should set state.active limited by others" time="0.001">
    </testcase>
    <testcase classname="BrushRange Interaction Start should set state.active drag existing" name="BrushRange Interaction Start should set state.active drag existing" time="0">
    </testcase>
    <testcase classname="BrushRange Interaction Start should set state.active resize existing" name="BrushRange Interaction Start should set state.active resize existing" time="0.001">
    </testcase>
    <testcase classname="BrushRange Interaction Start should set state.active should detect drag in bubbles" name="BrushRange Interaction Start should set state.active should detect drag in bubbles" time="0.001">
    </testcase>
    <testcase classname="BrushRange Interaction Start should set state.active start if within targetRect" name="BrushRange Interaction Start should set state.active start if within targetRect" time="0.001">
    </testcase>
    <testcase classname="BrushRange Interaction Start should set state.active not start if outside targetRect" name="BrushRange Interaction Start should set state.active not start if outside targetRect" time="0">
    </testcase>
    <testcase classname="BrushRange Interaction Move should update current" name="BrushRange Interaction Move should update current" time="0">
    </testcase>
    <testcase classname="BrushRange Interaction Move should limit by current limits" name="BrushRange Interaction Move should limit by current limits" time="0.001">
    </testcase>
    <testcase classname="BrushRange Interaction End should set started to false" name="BrushRange Interaction End should set started to false" time="0">
    </testcase>
  </testsuite>
  <testsuite name="interpolateObject" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.251" tests="5">
    <testcase classname="interpolateObject should interpolate object correctly when source object does not have a property in target object" name="interpolateObject should interpolate object correctly when source object does not have a property in target object" time="0">
    </testcase>
    <testcase classname="interpolateObject should interpolate object correctly when target object does not have a property in source object" name="interpolateObject should interpolate object correctly when target object does not have a property in source object" time="0">
    </testcase>
    <testcase classname="interpolateObject should interpolate string as color if the key is one of the color keys" name="interpolateObject should interpolate string as color if the key is one of the color keys" time="0.001">
    </testcase>
    <testcase classname="interpolateObject should NOT interpolate string as color if the key is NOT one of the color keys" name="interpolateObject should NOT interpolate string as color if the key is NOT one of the color keys" time="0.001">
    </testcase>
    <testcase classname="interpolateObject should NOT interpolate string as color if the color is just a part of the string" name="interpolateObject should NOT interpolate string as color if the color is just a part of the string" time="0">
    </testcase>
  </testsuite>
  <testsuite name="alignmentToNumber" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.229" tests="3">
    <testcase classname="alignmentToNumber should fallback on undefined, Infinity and NaN" name="alignmentToNumber should fallback on undefined, Infinity and NaN" time="0">
    </testcase>
    <testcase classname="alignmentToNumber should handle numeric values" name="alignmentToNumber should handle numeric values" time="0">
    </testcase>
    <testcase classname="alignmentToNumber should handle string values" name="alignmentToNumber should handle string values" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="binaryLeftSearch" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.228" tests="8">
    <testcase classname="binaryLeftSearch should find the first node that may intersect the label" name="binaryLeftSearch should find the first node that may intersect the label" time="0">
    </testcase>
    <testcase classname="binaryLeftSearch should find the first node that may intersect the label when there are duplicate nodes" name="binaryLeftSearch should find the first node that may intersect the label when there are duplicate nodes" time="0">
    </testcase>
    <testcase classname="binaryLeftSearch should handle no possible intersections" name="binaryLeftSearch should handle no possible intersections" time="0">
    </testcase>
    <testcase classname="filter overlapping labels should not filter if collision with self" name="filter overlapping labels should not filter if collision with self" time="0">
    </testcase>
    <testcase classname="filter overlapping labels should not filter by text to text collision if label already have been removed" name="filter overlapping labels should not filter by text to text collision if label already have been removed" time="0">
    </testcase>
    <testcase classname="filter overlapping labels should filter if not fully inside the container" name="filter overlapping labels should filter if not fully inside the container" time="0">
    </testcase>
    <testcase classname="filter overlapping labels should filter by text to text collision" name="filter overlapping labels should filter by text to text collision" time="0">
    </testcase>
    <testcase classname="filter overlapping labels should filter by text to node collision" name="filter overlapping labels should filter by text to node collision" time="0">
    </testcase>
  </testsuite>
  <testsuite name="timeSpanDispatcher" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.229" tests="10">
    <testcase classname="timeSpanDispatcher invoke should call action with default delay and duration" name="timeSpanDispatcher invoke should call action with default delay and duration" time="0.001">
    </testcase>
    <testcase classname="timeSpanDispatcher invoke should call action with delay and duration" name="timeSpanDispatcher invoke should call action with delay and duration" time="0">
    </testcase>
    <testcase classname="timeSpanDispatcher invoke should debounce queued actions" name="timeSpanDispatcher invoke should debounce queued actions" time="0">
    </testcase>
    <testcase classname="timeSpanDispatcher events should trigger `pending` event on invoke" name="timeSpanDispatcher events should trigger `pending` event on invoke" time="0.001">
    </testcase>
    <testcase classname="timeSpanDispatcher events should trigger `active` event after delay" name="timeSpanDispatcher events should trigger `active` event after delay" time="0">
    </testcase>
    <testcase classname="timeSpanDispatcher events should trigger `fulfilled` event after duration" name="timeSpanDispatcher events should trigger `fulfilled` event after duration" time="0">
    </testcase>
    <testcase classname="timeSpanDispatcher events should not trigger `fulfilled` event if no duration is set" name="timeSpanDispatcher events should not trigger `fulfilled` event if no duration is set" time="0.001">
    </testcase>
    <testcase classname="timeSpanDispatcher events should only trigger `fulfilled` event for last invoke" name="timeSpanDispatcher events should only trigger `fulfilled` event for last invoke" time="0">
    </testcase>
    <testcase classname="timeSpanDispatcher events should trigger `cancelled` event for active invoke" name="timeSpanDispatcher events should trigger `cancelled` event for active invoke" time="0">
    </testcase>
    <testcase classname="timeSpanDispatcher events should trigger `rejected` event for pending invoke" name="timeSpanDispatcher events should trigger `rejected` event for pending invoke" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Dock Layout" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.242" tests="30">
    <testcase classname="Dock Layout Layout should handle empty components array in layout call" name="Dock Layout Layout should handle empty components array in layout call" time="0">
    </testcase>
    <testcase classname="Dock Layout Layout should throw exception if rect is invalid" name="Dock Layout Layout should throw exception if rect is invalid" time="0">
    </testcase>
    <testcase classname="Dock Layout Layout should set correct component rects" name="Dock Layout Layout should set correct component rects" time="0.002">
    </testcase>
    <testcase classname="Dock Layout Layout should allow multiple components to dock on same side" name="Dock Layout Layout should allow multiple components to dock on same side" time="0.001">
    </testcase>
    <testcase classname="Dock Layout Layout should throw an expection if needed properties are missing" name="Dock Layout Layout should throw an expection if needed properties are missing" time="0">
    </testcase>
    <testcase classname="Dock Layout Layout should remove components that don&apos;t fit" name="Dock Layout Layout should remove components that don&apos;t fit" time="0.001">
    </testcase>
    <testcase classname="Dock Layout Layout should remove component that is docked at another component which does not fit" name="Dock Layout Layout should remove component that is docked at another component which does not fit" time="0">
    </testcase>
    <testcase classname="Dock Layout Layout should keep component because one of the referenced components are shown" name="Dock Layout Layout should keep component because one of the referenced components are shown" time="0.001">
    </testcase>
    <testcase classname="Dock Layout Layout should set correct component rects when container rect is not starting in origin" name="Dock Layout Layout should set correct component rects when container rect is not starting in origin" time="0.001">
    </testcase>
    <testcase classname="Dock Layout Settings should generate layout from a logical size setting" name="Dock Layout Settings should generate layout from a logical size setting" time="0">
    </testcase>
    <testcase classname="Dock Layout Settings should generate layout from a logical size setting with preserved aspect ratio" name="Dock Layout Settings should generate layout from a logical size setting with preserved aspect ratio" time="0">
    </testcase>
    <testcase classname="Dock Layout Settings should ignore size and logicalSize NaN values and fallback to default size value" name="Dock Layout Settings should ignore size and logicalSize NaN values and fallback to default size value" time="0">
    </testcase>
    <testcase classname="Dock Layout Settings should use minWidthRatio" name="Dock Layout Settings should use minWidthRatio" time="0.001">
    </testcase>
    <testcase classname="Dock Layout Settings should use minHeightRatio" name="Dock Layout Settings should use minHeightRatio" time="0">
    </testcase>
    <testcase classname="Dock Layout Settings should clamp min width/height ratios to min value of 0" name="Dock Layout Settings should clamp min width/height ratios to min value of 0" time="0">
    </testcase>
    <testcase classname="Dock Layout Settings should clamp min width/height ratios to max value of 1" name="Dock Layout Settings should clamp min width/height ratios to max value of 1" time="0">
    </testcase>
    <testcase classname="Dock Layout Settings should use minWidth and have predence on minWidthRatio" name="Dock Layout Settings should use minWidth and have predence on minWidthRatio" time="0">
    </testcase>
    <testcase classname="Dock Layout Settings should use minHeight and have predence on minHeightRatio" name="Dock Layout Settings should use minHeight and have predence on minHeightRatio" time="0.001">
    </testcase>
    <testcase classname="Dock Layout Settings should clamp min width/height to the logical size" name="Dock Layout Settings should clamp min width/height to the logical size" time="0">
    </testcase>
    <testcase classname="Dock Layout Settings should ignore min width/height of less then or equal to 0" name="Dock Layout Settings should ignore min width/height of less then or equal to 0" time="0">
    </testcase>
    <testcase classname="Dock Layout minimumLayoutMode normal visible" name="Dock Layout minimumLayoutMode normal visible" time="0">
    </testcase>
    <testcase classname="Dock Layout minimumLayoutMode normal to small" name="Dock Layout minimumLayoutMode normal to small" time="0">
    </testcase>
    <testcase classname="Dock Layout minimumLayoutMode complex visible" name="Dock Layout minimumLayoutMode complex visible" time="0">
    </testcase>
    <testcase classname="Dock Layout minimumLayoutMode should use logicalSize when determining visiblity of components" name="Dock Layout minimumLayoutMode should use logicalSize when determining visiblity of components" time="0.001">
    </testcase>
    <testcase classname="Dock Layout edgeBleed should remove component when edgebleed doesn&apos;t fit" name="Dock Layout edgeBleed should remove component when edgebleed doesn&apos;t fit" time="0">
    </testcase>
    <testcase classname="Dock Layout edgeBleed should remove component because other components edgebleed" name="Dock Layout edgeBleed should remove component because other components edgebleed" time="0">
    </testcase>
    <testcase classname="Dock Layout edgeBleed should overlap component and edgebleed on the same side" name="Dock Layout edgeBleed should overlap component and edgebleed on the same side" time="0.001">
    </testcase>
    <testcase classname="Dock Layout prioOrder should remove components with higher prioOrder given not enough space and they have the same orientation" name="Dock Layout prioOrder should remove components with higher prioOrder given not enough space and they have the same orientation" time="0">
    </testcase>
    <testcase classname="Dock Layout prioOrder should not change the order in which components are displayed" name="Dock Layout prioOrder should not change the order in which components are displayed" time="0">
    </testcase>
    <testcase classname="Dock Layout displayOrder should maintain order of visible components" name="Dock Layout displayOrder should maintain order of visible components" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Theme" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.213" tests="4">
    <testcase classname="Theme should find a palette" name="Theme should find a palette" time="0">
    </testcase>
    <testcase classname="Theme should find a palette with a minimum number of colors" name="Theme should find a palette with a minimum number of colors" time="0">
    </testcase>
    <testcase classname="Theme should resolve a style" name="Theme should resolve a style" time="0.001">
    </testcase>
    <testcase classname="Theme should inherit when setting style" name="Theme should inherit when setting style" time="0">
    </testcase>
  </testsuite>
  <testsuite name="extractor" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.216" tests="1">
    <testcase classname="extractor should return extracted items" name="extractor should return extracted items" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="svg-gradient" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.224" tests="6">
    <testcase classname="svg-gradient onCreate should set fillReference when fill is a gradient" name="svg-gradient onCreate should set fillReference when fill is a gradient" time="0.001">
    </testcase>
    <testcase classname="svg-gradient onCreate should set strokeReference when stroke is a gradient" name="svg-gradient onCreate should set strokeReference when stroke is a gradient" time="0">
    </testcase>
    <testcase classname="svg-gradient onCreate should create a radial gradient node" name="svg-gradient onCreate should create a radial gradient node" time="0">
    </testcase>
    <testcase classname="svg-gradient onCreate should create a linear gradient node" name="svg-gradient onCreate should create a linear gradient node" time="0">
    </testcase>
    <testcase classname="svg-gradient onCreate should create a linear gradient node with custom bounds" name="svg-gradient onCreate should create a linear gradient node with custom bounds" time="0.001">
    </testcase>
    <testcase classname="svg-gradient onCreate should maintain cache" name="svg-gradient onCreate should maintain cache" time="0">
    </testcase>
  </testsuite>
  <testsuite name="GeoPolygon" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.227" tests="32">
    <testcase classname="GeoPolygon constructor should set correct default values when no arguments passed" name="GeoPolygon constructor should set correct default values when no arguments passed" time="0">
    </testcase>
    <testcase classname="GeoPolygon constructor should set the correct values when arguments passed" name="GeoPolygon constructor should set the correct values when arguments passed" time="0.001">
    </testcase>
    <testcase classname="GeoPolygon constructor should close edges if not already closed" name="GeoPolygon constructor should close edges if not already closed" time="0">
    </testcase>
    <testcase classname="GeoPolygon set should set correct default values when no arguments passed" name="GeoPolygon set should set correct default values when no arguments passed" time="0">
    </testcase>
    <testcase classname="GeoPolygon set should set the correct values when arguments passed" name="GeoPolygon set should set the correct values when arguments passed" time="0">
    </testcase>
    <testcase classname="GeoPolygon set should remove any duplicate sibling vertices" name="GeoPolygon set should remove any duplicate sibling vertices" time="0">
    </testcase>
    <testcase classname="GeoPolygon bounds should return the correct bounds" name="GeoPolygon bounds should return the correct bounds" time="0">
    </testcase>
    <testcase classname="GeoPolygon bounds should handle negative points" name="GeoPolygon bounds should handle negative points" time="0">
    </testcase>
    <testcase classname="GeoPolygon Intersection Point convex polygon" name="GeoPolygon Intersection Point convex polygon" time="0.001">
    </testcase>
    <testcase classname="GeoPolygon Intersection Point concave polygon" name="GeoPolygon Intersection Point concave polygon" time="0">
    </testcase>
    <testcase classname="GeoPolygon Intersection Point self-Intersecting polygon" name="GeoPolygon Intersection Point self-Intersecting polygon" time="0">
    </testcase>
    <testcase classname="GeoPolygon Intersection Point polygon with hole" name="GeoPolygon Intersection Point polygon with hole" time="0">
    </testcase>
    <testcase classname="GeoPolygon Intersection Point should not intersect if polygon contains less then 2 vertices" name="GeoPolygon Intersection Point should not intersect if polygon contains less then 2 vertices" time="0">
    </testcase>
    <testcase classname="GeoPolygon Intersection Point should return true if the point is coincident with a vertex of the polygon" name="GeoPolygon Intersection Point should return true if the point is coincident with a vertex of the polygon" time="0">
    </testcase>
    <testcase classname="GeoPolygon Intersection Point should return true if the point is on an edge of the polygon" name="GeoPolygon Intersection Point should return true if the point is on an edge of the polygon" time="0">
    </testcase>
    <testcase classname="GeoPolygon Intersection Point should calculate that these points are outside" name="GeoPolygon Intersection Point should calculate that these points are outside" time="0">
    </testcase>
    <testcase classname="GeoPolygon Intersection Point should return true if the point is inside and the horizontal line of the point goes through a vertex of the polygon" name="GeoPolygon Intersection Point should return true if the point is inside and the horizontal line of the point goes through a vertex of the polygon" time="0">
    </testcase>
    <testcase classname="GeoPolygon Intersection Point should return true if the point is inside and the horizontal line of the point goes through an edge of the polygon" name="GeoPolygon Intersection Point should return true if the point is inside and the horizontal line of the point goes through an edge of the polygon" time="0">
    </testcase>
    <testcase classname="GeoPolygon Intersection Point should return false if the point is outside and the horizontal line of the point goes through an edge of the polygon" name="GeoPolygon Intersection Point should return false if the point is outside and the horizontal line of the point goes through an edge of the polygon" time="0">
    </testcase>
    <testcase classname="GeoPolygon Intersection Point should return false if the point is outside and the horizontal line of the point goes through a vertex of the polygon" name="GeoPolygon Intersection Point should return false if the point is outside and the horizontal line of the point goes through a vertex of the polygon" time="0">
    </testcase>
    <testcase classname="GeoPolygon Intersection intersectsCircle convex polygon" name="GeoPolygon Intersection intersectsCircle convex polygon" time="0">
    </testcase>
    <testcase classname="GeoPolygon Intersection intersectsCircle concave polygon" name="GeoPolygon Intersection intersectsCircle concave polygon" time="0">
    </testcase>
    <testcase classname="GeoPolygon Intersection intersectsCircle self-Intersecting polygon" name="GeoPolygon Intersection intersectsCircle self-Intersecting polygon" time="0.001">
    </testcase>
    <testcase classname="GeoPolygon Intersection intersectsCircle should not intersect if polygon contains less then 2 vertices" name="GeoPolygon Intersection intersectsCircle should not intersect if polygon contains less then 2 vertices" time="0">
    </testcase>
    <testcase classname="GeoPolygon Intersection intersectsLine should intersect line" name="GeoPolygon Intersection intersectsLine should intersect line" time="0">
    </testcase>
    <testcase classname="GeoPolygon Intersection intersectsRect should intersect rect" name="GeoPolygon Intersection intersectsRect should intersect rect" time="0">
    </testcase>
    <testcase classname="GeoPolygon Intersection intersectsPolygon convex polygon" name="GeoPolygon Intersection intersectsPolygon convex polygon" time="0">
    </testcase>
    <testcase classname="GeoPolygon Intersection intersectsPolygon concave polygon" name="GeoPolygon Intersection intersectsPolygon concave polygon" time="0">
    </testcase>
    <testcase classname="GeoPolygon Intersection intersectsPolygon self-intersecting polygon" name="GeoPolygon Intersection intersectsPolygon self-intersecting polygon" time="0">
    </testcase>
    <testcase classname="GeoPolygon Intersection intersectsPolygon fully contains another polygon, case 1" name="GeoPolygon Intersection intersectsPolygon fully contains another polygon, case 1" time="0">
    </testcase>
    <testcase classname="GeoPolygon Intersection intersectsPolygon fully contains another polygon, case 2" name="GeoPolygon Intersection intersectsPolygon fully contains another polygon, case 2" time="0">
    </testcase>
    <testcase classname="GeoPolygon Intersection intersectsPolygon fully being contained by another polygon" name="GeoPolygon Intersection intersectsPolygon fully being contained by another polygon" time="0">
    </testcase>
  </testsuite>
  <testsuite name="plugin" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.222" tests="2">
    <testcase classname="plugin should register hammer interaction when parameter is recognized as picasso" name="plugin should register hammer interaction when parameter is recognized as picasso" time="0.001">
    </testcase>
    <testcase classname="plugin should return plugin when parameter is not picasso" name="plugin should return plugin when parameter is not picasso" time="0">
    </testcase>
  </testsuite>
  <testsuite name="qlik timeFormat" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.236" tests="32">
    <testcase classname="qlik timeFormat should create valid qlik date -&gt; JS Date" name="qlik timeFormat should create valid qlik date -&gt; JS Date" time="0.001">
    </testcase>
    <testcase classname="qlik timeFormat Basic should format dates correctly according to constructor pattern" name="qlik timeFormat Basic should format dates correctly according to constructor pattern" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Basic should format dates correctly when using custom format" name="qlik timeFormat Basic should format dates correctly when using custom format" time="0.001">
    </testcase>
    <testcase classname="qlik timeFormat Basic should format dates correctly with a custom locale" name="qlik timeFormat Basic should format dates correctly with a custom locale" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Basic should handle locale formats correctly" name="qlik timeFormat Basic should handle locale formats correctly" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Basic should handle non-specified locale formats correctly" name="qlik timeFormat Basic should handle non-specified locale formats correctly" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Basic should format intervals correctly" name="qlik timeFormat Basic should format intervals correctly" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Years should format year correctly" name="qlik timeFormat Years should format year correctly" time="0.001">
    </testcase>
    <testcase classname="qlik timeFormat Months as number" name="qlik timeFormat Months as number" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Months as padded number" name="qlik timeFormat Months as padded number" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Months in short form" name="qlik timeFormat Months in short form" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Months in long form" name="qlik timeFormat Months in long form" time="0.001">
    </testcase>
    <testcase classname="qlik timeFormat Weekdays as number" name="qlik timeFormat Weekdays as number" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Weekdays as number (small)" name="qlik timeFormat Weekdays as number (small)" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Weekdays as padded number" name="qlik timeFormat Weekdays as padded number" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Weekdays as padded number (small)" name="qlik timeFormat Weekdays as padded number (small)" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Weekdays in short form" name="qlik timeFormat Weekdays in short form" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Weekdays in short form (small)" name="qlik timeFormat Weekdays in short form (small)" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Weekdays in long form" name="qlik timeFormat Weekdays in long form" time="0.001">
    </testcase>
    <testcase classname="qlik timeFormat Weekdays in long form (small)" name="qlik timeFormat Weekdays in long form (small)" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Day as number" name="qlik timeFormat Day as number" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Day as padded number" name="qlik timeFormat Day as padded number" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Combinations should support combinations of year, month, weekday and day" name="qlik timeFormat Combinations should support combinations of year, month, weekday and day" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Time Hours as number" name="qlik timeFormat Time Hours as number" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Time Hours as padded number" name="qlik timeFormat Time Hours as padded number" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Time Hours in 12-hour format" name="qlik timeFormat Time Hours in 12-hour format" time="0.001">
    </testcase>
    <testcase classname="qlik timeFormat Time Minutes as number" name="qlik timeFormat Time Minutes as number" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Time Minutes as padded number" name="qlik timeFormat Time Minutes as padded number" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Time Seconds as number" name="qlik timeFormat Time Seconds as number" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Time Seconds as padded number" name="qlik timeFormat Time Seconds as padded number" time="0">
    </testcase>
    <testcase classname="qlik timeFormat Time Fractions  " name="qlik timeFormat Time Fractions  " time="0">
    </testcase>
    <testcase classname="qlik timeFormat Time should support combinations of hours, minutes, seconds and fractions" name="qlik timeFormat Time should support combinations of hours, minutes, seconds and fractions" time="0">
    </testcase>
  </testsuite>
  <testsuite name="colorKeyWord" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.231" tests="9">
    <testcase classname="colorKeyWord should be the correct api" name="colorKeyWord should be the correct api" time="0">
    </testcase>
    <testcase classname="colorKeyWord should return a color instance" name="colorKeyWord should return a color instance" time="0.001">
    </testcase>
    <testcase classname="colorKeyWord should return a new color instance" name="colorKeyWord should return a new color instance" time="0">
    </testcase>
    <testcase classname="colorKeyWord should return a correct color instance" name="colorKeyWord should return a correct color instance" time="0">
    </testcase>
    <testcase classname="colorKeyWord test should return false if keyword is undefined" name="colorKeyWord test should return false if keyword is undefined" time="0">
    </testcase>
    <testcase classname="colorKeyWord test should return false if keyword is null" name="colorKeyWord test should return false if keyword is null" time="0">
    </testcase>
    <testcase classname="colorKeyWord test should return false if keyword is not a string" name="colorKeyWord test should return false if keyword is not a string" time="0">
    </testcase>
    <testcase classname="colorKeyWord test should return false if keyword is unknown" name="colorKeyWord test should return false if keyword is unknown" time="0">
    </testcase>
    <testcase classname="colorKeyWord test should return true if keyword is known" name="colorKeyWord test should return true if keyword is known" time="0">
    </testcase>
  </testsuite>
  <testsuite name="labeling - slices" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.237" tests="17">
    <testcase classname="labeling - slices slice rects inside Q1 - OK" name="labeling - slices slice rects inside Q1 - OK" time="0.001">
    </testcase>
    <testcase classname="labeling - slices slice rects inside Q2 - OK" name="labeling - slices slice rects inside Q2 - OK" time="0">
    </testcase>
    <testcase classname="labeling - slices slice rects opposite Q3 - OK" name="labeling - slices slice rects opposite Q3 - OK" time="0">
    </testcase>
    <testcase classname="labeling - slices slice rects inside Q3 - Is overlapping another label" name="labeling - slices slice rects inside Q3 - Is overlapping another label" time="0">
    </testcase>
    <testcase classname="labeling - slices slice rects inside Q4 - Do not fit" name="labeling - slices slice rects inside Q4 - Do not fit" time="0">
    </testcase>
    <testcase classname="labeling - slices slice rects rotated outside" name="labeling - slices slice rects rotated outside" time="0.001">
    </testcase>
    <testcase classname="labeling - slices slice rects rotated into" name="labeling - slices slice rects rotated into" time="0">
    </testcase>
    <testcase classname="labeling - slices slice rects should require text width to be equal to or larger than first character plus ellipsing given position is `into` and direction `rotate`" name="labeling - slices slice rects should require text width to be equal to or larger than first character plus ellipsing given position is `into` and direction `rotate`" time="0">
    </testcase>
    <testcase classname="labeling - slices slice rects should require text width to be equal to or larger than first character plus ellipsing given position is `inside` and direction `rotate`" name="labeling - slices slice rects should require text width to be equal to or larger than first character plus ellipsing given position is `inside` and direction `rotate`" time="0">
    </testcase>
    <testcase classname="labeling - slices slice rects should require text width to be equal to or larger than first character plus ellipsing given position is `outside` and direction `rotate`" name="labeling - slices slice rects should require text width to be equal to or larger than first character plus ellipsing given position is `outside` and direction `rotate`" time="0">
    </testcase>
    <testcase classname="labeling - slices slice rects should require text width to be equal to or larger than first character plus ellipsing given position is `outside` and direction `horizontal`" name="labeling - slices slice rects should require text width to be equal to or larger than first character plus ellipsing given position is `outside` and direction `horizontal`" time="0">
    </testcase>
    <testcase classname="labeling - slices slice strategy should return some labels" name="labeling - slices slice strategy should return some labels" time="0.001">
    </testcase>
    <testcase classname="labeling - slices slice strategy should skip node if label is falsy" name="labeling - slices slice strategy should skip node if label is falsy" time="0">
    </testcase>
    <testcase classname="labeling - slices slice strategy should link data" name="labeling - slices slice strategy should link data" time="0">
    </testcase>
    <testcase classname="labeling - slices slice strategy label overlap should not add any labels, because they are out of bounds" name="labeling - slices slice strategy label overlap should not add any labels, because they are out of bounds" time="0">
    </testcase>
    <testcase classname="labeling - slices slice strategy label overlap should move overlapping labels and create a line to the moved one" name="labeling - slices slice strategy label overlap should move overlapping labels and create a line to the moved one" time="0.001">
    </testcase>
    <testcase classname="labeling - slices slice strategy label overlap should handle roatation and wraparound" name="labeling - slices slice strategy label overlap should handle roatation and wraparound" time="0">
    </testcase>
  </testsuite>
  <testsuite name="native interaction mixin" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.238" tests="7">
    <testcase classname="native interaction mixin should add native events to element" name="native interaction mixin should add native events to element" time="0.001">
    </testcase>
    <testcase classname="native interaction mixin should not add native events to element if enabled is false" name="native interaction mixin should not add native events to element if enabled is false" time="0">
    </testcase>
    <testcase classname="native interaction mixin should remove event listeners when off is called" name="native interaction mixin should remove event listeners when off is called" time="0">
    </testcase>
    <testcase classname="native interaction mixin should add event listeners again when on is called" name="native interaction mixin should add event listeners again when on is called" time="0">
    </testcase>
    <testcase classname="native interaction mixin should not add event listeners when state is off" name="native interaction mixin should not add event listeners when state is off" time="0">
    </testcase>
    <testcase classname="native interaction mixin should change native events when set is called with new props" name="native interaction mixin should change native events when set is called with new props" time="0">
    </testcase>
    <testcase classname="native interaction mixin remove all event listeners on destroy" name="native interaction mixin remove all event listeners on destroy" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Line Break Resolver" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.256" tests="10">
    <testcase classname="Line Break Resolver onLineBreak should only be invoked on text nodes" name="Line Break Resolver onLineBreak should only be invoked on text nodes" time="0">
    </testcase>
    <testcase classname="Line Break Resolver onLineBreak should not be invoked on text nodes if wordBreak property is missing" name="Line Break Resolver onLineBreak should not be invoked on text nodes if wordBreak property is missing" time="0">
    </testcase>
    <testcase classname="Line Break Resolver onLineBreak should not be invoked on text node if tagged as a multi-line node" name="Line Break Resolver onLineBreak should not be invoked on text node if tagged as a multi-line node" time="0">
    </testcase>
    <testcase classname="Line Break Resolver onLineBreak should tag output nodes" name="Line Break Resolver onLineBreak should tag output nodes" time="0.001">
    </testcase>
    <testcase classname="Line Break Resolver onLineBreak should inherit id attribute from text node" name="Line Break Resolver onLineBreak should inherit id attribute from text node" time="0">
    </testcase>
    <testcase classname="Line Break Resolver onLineBreak should respect lineHeight attribute" name="Line Break Resolver onLineBreak should respect lineHeight attribute" time="0.001">
    </testcase>
    <testcase classname="Line Break Resolver onLineBreak should include dy attribute when calculating position" name="Line Break Resolver onLineBreak should include dy attribute when calculating position" time="0">
    </testcase>
    <testcase classname="Line Break Resolver onLineBreak should remove maxWidth attribute and append ellipis char on last line" name="Line Break Resolver onLineBreak should remove maxWidth attribute and append ellipis char on last line" time="0">
    </testcase>
    <testcase classname="Line Break Resolver onLineBreak should not line-break node if text fits on a single line" name="Line Break Resolver onLineBreak should not line-break node if text fits on a single line" time="0">
    </testcase>
    <testcase classname="Line Break Resolver onLineBreak should line-break node if text fits on a single line but contains line-break characters" name="Line Break Resolver onLineBreak should line-break node if text fits on a single line but contains line-break characters" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Axis size calculator" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.245" tests="23">
    <testcase classname="Axis size calculator axis with no visible component have a margin of 10" name="Axis size calculator axis with no visible component have a margin of 10" time="0.001">
    </testcase>
    <testcase classname="Axis size calculator the size of a vertical axis depend on text length" name="Axis size calculator the size of a vertical axis depend on text length" time="0">
    </testcase>
    <testcase classname="Axis size calculator the size of a vertical axis should depend on maxGlyhpCount if set" name="Axis size calculator the size of a vertical axis should depend on maxGlyhpCount if set" time="0.001">
    </testcase>
    <testcase classname="Axis size calculator the size of a horizontal axis don&apos;t depend on text length" name="Axis size calculator the size of a horizontal axis don&apos;t depend on text length" time="0">
    </testcase>
    <testcase classname="Axis size calculator hide horizontal discrete axis should be considered to large when labels requires more size then available" name="Axis size calculator hide horizontal discrete axis should be considered to large when labels requires more size then available" time="0">
    </testcase>
    <testcase classname="Axis size calculator hide horizontal tilted discrete axis should be considered to large when labels requires more size then available" name="Axis size calculator hide horizontal tilted discrete axis should be considered to large when labels requires more size then available" time="0.001">
    </testcase>
    <testcase classname="Axis size calculator hide horizontal tilted discrete axis should be considered to large if angle is set to zero" name="Axis size calculator hide horizontal tilted discrete axis should be considered to large if angle is set to zero" time="0">
    </testcase>
    <testcase classname="Axis size calculator hide horizontal tilted discrete axis should not be considered to large if there is only one tick" name="Axis size calculator hide horizontal tilted discrete axis should not be considered to large if there is only one tick" time="0">
    </testcase>
    <testcase classname="Axis size calculator label mode auto should switch to tilted orientation if horizontal size limit is reached" name="Axis size calculator label mode auto should switch to tilted orientation if horizontal size limit is reached" time="0">
    </testcase>
    <testcase classname="Axis size calculator label mode auto should switch to tilted orientation if tiltThreshold is set to 1" name="Axis size calculator label mode auto should switch to tilted orientation if tiltThreshold is set to 1" time="0">
    </testcase>
    <testcase classname="Axis size calculator label mode auto should if set use maxGlyphCount to determine if horizontal size limit is reached" name="Axis size calculator label mode auto should if set use maxGlyphCount to determine if horizontal size limit is reached" time="0.001">
    </testcase>
    <testcase classname="Axis size calculator label mode horizontal should handle when there are no ticks" name="Axis size calculator label mode horizontal should handle when there are no ticks" time="0">
    </testcase>
    <testcase classname="Axis size calculator label mode layered should return correct size when docked at bottom" name="Axis size calculator label mode layered should return correct size when docked at bottom" time="0">
    </testcase>
    <testcase classname="Axis size calculator label mode tilted should return correct size when docked at bottom" name="Axis size calculator label mode tilted should return correct size when docked at bottom" time="0">
    </testcase>
    <testcase classname="Axis size calculator label mode tilted should handle when there are no ticks" name="Axis size calculator label mode tilted should handle when there are no ticks" time="0.001">
    </testcase>
    <testcase classname="Axis size calculator label mode tilted maxLengthPx" name="Axis size calculator label mode tilted maxLengthPx" time="0">
    </testcase>
    <testcase classname="Axis size calculator label mode tilted minLengthPx" name="Axis size calculator label mode tilted minLengthPx" time="0">
    </testcase>
    <testcase classname="Axis size calculator label mode tilted require edgeBleed" name="Axis size calculator label mode tilted require edgeBleed" time="0">
    </testcase>
    <testcase classname="Axis size calculator label mode tilted maxEdgeBleed" name="Axis size calculator label mode tilted maxEdgeBleed" time="0.001">
    </testcase>
    <testcase classname="Axis size calculator ticks and line measure ticks" name="Axis size calculator ticks and line measure ticks" time="0">
    </testcase>
    <testcase classname="Axis size calculator ticks and line measure minorTicks" name="Axis size calculator ticks and line measure minorTicks" time="0">
    </testcase>
    <testcase classname="Axis size calculator ticks and line measure line" name="Axis size calculator ticks and line measure line" time="0">
    </testcase>
    <testcase classname="Axis size calculator ticks and line minor and major ticks" name="Axis size calculator ticks and line minor and major ticks" time="0">
    </testcase>
  </testsuite>
  <testsuite name="line" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.241" tests="6">
    <testcase classname="line render should fire beginPath" name="line render should fire beginPath" time="0">
    </testcase>
    <testcase classname="line render should fire moveTo with correct arguments" name="line render should fire moveTo with correct arguments" time="0">
    </testcase>
    <testcase classname="line render should fire lineTo with correct arguments" name="line render should fire lineTo with correct arguments" time="0.001">
    </testcase>
    <testcase classname="line render should not fire stroke if stroke condition is falsy" name="line render should not fire stroke if stroke condition is falsy" time="0">
    </testcase>
    <testcase classname="line render should fire stroke if stroke condition is truthy" name="line render should fire stroke if stroke condition is truthy" time="0">
    </testcase>
    <testcase classname="line render should fire beginPath as first canvas method" name="line render should fire beginPath as first canvas method" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="svg-pattern" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.244" tests="4">
    <testcase classname="svg-pattern onCreate should set fillReference when fill is a pattern" name="svg-pattern onCreate should set fillReference when fill is a pattern" time="0.001">
    </testcase>
    <testcase classname="svg-pattern onCreate should set strokeReference when stroke is a pattern" name="svg-pattern onCreate should set strokeReference when stroke is a pattern" time="0.001">
    </testcase>
    <testcase classname="svg-pattern onCreate should create a pattern node" name="svg-pattern onCreate should create a pattern node" time="0">
    </testcase>
    <testcase classname="svg-pattern onCreate should maintain cache" name="svg-pattern onCreate should maintain cache" time="0">
    </testcase>
  </testsuite>
  <testsuite name="render" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.245" tests="1">
    <testcase classname="render should render content" name="render should render content" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="node-tree" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.237" tests="18">
    <testcase classname="node-tree createNodes should call factory function with type and parent params" name="node-tree createNodes should call factory function with type and parent params" time="0.001">
    </testcase>
    <testcase classname="node-tree createNodes should store created objects" name="node-tree createNodes should store created objects" time="0">
    </testcase>
    <testcase classname="node-tree destroyNodes should call factory function with object instance" name="node-tree destroyNodes should call factory function with object instance" time="0">
    </testcase>
    <testcase classname="node-tree destroyNodes should nullify node object" name="node-tree destroyNodes should nullify node object" time="0">
    </testcase>
    <testcase classname="node-tree updateNodes should call maintainer function with object instance and content" name="node-tree updateNodes should call maintainer function with object instance and content" time="0">
    </testcase>
    <testcase classname="node-tree diff by value added should contain added items when arrays are different" name="node-tree diff by value added should contain added items when arrays are different" time="0">
    </testcase>
    <testcase classname="node-tree diff by value added should be empty when arrays contain same values" name="node-tree diff by value added should be empty when arrays contain same values" time="0.001">
    </testcase>
    <testcase classname="node-tree diff by value added should contain added items when arrays are different" name="node-tree diff by value added should contain added items when arrays are different" time="0">
    </testcase>
    <testcase classname="node-tree diff by value updated should be empty when values don&apos;t match" name="node-tree diff by value updated should be empty when values don&apos;t match" time="0">
    </testcase>
    <testcase classname="node-tree diff by value updated should contain updated items when same values exist in both arrays" name="node-tree diff by value updated should contain updated items when same values exist in both arrays" time="0">
    </testcase>
    <testcase classname="node-tree diff by value removed should be empty when new array contains old values" name="node-tree diff by value removed should be empty when new array contains old values" time="0">
    </testcase>
    <testcase classname="node-tree diff by value removed should contain removed items when new array does not contain old values" name="node-tree diff by value removed should contain removed items when new array does not contain old values" time="0">
    </testcase>
    <testcase classname="node-tree diff by id added should contain new items" name="node-tree diff by id added should contain new items" time="0">
    </testcase>
    <testcase classname="node-tree diff by id added should be empty when new items are not added" name="node-tree diff by id added should be empty when new items are not added" time="0">
    </testcase>
    <testcase classname="node-tree diff by id updated should be empty when items are unique" name="node-tree diff by id updated should be empty when items are unique" time="0">
    </testcase>
    <testcase classname="node-tree diff by id updated should contain shared items" name="node-tree diff by id updated should contain shared items" time="0">
    </testcase>
    <testcase classname="node-tree diff by id removed should be empty when old items are not removed" name="node-tree diff by id removed should be empty when old items are not removed" time="0">
    </testcase>
    <testcase classname="node-tree diff by id removed should contain removed items" name="node-tree diff by id removed should contain removed items" time="0">
    </testcase>
  </testsuite>
  <testsuite name="d3 numberFormat" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.251" tests="3">
    <testcase classname="d3 numberFormat should swallow a pattern" name="d3 numberFormat should swallow a pattern" time="0.001">
    </testcase>
    <testcase classname="d3 numberFormat should format manually correctly" name="d3 numberFormat should format manually correctly" time="0">
    </testcase>
    <testcase classname="d3 numberFormat should allow for custom locale" name="d3 numberFormat should allow for custom locale" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Cubic Bezier curve" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.233" tests="2">
    <testcase classname="Cubic Bezier curve generate points on curve" name="Cubic Bezier curve generate points on curve" time="0.001">
    </testcase>
    <testcase classname="Cubic Bezier curve should split curve a maximum amount of times" name="Cubic Bezier curve should split curve a maximum amount of times" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Style resolver" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:28" time="0.237" tests="9">
    <testcase classname="Style resolver should resolve existing style" name="Style resolver should resolve existing style" time="0">
    </testcase>
    <testcase classname="Style resolver should resolve existing 0 style" name="Style resolver should resolve existing 0 style" time="0">
    </testcase>
    <testcase classname="Style resolver should resolve deep inheritance" name="Style resolver should resolve deep inheritance" time="0">
    </testcase>
    <testcase classname="Style resolver should fallback to inline default" name="Style resolver should fallback to inline default" time="0">
    </testcase>
    <testcase classname="Style resolver should fallback to inline 0 default" name="Style resolver should fallback to inline 0 default" time="0">
    </testcase>
    <testcase classname="Style resolver should fallback to global default for unallowed null value" name="Style resolver should fallback to global default for unallowed null value" time="0.001">
    </testcase>
    <testcase classname="Style resolver should fallback throught functions" name="Style resolver should fallback throught functions" time="0">
    </testcase>
    <testcase classname="Style resolver should possibly return null" name="Style resolver should possibly return null" time="0">
    </testcase>
    <testcase classname="Style resolver should return explicitly set null values" name="Style resolver should return explicitly set null values" time="0">
    </testcase>
  </testsuite>
  <testsuite name="interaction plugin api" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.225" tests="2">
    <testcase classname="interaction plugin api should return the native interaction" name="interaction plugin api should return the native interaction" time="0">
    </testcase>
    <testcase classname="interaction plugin api should register new interaction" name="interaction plugin api should register new interaction" time="0">
    </testcase>
  </testsuite>
  <testsuite name="font-size to height" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.223" tests="2">
    <testcase classname="font-size to height should use 24px a base for determing height" name="font-size to height should use 24px a base for determing height" time="0">
    </testcase>
    <testcase classname="font-size to height should only accept valid font-size format" name="font-size to height should only accept valid font-size format" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="logger" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.22" tests="9">
    <testcase classname="logger at level = DEBUG should log everything" name="logger at level = DEBUG should log everything" time="0">
    </testcase>
    <testcase classname="logger at level = INFO" name="logger at level = INFO" time="0.001">
    </testcase>
    <testcase classname="logger at level = WARN" name="logger at level = WARN" time="0">
    </testcase>
    <testcase classname="logger at level = ERROR" name="logger at level = ERROR" time="0">
    </testcase>
    <testcase classname="logger at level = OFF should not log anything" name="logger at level = OFF should not log anything" time="0.001">
    </testcase>
    <testcase classname="logger should log error" name="logger should log error" time="0">
    </testcase>
    <testcase classname="logger should log warn" name="logger should log warn" time="0">
    </testcase>
    <testcase classname="logger should log info" name="logger should log info" time="0">
    </testcase>
    <testcase classname="logger should log debug" name="logger should log debug" time="0">
    </testcase>
  </testsuite>
  <testsuite name="storage" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.229" tests="3">
    <testcase classname="storage api getAll should return the whole content" name="storage api getAll should return the whole content" time="0.001">
    </testcase>
    <testcase classname="storage api getValue should call external getValue function with correct params" name="storage api getValue should call external getValue function with correct params" time="0.001">
    </testcase>
    <testcase classname="storage api setValue should call external setValue function with correct params" name="storage api setValue should call external setValue function with correct params" time="0">
    </testcase>
  </testsuite>
  <testsuite name="JSON Path mashup resolver" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.209" tests="5">
    <testcase classname="JSON Path mashup resolver should resolve basic path" name="JSON Path mashup resolver should resolve basic path" time="0">
    </testcase>
    <testcase classname="JSON Path mashup resolver should resolve path to array index" name="JSON Path mashup resolver should resolve path to array index" time="0">
    </testcase>
    <testcase classname="JSON Path mashup resolver should map array values when path to specific value is skipped" name="JSON Path mashup resolver should map array values when path to specific value is skipped" time="0">
    </testcase>
    <testcase classname="JSON Path mashup resolver should map array values within a correct range of indexes" name="JSON Path mashup resolver should map array values within a correct range of indexes" time="0">
    </testcase>
    <testcase classname="JSON Path mashup resolver should map array values within a correct set of indexes" name="JSON Path mashup resolver should map array values within a correct set of indexes" time="0">
    </testcase>
  </testsuite>
  <testsuite name="q-brush" errors="0" failures="0" skipped="1" timestamp="2024-11-14T11:48:29" time="0.236" tests="36">
    <testcase classname="q-brush should return empty when no brushes exist" name="q-brush should return empty when no brushes exist" time="0.001">
    </testcase>
    <testcase classname="q-brush should reset made selections when brush is active but contain no values" name="q-brush should reset made selections when brush is active but contain no values" time="0.001">
    </testcase>
    <testcase classname="q-brush selectHyperCubeValues should have method=&quot;selectHyperCubeValues&quot;" name="q-brush selectHyperCubeValues should have method=&quot;selectHyperCubeValues&quot;" time="0">
    </testcase>
    <testcase classname="q-brush selectHyperCubeValues should have valid params" name="q-brush selectHyperCubeValues should have valid params" time="0">
    </testcase>
    <testcase classname="q-brush rangeSelectHyperCubeValues should have method=&quot;rangeSelectHyperCubeValues&quot;" name="q-brush rangeSelectHyperCubeValues should have method=&quot;rangeSelectHyperCubeValues&quot;" time="0">
    </testcase>
    <testcase classname="q-brush rangeSelectHyperCubeValues should have valid params if opts = {} " name="q-brush rangeSelectHyperCubeValues should have valid params if opts = {} " time="0.001">
    </testcase>
    <testcase classname="q-brush rangeSelectHyperCubeValues should have valid params if opts = { orMode: true }" name="q-brush rangeSelectHyperCubeValues should have valid params if opts = { orMode: true }" time="0">
    </testcase>
    <testcase classname="q-brush rangeSelectHyperCubeValues should have valid params if opts = { orMode: false }" name="q-brush rangeSelectHyperCubeValues should have valid params if opts = { orMode: false }" time="0">
    </testcase>
    <testcase classname="q-brush selectHyperCubeContinuousRange should have method=&quot;selectHyperCubeContinuousRange&quot;" name="q-brush selectHyperCubeContinuousRange should have method=&quot;selectHyperCubeContinuousRange&quot;" time="0.001">
    </testcase>
    <testcase classname="q-brush selectHyperCubeContinuousRange should have valid params" name="q-brush selectHyperCubeContinuousRange should have valid params" time="0">
    </testcase>
    <testcase classname="q-brush selectHyperCubeCells should have method=&quot;selectHyperCubeCells&quot;" name="q-brush selectHyperCubeCells should have method=&quot;selectHyperCubeCells&quot;" time="0">
    </testcase>
    <testcase classname="q-brush selectHyperCubeCells should have valid params when primary is not specified" name="q-brush selectHyperCubeCells should have valid params when primary is not specified" time="0">
    </testcase>
    <testcase classname="q-brush selectHyperCubeCells should have valid params when primary is specified" name="q-brush selectHyperCubeCells should have valid params when primary is specified" time="0">
    </testcase>
    <testcase classname="q-brush selectPivotCells should have method=&quot;selectPivotCells&quot;" name="q-brush selectPivotCells should have method=&quot;selectPivotCells&quot;" time="0.001">
    </testcase>
    <testcase classname="q-brush selectPivotCells should have method=&quot;selectPivotCells&quot; when qMode=&quot;K&quot;" name="q-brush selectPivotCells should have method=&quot;selectPivotCells&quot; when qMode=&quot;K&quot;" time="0">
    </testcase>
    <testcase classname="q-brush selectPivotCells should have method=&quot;selectPivotCells&quot; when qMode=&quot;P&quot;" name="q-brush selectPivotCells should have method=&quot;selectPivotCells&quot; when qMode=&quot;P&quot;" time="0">
    </testcase>
    <testcase classname="q-brush selectPivotCells should have valid params when primary is not specified" name="q-brush selectPivotCells should have valid params when primary is not specified" time="0">
    </testcase>
    <testcase classname="q-brush selectPivotCells should have valid params when primary is specified" name="q-brush selectPivotCells should have valid params when primary is specified" time="0.001">
    </testcase>
    <testcase classname="q-brush selectPivotCells should get top dimension" name="q-brush selectPivotCells should get top dimension" time="0">
    </testcase>
    <testcase classname="q-brush selectPivotCells should get left dimensions, when qNoOfLeftDims = -1" name="q-brush selectPivotCells should get left dimensions, when qNoOfLeftDims = -1" time="0">
    </testcase>
    <testcase classname="q-brush selectPivotCells should do selectHyperCubeCells if qMode: S and byCells: true" name="q-brush selectPivotCells should do selectHyperCubeCells if qMode: S and byCells: true" time="0">
    </testcase>
    <testcase classname="q-brush path extraction should map hypercube layout value to property path" name="q-brush path extraction should map hypercube layout value to property path" time="0">
    </testcase>
    <testcase classname="q-brush path extraction should map dimension layout value to params" name="q-brush path extraction should map dimension layout value to params" time="0">
    </testcase>
    <testcase classname="q-brush path extraction should map measure layout value to params" name="q-brush path extraction should map measure layout value to params" time="0">
    </testcase>
    <testcase classname="q-brush path extraction should map attribute dimension layout value to params (on dimension)" name="q-brush path extraction should map attribute dimension layout value to params (on dimension)" time="0">
    </testcase>
    <testcase classname="q-brush path extraction should map attribute dimension column layout value to params (on dimension)" name="q-brush path extraction should map attribute dimension column layout value to params (on dimension)" time="0">
    </testcase>
    <testcase classname="q-brush path extraction should map attribute dimension layout value to params (on measure)" name="q-brush path extraction should map attribute dimension layout value to params (on measure)" time="0">
    </testcase>
    <testcase classname="q-brush path extraction should map attribute dimension column layout value to params (on measure)" name="q-brush path extraction should map attribute dimension column layout value to params (on measure)" time="0">
    </testcase>
    <testcase classname="q-brush path extraction should map attribute expression layout value to params (on measure)" name="q-brush path extraction should map attribute expression layout value to params (on measure)" time="0">
    </testcase>
    <testcase classname="q-brush path extraction should map attribute expression layout value to params (on measure) - without layout" name="q-brush path extraction should map attribute expression layout value to params (on measure) - without layout" time="0">
    </testcase>
    <testcase classname="q-brush path extraction should map attribute expression layout value to params (on dimension)" name="q-brush path extraction should map attribute expression layout value to params (on dimension)" time="0.001">
    </testcase>
    <testcase classname="q-brush path extraction should map attribute expression layout value to params (on dimension) - without layout" name="q-brush path extraction should map attribute expression layout value to params (on dimension) - without layout" time="0">
    </testcase>
    <testcase classname="q-brush path extraction should map measure layout value on dimension to params" name="q-brush path extraction should map measure layout value on dimension to params" time="0">
    </testcase>
    <testcase classname="q-brush path extraction should map attribute expression layout value to params (on dimension)" name="q-brush path extraction should map attribute expression layout value to params (on dimension)" time="0">
      <skipped/>
    </testcase>
    <testcase classname="q-brush multiRangeSelectTreeDataValues should have method=&quot;multiRangeSelectTreeDataValues&quot;" name="q-brush multiRangeSelectTreeDataValues should have method=&quot;multiRangeSelectTreeDataValues&quot;" time="0">
    </testcase>
    <testcase classname="q-brush multiRangeSelectTreeDataValues should have valid params" name="q-brush multiRangeSelectTreeDataValues should have valid params" time="0">
    </testcase>
  </testsuite>
  <testsuite name="property-resolver" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.219" tests="10">
    <testcase classname="property-resolver setting normalization should normalize primitives" name="property-resolver setting normalization should normalize primitives" time="0.001">
    </testcase>
    <testcase classname="property-resolver setting normalization should not override defaults when type does not match" name="property-resolver setting normalization should not override defaults when type does not match" time="0">
    </testcase>
    <testcase classname="property-resolver setting normalization should normalize functions" name="property-resolver setting normalization should normalize functions" time="0">
    </testcase>
    <testcase classname="property-resolver setting normalization should normalize objects" name="property-resolver setting normalization should normalize objects" time="0">
    </testcase>
    <testcase classname="property-resolver setting normalization should attach scale" name="property-resolver setting normalization should attach scale" time="0">
    </testcase>
    <testcase classname="property-resolver setting normalization should attach reference" name="property-resolver setting normalization should attach reference" time="0">
    </testcase>
    <testcase classname="property-resolver resolving should resolve constant value" name="property-resolver resolving should resolve constant value" time="0">
    </testcase>
    <testcase classname="property-resolver resolving should resolve fn callback" name="property-resolver resolving should resolve fn callback" time="0">
    </testcase>
    <testcase classname="property-resolver resolving should resolve fn callback with context" name="property-resolver resolving should resolve fn callback with context" time="0.001">
    </testcase>
    <testcase classname="property-resolver resolving should resolve fn callback with parameters" name="property-resolver resolving should resolve fn callback with parameters" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Axis Arc Tick Node" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.244" tests="3">
    <testcase classname="Axis Arc Tick Node Tick Start Tick" name="Axis Arc Tick Node Tick Start Tick" time="0.013">
    </testcase>
    <testcase classname="Axis Arc Tick Node Tick End Tick" name="Axis Arc Tick Node Tick End Tick" time="0">
    </testcase>
    <testcase classname="Axis Arc Tick Node Tick Middle Tick" name="Axis Arc Tick Node Tick Middle Tick" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Brushing" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.235" tests="27">
    <testcase classname="Brushing Resolver should bin multiple collisions into a single brush call" name="Brushing Resolver should bin multiple collisions into a single brush call" time="0.001">
    </testcase>
    <testcase classname="Brushing Resolver should bin multiple collisions into a single brush call using node.data property" name="Brushing Resolver should bin multiple collisions into a single brush call using node.data property" time="0.001">
    </testcase>
    <testcase classname="Brushing Resolver should call range brush when data value is an array" name="Brushing Resolver should call range brush when data value is an array" time="0">
    </testcase>
    <testcase classname="Brushing Resolver should handle when there is no collision" name="Brushing Resolver should handle when there is no collision" time="0">
    </testcase>
    <testcase classname="Brushing Resolver should default to &quot;&quot; if no data context is configured" name="Brushing Resolver should default to &quot;&quot; if no data context is configured" time="0.001">
    </testcase>
    <testcase classname="Brushing Resolver should not attempt to resolve any collisions if event origin is outside the component area" name="Brushing Resolver should not attempt to resolve any collisions if event origin is outside the component area" time="0">
    </testcase>
    <testcase classname="Brushing Resolver should use configured action add" name="Brushing Resolver should use configured action add" time="0.001">
    </testcase>
    <testcase classname="Brushing Resolver should use configured action remove" name="Brushing Resolver should use configured action remove" time="0">
    </testcase>
    <testcase classname="Brushing Resolver should use configured action set" name="Brushing Resolver should use configured action set" time="0.003">
    </testcase>
    <testcase classname="Brushing Resolver touch events should resolve collisions with a touchRadius if configured" name="Brushing Resolver touch events should resolve collisions with a touchRadius if configured" time="0">
    </testcase>
    <testcase classname="Brushing Resolver should resolve collisions with a mouseRadius if configured" name="Brushing Resolver should resolve collisions with a mouseRadius if configured" time="0.001">
    </testcase>
    <testcase classname="Brushing Styler should call containsMappedData with provided arguments" name="Brushing Styler should call containsMappedData with provided arguments" time="0.001">
    </testcase>
    <testcase classname="Brushing Styler should call containsMappedData with provided arguments when data is a function" name="Brushing Styler should call containsMappedData with provided arguments when data is a function" time="0">
    </testcase>
    <testcase classname="Brushing Styler start should store all original styling values" name="Brushing Styler start should store all original styling values" time="0">
    </testcase>
    <testcase classname="Brushing Styler start should inactive all nodes" name="Brushing Styler start should inactive all nodes" time="0.001">
    </testcase>
    <testcase classname="Brushing Styler end should restore all original styling values" name="Brushing Styler end should restore all original styling values" time="0">
    </testcase>
    <testcase classname="Brushing Styler start and end should call renderer.render by default" name="Brushing Styler start and end should call renderer.render by default" time="0">
    </testcase>
    <testcase classname="Brushing Styler start, end and update should call renderer.render if supressRender=false is passed" name="Brushing Styler start, end and update should call renderer.render if supressRender=false is passed" time="0.001">
    </testcase>
    <testcase classname="Brushing Styler start and end should not call renderer.render if supressRender=true is passed" name="Brushing Styler start and end should not call renderer.render if supressRender=true is passed" time="0">
    </testcase>
    <testcase classname="Brushing Styler end should restore all original styling values if supressRender=true is passed but not call render" name="Brushing Styler end should restore all original styling values if supressRender=true is passed but not call render" time="0">
    </testcase>
    <testcase classname="Brushing Styler update should apply styling values" name="Brushing Styler update should apply styling values" time="0.001">
    </testcase>
    <testcase classname="Brushing Styler update should apply sorting nodes" name="Brushing Styler update should apply sorting nodes" time="0">
    </testcase>
    <testcase classname="Brushing Styler update should use customRender if any" name="Brushing Styler update should use customRender if any" time="0">
    </testcase>
    <testcase classname="Brushing Styler update should apply styling values only to shape nodes" name="Brushing Styler update should apply styling values only to shape nodes" time="0.001">
    </testcase>
    <testcase classname="Brushing Styler update should apply styling values only to shape nodes with data attribute" name="Brushing Styler update should apply styling values only to shape nodes with data attribute" time="0">
    </testcase>
    <testcase classname="Brushing Styler should only affect filtered nodes" name="Brushing Styler should only affect filtered nodes" time="0.001">
    </testcase>
    <testcase classname="Brushing Styler should resolve style function property functions" name="Brushing Styler should resolve style function property functions" time="0">
    </testcase>
  </testsuite>
  <testsuite name="box shapes" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.228" tests="12">
    <testcase classname="box shapes out of bounds arrows should create a correct out of bounds shape at the bottom of the graph" name="box shapes out of bounds arrows should create a correct out of bounds shape at the bottom of the graph" time="0">
    </testcase>
    <testcase classname="box shapes out of bounds arrows should create a correct out of bounds shape at the top of the graph" name="box shapes out of bounds arrows should create a correct out of bounds shape at the top of the graph" time="0">
    </testcase>
    <testcase classname="box shapes should create a correct out of bounds shape at the bottom of the graph with flipXY" name="box shapes should create a correct out of bounds shape at the bottom of the graph with flipXY" time="0">
    </testcase>
    <testcase classname="box shapes should create a correct out of bounds shape at the top of the graph with flipXY" name="box shapes should create a correct out of bounds shape at the top of the graph with flipXY" time="0">
    </testcase>
    <testcase classname="box shapes box should create a correct box shape" name="box shapes box should create a correct box shape" time="0.001">
    </testcase>
    <testcase classname="box shapes verticalLine should create a correct vertical line" name="box shapes verticalLine should create a correct vertical line" time="0">
    </testcase>
    <testcase classname="box shapes horizontalLine should create a correct horizontal line" name="box shapes horizontalLine should create a correct horizontal line" time="0">
    </testcase>
    <testcase classname="box shapes getBoxWidth width is between min and max pixel width" name="box shapes getBoxWidth width is between min and max pixel width" time="0">
    </testcase>
    <testcase classname="box shapes getBoxWidth width is less than min width" name="box shapes getBoxWidth width is less than min width" time="0">
    </testcase>
    <testcase classname="box shapes getBoxWidth negative bandwidth - width is less than min width" name="box shapes getBoxWidth negative bandwidth - width is less than min width" time="0">
    </testcase>
    <testcase classname="box shapes getBoxWidth width is larger than max width" name="box shapes getBoxWidth width is larger than max width" time="0">
    </testcase>
    <testcase classname="box shapes getBoxWidth negative bandwidth - width is larger than max width" name="box shapes getBoxWidth negative bandwidth - width is larger than max width" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="canvas-gradient" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.227" tests="3">
    <testcase classname="canvas-gradient create should return a pattern" name="canvas-gradient create should return a pattern" time="0.001">
    </testcase>
    <testcase classname="canvas-gradient create should maintain a cache" name="canvas-gradient create should maintain a cache" time="0">
    </testcase>
    <testcase classname="canvas-gradient create should draw a pattern" name="canvas-gradient create should draw a pattern" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="qTime - Resolve levels" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.227" tests="10">
    <testcase classname="qTime - Resolve levels given enough space is available, should start on the last level" name="qTime - Resolve levels given enough space is available, should start on the last level" time="0">
    </testcase>
    <testcase classname="qTime - Resolve levels given no space is available, should return the first level" name="qTime - Resolve levels given no space is available, should return the first level" time="0.001">
    </testcase>
    <testcase classname="qTime - Resolve levels auto-calender scenario 1: outer and inner resolved at highest granularity" name="qTime - Resolve levels auto-calender scenario 1: outer and inner resolved at highest granularity" time="0">
    </testcase>
    <testcase classname="qTime - Resolve levels auto-calender scenario 2: outer and inner resolved at mid granularity" name="qTime - Resolve levels auto-calender scenario 2: outer and inner resolved at mid granularity" time="0">
    </testcase>
    <testcase classname="qTime - Resolve levels data handling should handle empty dataset" name="qTime - Resolve levels data handling should handle empty dataset" time="0">
    </testcase>
    <testcase classname="qTime - Resolve levels data handling should handle non-array data param" name="qTime - Resolve levels data handling should handle non-array data param" time="0">
    </testcase>
    <testcase classname="qTime - Resolve levels data handling should handle single value dataset" name="qTime - Resolve levels data handling should handle single value dataset" time="0">
    </testcase>
    <testcase classname="qTime - Resolve levels data handling should handle empty qTicks" name="qTime - Resolve levels data handling should handle empty qTicks" time="0">
    </testcase>
    <testcase classname="qTime - Resolve levels qTags should use hidden data only if all data values are hidden" name="qTime - Resolve levels qTags should use hidden data only if all data values are hidden" time="0.001">
    </testcase>
    <testcase classname="qTime - Resolve levels qTags should not use qualified values as inner level" name="qTime - Resolve levels qTags should not use qualified values as inner level" time="0">
    </testcase>
  </testsuite>
  <testsuite name="placement" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.231" tests="18">
    <testcase classname="placement should return best possible placement strategy on unsupported placement property" name="placement should return best possible placement strategy on unsupported placement property" time="0.001">
    </testcase>
    <testcase classname="placement should return placement strategy based on string definition" name="placement should return placement strategy based on string definition" time="0">
    </testcase>
    <testcase classname="placement should return placement strategy based on object definition" name="placement should return placement strategy based on object definition" time="0">
    </testcase>
    <testcase classname="placement should resolve placement strategy as a function" name="placement should resolve placement strategy as a function" time="0">
    </testcase>
    <testcase classname="placement should return custom placement strategy" name="placement should return custom placement strategy" time="0.001">
    </testcase>
    <testcase classname="placement strategies pointer dock - auto, right" name="placement strategies pointer dock - auto, right" time="0">
    </testcase>
    <testcase classname="placement strategies pointer dock - fallback dock" name="placement strategies pointer dock - fallback dock" time="0">
    </testcase>
    <testcase classname="placement strategies bounds dock - top" name="placement strategies bounds dock - top" time="0">
    </testcase>
    <testcase classname="placement strategies bounds dock - auto, top" name="placement strategies bounds dock - auto, top" time="0.001">
    </testcase>
    <testcase classname="placement strategies bounds dock - fallback dock" name="placement strategies bounds dock - fallback dock" time="0">
    </testcase>
    <testcase classname="placement strategies bounds should use scaleRatio in placement" name="placement strategies bounds should use scaleRatio in placement" time="0">
    </testcase>
    <testcase classname="placement strategies bounds should clamp position to node component bounds" name="placement strategies bounds should clamp position to node component bounds" time="0">
    </testcase>
    <testcase classname="placement strategies dock - inside dock" name="placement strategies dock - inside dock" time="0.001">
    </testcase>
    <testcase classname="placement strategies slice dock - auto, bottom" name="placement strategies slice dock - auto, bottom" time="0">
    </testcase>
    <testcase classname="placement strategies slice dock - explicit, bottom" name="placement strategies slice dock - explicit, bottom" time="0">
    </testcase>
    <testcase classname="placement strategies slice should use scaleRatio in placement" name="placement strategies slice should use scaleRatio in placement" time="0">
    </testcase>
    <testcase classname="placement strategies slice should use margin in placement" name="placement strategies slice should use margin in placement" time="0.001">
    </testcase>
    <testcase classname="calcOffset should calculate the right offset" name="calcOffset should calculate the right offset" time="0">
    </testcase>
  </testsuite>
  <testsuite name="JSON Path resolver" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.225" tests="3">
    <testcase classname="JSON Path resolver should resolve basic path" name="JSON Path resolver should resolve basic path" time="0">
    </testcase>
    <testcase classname="JSON Path resolver should resolve path to array index" name="JSON Path resolver should resolve path to array index" time="0">
    </testcase>
    <testcase classname="JSON Path resolver should map array values when path to specific value is skipped" name="JSON Path resolver should map array values when path to specific value is skipped" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Word Break" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.229" tests="34">
    <testcase classname="Word Break breakAll maxLines should respect maxLines and indicate if a subset is returned" name="Word Break breakAll maxLines should respect maxLines and indicate if a subset is returned" time="0.001">
    </testcase>
    <testcase classname="Word Break breakAll maxLines should have a lower boundary clamp maxLines of 1" name="Word Break breakAll maxLines should have a lower boundary clamp maxLines of 1" time="0">
    </testcase>
    <testcase classname="Word Break breakAll maxLines should line-break full text if maxLines is not set" name="Word Break breakAll maxLines should line-break full text if maxLines is not set" time="0.001">
    </testcase>
    <testcase classname="Word Break breakAll maxHeight should respect maxHeight and indicate if a subset is returned" name="Word Break breakAll maxHeight should respect maxHeight and indicate if a subset is returned" time="0">
    </testcase>
    <testcase classname="Word Break breakAll maxHeight should handle NaN values" name="Word Break breakAll maxHeight should handle NaN values" time="0">
    </testcase>
    <testcase classname="Word Break breakAll maxHeight should use the lowest value of maxHeight and maxLines" name="Word Break breakAll maxHeight should use the lowest value of maxHeight and maxLines" time="0">
    </testcase>
    <testcase classname="Word Break breakAll maxWidth should handle if maxWidth is undefined" name="Word Break breakAll maxWidth should handle if maxWidth is undefined" time="0">
    </testcase>
    <testcase classname="Word Break breakAll maxWidth should handle if maxWidth is less then char width" name="Word Break breakAll maxWidth should handle if maxWidth is less then char width" time="0">
    </testcase>
    <testcase classname="Word Break breakAll maxWidth should continue line-break if a single char is wider then maxWidth" name="Word Break breakAll maxWidth should continue line-break if a single char is wider then maxWidth" time="0">
    </testcase>
    <testcase classname="Word Break breakAll Break opportunities should respect mandatory break opportunities in text" name="Word Break breakAll Break opportunities should respect mandatory break opportunities in text" time="0.001">
    </testcase>
    <testcase classname="Word Break breakAll Break opportunities should include mandatory break opportunities in maxLines check" name="Word Break breakAll Break opportunities should include mandatory break opportunities in maxLines check" time="0">
    </testcase>
    <testcase classname="Word Break breakAll Hyphenation should inject hyphens" name="Word Break breakAll Hyphenation should inject hyphens" time="0">
    </testcase>
    <testcase classname="Word Break breakAll Hyphenation should not inject hyphens if there isnt a pairwise match" name="Word Break breakAll Hyphenation should not inject hyphens if there isnt a pairwise match" time="0">
    </testcase>
    <testcase classname="Word Break breakAll Hyphenation should not inject hyphens if only a single char fits on the line" name="Word Break breakAll Hyphenation should not inject hyphens if only a single char fits on the line" time="0">
    </testcase>
    <testcase classname="Word Break breakAll Suppress characters should suppress visisble word separator" name="Word Break breakAll Suppress characters should suppress visisble word separator" time="0">
    </testcase>
    <testcase classname="Word Break breakWord maxLines should respect maxLines and indicate if a subset is returned" name="Word Break breakWord maxLines should respect maxLines and indicate if a subset is returned" time="0">
    </testcase>
    <testcase classname="Word Break breakWord maxLines should have a lower boundary clamp maxLines of 1" name="Word Break breakWord maxLines should have a lower boundary clamp maxLines of 1" time="0">
    </testcase>
    <testcase classname="Word Break breakWord maxLines should line-break full text if maxLines is not set" name="Word Break breakWord maxLines should line-break full text if maxLines is not set" time="0">
    </testcase>
    <testcase classname="Word Break breakWord maxHeight should respect maxHeight and indicate if a subset is returned" name="Word Break breakWord maxHeight should respect maxHeight and indicate if a subset is returned" time="0">
    </testcase>
    <testcase classname="Word Break breakWord maxHeight should handle NaN values" name="Word Break breakWord maxHeight should handle NaN values" time="0">
    </testcase>
    <testcase classname="Word Break breakWord maxHeight should use the lowest value of maxHeight and maxLines" name="Word Break breakWord maxHeight should use the lowest value of maxHeight and maxLines" time="0">
    </testcase>
    <testcase classname="Word Break breakWord maxWidth should handle if maxWidth is undefined" name="Word Break breakWord maxWidth should handle if maxWidth is undefined" time="0">
    </testcase>
    <testcase classname="Word Break breakWord maxWidth should handle if maxWidth is less then char width" name="Word Break breakWord maxWidth should handle if maxWidth is less then char width" time="0">
    </testcase>
    <testcase classname="Word Break breakWord maxWidth should continue line-break if a sequence is wider then maxWidth" name="Word Break breakWord maxWidth should continue line-break if a sequence is wider then maxWidth" time="0">
    </testcase>
    <testcase classname="Word Break breakWord Break opportunities should respect mandatory break opportunities in text" name="Word Break breakWord Break opportunities should respect mandatory break opportunities in text" time="0">
    </testcase>
    <testcase classname="Word Break breakWord Break opportunities should identify hyphen-minus sign as a break opportunity" name="Word Break breakWord Break opportunities should identify hyphen-minus sign as a break opportunity" time="0">
    </testcase>
    <testcase classname="Word Break breakWord Break opportunities should identify hyphen sign as a break opportunity" name="Word Break breakWord Break opportunities should identify hyphen sign as a break opportunity" time="0">
    </testcase>
    <testcase classname="Word Break breakWord Break opportunities should preserve multiple white-spaces in sequence" name="Word Break breakWord Break opportunities should preserve multiple white-spaces in sequence" time="0">
    </testcase>
    <testcase classname="Word Break breakWord Break opportunities should preserve white-spaces as first character" name="Word Break breakWord Break opportunities should preserve white-spaces as first character" time="0">
    </testcase>
    <testcase classname="Word Break breakWord Break opportunities should preserve multiple white-spaces in a single line" name="Word Break breakWord Break opportunities should preserve multiple white-spaces in a single line" time="0.001">
    </testcase>
    <testcase classname="Word Break breakWord Hyphenation should inject hyphens" name="Word Break breakWord Hyphenation should inject hyphens" time="0">
    </testcase>
    <testcase classname="Word Break breakWord Hyphenation should not inject hyphens if there isnt a pairwise match" name="Word Break breakWord Hyphenation should not inject hyphens if there isnt a pairwise match" time="0">
    </testcase>
    <testcase classname="Word Break breakWord Hyphenation should not inject hyphens if pair token is suppressable" name="Word Break breakWord Hyphenation should not inject hyphens if pair token is suppressable" time="0">
    </testcase>
    <testcase classname="Word Break breakWord Hyphenation should not inject hyphens if only a single char fits on the line" name="Word Break breakWord Hyphenation should not inject hyphens if only a single char fits on the line" time="0">
    </testcase>
  </testsuite>
  <testsuite name="canvas-gradient" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.229" tests="6">
    <testcase classname="canvas-gradient radial should create radial gradients properly" name="canvas-gradient radial should create radial gradients properly" time="0">
    </testcase>
    <testcase classname="canvas-gradient radial should have been called with proper arguments" name="canvas-gradient radial should have been called with proper arguments" time="0.001">
    </testcase>
    <testcase classname="canvas-gradient linear should create linear gradients properly" name="canvas-gradient linear should create linear gradients properly" time="0">
    </testcase>
    <testcase classname="canvas-gradient linear should create linear gradient with custom gradient bounds" name="canvas-gradient linear should create linear gradient with custom gradient bounds" time="0.001">
    </testcase>
    <testcase classname="canvas-gradient linear should have been called with proper arguments" name="canvas-gradient linear should have been called with proper arguments" time="0">
    </testcase>
    <testcase classname="canvas-gradient linear should have stops and colors" name="canvas-gradient linear should have stops and colors" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Scroll api" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.239" tests="6">
    <testcase classname="Scroll api scroll start at zero" name="Scroll api scroll start at zero" time="0">
    </testcase>
    <testcase classname="Scroll api limit scroll to valid range on moveTo" name="Scroll api limit scroll to valid range on moveTo" time="0.001">
    </testcase>
    <testcase classname="Scroll api limit scroll to valid range on update" name="Scroll api limit scroll to valid range on update" time="0">
    </testcase>
    <testcase classname="Scroll api keep old value if not updated" name="Scroll api keep old value if not updated" time="0">
    </testcase>
    <testcase classname="Scroll api trigger update event on viewSize change" name="Scroll api trigger update event on viewSize change" time="0">
    </testcase>
    <testcase classname="Scroll api should only trigger update once if viewSize and start changes" name="Scroll api should only trigger update once if viewSize and start changes" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Matrix" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.234" tests="16">
    <testcase classname="Matrix should default to identity matrix" name="Matrix should default to identity matrix" time="0">
    </testcase>
    <testcase classname="Matrix should handle setting element values" name="Matrix should handle setting element values" time="0">
    </testcase>
    <testcase classname="Matrix should calculate addition" name="Matrix should calculate addition" time="0">
    </testcase>
    <testcase classname="Matrix should calculate scalar multiplication" name="Matrix should calculate scalar multiplication" time="0">
    </testcase>
    <testcase classname="Matrix should reset the matrix to identity values" name="Matrix should reset the matrix to identity values" time="0.001">
    </testcase>
    <testcase classname="Matrix should calculate affine translation" name="Matrix should calculate affine translation" time="0">
    </testcase>
    <testcase classname="Matrix should calculate affine rotation" name="Matrix should calculate affine rotation" time="0">
    </testcase>
    <testcase classname="Matrix should calculate affine scaling" name="Matrix should calculate affine scaling" time="0">
    </testcase>
    <testcase classname="Matrix should transpose the matrix" name="Matrix should transpose the matrix" time="0">
    </testcase>
    <testcase classname="Matrix should return determinant value" name="Matrix should return determinant value" time="0">
    </testcase>
    <testcase classname="Matrix should invert the matrix" name="Matrix should invert the matrix" time="0">
    </testcase>
    <testcase classname="Matrix should handle linear transformations" name="Matrix should handle linear transformations" time="0">
    </testcase>
    <testcase classname="Matrix should handle transform by a six value coordinate system" name="Matrix should handle transform by a six value coordinate system" time="0">
    </testcase>
    <testcase classname="Matrix should clone element values" name="Matrix should clone element values" time="0">
    </testcase>
    <testcase classname="Matrix should maintain a stack of transforms" name="Matrix should maintain a stack of transforms" time="0">
    </testcase>
    <testcase classname="Matrix should print nicely" name="Matrix should print nicely" time="0">
    </testcase>
  </testsuite>
  <testsuite name="legend layout" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.228" tests="11">
    <testcase classname="legend layout vertical should position title at top" name="legend layout vertical should position title at top" time="0">
    </testcase>
    <testcase classname="legend layout vertical should not show navigation" name="legend layout vertical should not show navigation" time="0">
    </testcase>
    <testcase classname="legend layout vertical should position content below title" name="legend layout vertical should position content below title" time="0">
    </testcase>
    <testcase classname="legend layout vertical should have a preferredSize" name="legend layout vertical should have a preferredSize" time="0">
    </testcase>
    <testcase classname="legend layout horizontal without overflow should position title at left" name="legend layout horizontal without overflow should position title at left" time="0">
    </testcase>
    <testcase classname="legend layout horizontal without overflow should not show navigation" name="legend layout horizontal without overflow should not show navigation" time="0">
    </testcase>
    <testcase classname="legend layout horizontal without overflow should position content to the right" name="legend layout horizontal without overflow should position content to the right" time="0">
    </testcase>
    <testcase classname="legend layout horizontal without overflow should not reserve more than needed for visible parts" name="legend layout horizontal without overflow should not reserve more than needed for visible parts" time="0">
    </testcase>
    <testcase classname="legend layout horizontal with overflow, rtl and no title should not show title" name="legend layout horizontal with overflow, rtl and no title should not show title" time="0">
    </testcase>
    <testcase classname="legend layout horizontal with overflow, rtl and no title should position navigation to the left" name="legend layout horizontal with overflow, rtl and no title should position navigation to the left" time="0">
    </testcase>
    <testcase classname="legend layout horizontal with overflow, rtl and no title should position content to the right" name="legend layout horizontal with overflow, rtl and no title should position content to the right" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="polygon to polygon collider" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.235" tests="12">
    <testcase classname="polygon to polygon collider should handle empty array of points" name="polygon to polygon collider should handle empty array of points" time="0">
    </testcase>
    <testcase classname="polygon to polygon collider should ignore array if it contains less than 3 points" name="polygon to polygon collider should ignore array if it contains less than 3 points" time="0">
    </testcase>
    <testcase classname="polygon to polygon collider left to right line" name="polygon to polygon collider left to right line" time="0.001">
    </testcase>
    <testcase classname="polygon to polygon collider left to right line with forceOrientation" name="polygon to polygon collider left to right line with forceOrientation" time="0">
    </testcase>
    <testcase classname="polygon to polygon collider right to left line" name="polygon to polygon collider right to left line" time="0">
    </testcase>
    <testcase classname="polygon to polygon collider right to left line with forceOrientation" name="polygon to polygon collider right to left line with forceOrientation" time="0.001">
    </testcase>
    <testcase classname="polygon to polygon collider top to bottom line" name="polygon to polygon collider top to bottom line" time="0">
    </testcase>
    <testcase classname="polygon to polygon collider top to bottom line with forceOrientation" name="polygon to polygon collider top to bottom line with forceOrientation" time="0.001">
    </testcase>
    <testcase classname="polygon to polygon collider bottom to top line" name="polygon to polygon collider bottom to top line" time="0">
    </testcase>
    <testcase classname="polygon to polygon collider bottom to top line with forceOrientation" name="polygon to polygon collider bottom to top line with forceOrientation" time="0">
    </testcase>
    <testcase classname="polygon to polygon collider turn around vertical line" name="polygon to polygon collider turn around vertical line" time="0.001">
    </testcase>
    <testcase classname="polygon to polygon collider turn around hoprizontal line" name="polygon to polygon collider turn around hoprizontal line" time="0">
    </testcase>
  </testsuite>
  <testsuite name="legend-resolver" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.242" tests="10">
    <testcase classname="legend-resolver should resolve defaults" name="legend-resolver should resolve defaults" time="0">
    </testcase>
    <testcase classname="legend-resolver should resolve for threshold scale" name="legend-resolver should resolve for threshold scale" time="0">
    </testcase>
    <testcase classname="legend-resolver should resolve correctly using a custom formatter" name="legend-resolver should resolve correctly using a custom formatter" time="0">
    </testcase>
    <testcase classname="legend-resolver resolveSettings should resolve labels per datum" name="legend-resolver resolveSettings should resolve labels per datum" time="0">
    </testcase>
    <testcase classname="legend-resolver resolveSettings should resolve labels by `label` function if available" name="legend-resolver resolveSettings should resolve labels by `label` function if available" time="0">
    </testcase>
    <testcase classname="legend-resolver resolveSettings should resolve labels by `labels` function if available" name="legend-resolver resolveSettings should resolve labels by `labels` function if available" time="0">
    </testcase>
    <testcase classname="legend-resolver resolveSettings should resolve items per datum" name="legend-resolver resolveSettings should resolve items per datum" time="0">
    </testcase>
    <testcase classname="legend-resolver resolveSettings should resolve symbols per datum" name="legend-resolver resolveSettings should resolve symbols per datum" time="0.001">
    </testcase>
    <testcase classname="legend-resolver resolveSettings should resolve title" name="legend-resolver resolveSettings should resolve title" time="0">
    </testcase>
    <testcase classname="legend-resolver resolveSettings should resolve layout" name="legend-resolver resolveSettings should resolve layout" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Axis Line Node" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.227" tests="8">
    <testcase classname="Axis Line Node Line Left align" name="Axis Line Node Line Left align" time="0">
    </testcase>
    <testcase classname="Axis Line Node Line Right align" name="Axis Line Node Line Right align" time="0.001">
    </testcase>
    <testcase classname="Axis Line Node Line Top align" name="Axis Line Node Line Top align" time="0">
    </testcase>
    <testcase classname="Axis Line Node Line Bottom align" name="Axis Line Node Line Bottom align" time="0">
    </testcase>
    <testcase classname="Axis Line Node Line Within an offset container Left align" name="Axis Line Node Line Within an offset container Left align" time="0">
    </testcase>
    <testcase classname="Axis Line Node Line Within an offset container Right align" name="Axis Line Node Line Within an offset container Right align" time="0">
    </testcase>
    <testcase classname="Axis Line Node Line Within an offset container Top align" name="Axis Line Node Line Within an offset container Top align" time="0">
    </testcase>
    <testcase classname="Axis Line Node Line Within an offset container Bottom align" name="Axis Line Node Line Within an offset container Bottom align" time="0">
    </testcase>
  </testsuite>
  <testsuite name="renderer-box" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.238" tests="17">
    <testcase classname="renderer-box should return a rect given valid values" name="renderer-box should return a rect given valid values" time="0">
    </testcase>
    <testcase classname="renderer-box should return default x value given input is invalid" name="renderer-box should return default x value given input is invalid" time="0">
    </testcase>
    <testcase classname="renderer-box should return default y value given input is invalid" name="renderer-box should return default y value given input is invalid" time="0">
    </testcase>
    <testcase classname="renderer-box should return default width value given input is invalid" name="renderer-box should return default width value given input is invalid" time="0">
    </testcase>
    <testcase classname="renderer-box should return default height value given input is invalid" name="renderer-box should return default height value given input is invalid" time="0">
    </testcase>
    <testcase classname="renderer-box scaleRatio should return a scaleRatio given valid values" name="renderer-box scaleRatio should return a scaleRatio given valid values" time="0">
    </testcase>
    <testcase classname="renderer-box scaleRatio should return default x value given input is invalid" name="renderer-box scaleRatio should return default x value given input is invalid" time="0">
    </testcase>
    <testcase classname="renderer-box scaleRatio should return default y value given input is invalid" name="renderer-box scaleRatio should return default y value given input is invalid" time="0">
    </testcase>
    <testcase classname="renderer-box scaleRatio should return default value given scaleRatio is missing" name="renderer-box scaleRatio should return default value given scaleRatio is missing" time="0">
    </testcase>
    <testcase classname="renderer-box margin should return a margin given valid values" name="renderer-box margin should return a margin given valid values" time="0">
    </testcase>
    <testcase classname="renderer-box margin should return default left value given input is invalid" name="renderer-box margin should return default left value given input is invalid" time="0">
    </testcase>
    <testcase classname="renderer-box margin should return default top value given input is invalid" name="renderer-box margin should return default top value given input is invalid" time="0">
    </testcase>
    <testcase classname="renderer-box margin should return default value given margin is missing" name="renderer-box margin should return default value given margin is missing" time="0">
    </testcase>
    <testcase classname="renderer-box edgeBleed should return left value given input is valid" name="renderer-box edgeBleed should return left value given input is valid" time="0">
    </testcase>
    <testcase classname="renderer-box edgeBleed should return right value given input is valid" name="renderer-box edgeBleed should return right value given input is valid" time="0">
    </testcase>
    <testcase classname="renderer-box edgeBleed should return top value given input is valid" name="renderer-box edgeBleed should return top value given input is valid" time="0">
    </testcase>
    <testcase classname="renderer-box edgeBleed should return bottom value given input is valid" name="renderer-box edgeBleed should return bottom value given input is valid" time="0">
    </testcase>
  </testsuite>
  <testsuite name="renderer" errors="0" failures="0" skipped="1" timestamp="2024-11-14T11:48:29" time="0.236" tests="5">
    <testcase classname="renderer should be a function" name="renderer should be a function" time="0">
    </testcase>
    <testcase classname="renderer should throw error when type does not exist" name="renderer should throw error when type does not exist" time="0">
      <skipped/>
    </testcase>
    <testcase classname="renderer should create a specific type" name="renderer should create a specific type" time="0">
    </testcase>
    <testcase classname="renderer should use default renderer when argument is ommitted" name="renderer should use default renderer when argument is ommitted" time="0">
    </testcase>
    <testcase classname="renderer should change default" name="renderer should change default" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Axis Tick Node" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.236" tests="12">
    <testcase classname="Axis Tick Node Tick Left align middle tick" name="Axis Tick Node Tick Left align middle tick" time="0.001">
    </testcase>
    <testcase classname="Axis Tick Node Tick Left align start tick" name="Axis Tick Node Tick Left align start tick" time="0">
    </testcase>
    <testcase classname="Axis Tick Node Tick Left align end tick" name="Axis Tick Node Tick Left align end tick" time="0">
    </testcase>
    <testcase classname="Axis Tick Node Tick Right align middle tick" name="Axis Tick Node Tick Right align middle tick" time="0">
    </testcase>
    <testcase classname="Axis Tick Node Tick Right align start tick" name="Axis Tick Node Tick Right align start tick" time="0">
    </testcase>
    <testcase classname="Axis Tick Node Tick Right align end tick" name="Axis Tick Node Tick Right align end tick" time="0">
    </testcase>
    <testcase classname="Axis Tick Node Tick Top align middle tick" name="Axis Tick Node Tick Top align middle tick" time="0">
    </testcase>
    <testcase classname="Axis Tick Node Tick Top align start tick" name="Axis Tick Node Tick Top align start tick" time="0">
    </testcase>
    <testcase classname="Axis Tick Node Tick Top align end tick" name="Axis Tick Node Tick Top align end tick" time="0.001">
    </testcase>
    <testcase classname="Axis Tick Node Tick Bottom align middle tick" name="Axis Tick Node Tick Bottom align middle tick" time="0">
    </testcase>
    <testcase classname="Axis Tick Node Tick Bottom align start tick" name="Axis Tick Node Tick Bottom align start tick" time="0">
    </testcase>
    <testcase classname="Axis Tick Node Tick Bottom align end tick" name="Axis Tick Node Tick Bottom align end tick" time="0">
    </testcase>
  </testsuite>
  <testsuite name="style-resolver" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.235" tests="14">
    <testcase classname="style-resolver should resolve a primitive reference" name="style-resolver should resolve a primitive reference" time="0">
    </testcase>
    <testcase classname="style-resolver should resolve a mixin reference" name="style-resolver should resolve a mixin reference" time="0">
    </testcase>
    <testcase classname="style-resolver should not include variables" name="style-resolver should not include variables" time="0">
    </testcase>
    <testcase classname="style-resolver should resolve a mixin reference which in turn has references" name="style-resolver should resolve a mixin reference which in turn has references" time="0.001">
    </testcase>
    <testcase classname="style-resolver should resolve an extended mixin" name="style-resolver should resolve an extended mixin" time="0">
    </testcase>
    <testcase classname="style-resolver should extend in root node" name="style-resolver should extend in root node" time="0">
    </testcase>
    <testcase classname="style-resolver should extend something extended" name="style-resolver should extend something extended" time="0">
    </testcase>
    <testcase classname="style-resolver should throw error when finding a cyclical reference to itself" name="style-resolver should throw error when finding a cyclical reference to itself" time="0">
    </testcase>
    <testcase classname="style-resolver should throw error when finding a cyclical reference to itself in something that it has extended" name="style-resolver should throw error when finding a cyclical reference to itself in something that it has extended" time="0">
    </testcase>
    <testcase classname="style-resolver should throw error when finding a cyclical reference when extending itself" name="style-resolver should throw error when finding a cyclical reference when extending itself" time="0">
    </testcase>
    <testcase classname="style-resolver should resolve style recursively" name="style-resolver should resolve style recursively" time="0">
    </testcase>
    <testcase classname="style-resolver should resolve style recursively in root" name="style-resolver should resolve style recursively in root" time="0">
    </testcase>
    <testcase classname="style-resolver should throw error when finding primitive cyclical reference" name="style-resolver should throw error when finding primitive cyclical reference" time="0">
    </testcase>
    <testcase classname="style-resolver should resolve style extend recursively with multiple input values" name="style-resolver should resolve style extend recursively with multiple input values" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Quad Bezier curve" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.24" tests="1">
    <testcase classname="Quad Bezier curve generate points on curve" name="Quad Bezier curve generate points on curve" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="settings resolver" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.242" tests="2">
    <testcase classname="settings resolver should call externals with proper arguments" name="settings resolver should call externals with proper arguments" time="0.001">
    </testcase>
    <testcase classname="settings resolver should call externals with proper arguments when no dataset is provided" name="settings resolver should call externals with proper arguments when no dataset is provided" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Arc to center" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.235" tests="10">
    <testcase classname="Arc to center largeArcFlag=0, sweepFlag=0" name="Arc to center largeArcFlag=0, sweepFlag=0" time="0">
    </testcase>
    <testcase classname="Arc to center largeArcFlag=1, sweepFlag=0" name="Arc to center largeArcFlag=1, sweepFlag=0" time="0">
    </testcase>
    <testcase classname="Arc to center largeArcFlag=0, sweepFlag=1" name="Arc to center largeArcFlag=0, sweepFlag=1" time="0">
    </testcase>
    <testcase classname="Arc to center largeArcFlag=1, sweepFlag=1" name="Arc to center largeArcFlag=1, sweepFlag=1" time="0">
    </testcase>
    <testcase classname="Arc to center given rx is less then the distance between startX and endX, then rx should be scaled up" name="Arc to center given rx is less then the distance between startX and endX, then rx should be scaled up" time="0">
    </testcase>
    <testcase classname="Arc to center given ry is less then the distance between startY and endY, then ry should be scaled up" name="Arc to center given ry is less then the distance between startY and endY, then ry should be scaled up" time="0">
    </testcase>
    <testcase classname="Arc to center should use absolute value of rx/ry" name="Arc to center should use absolute value of rx/ry" time="0">
    </testcase>
    <testcase classname="Arc to center should handle opposite start/end positions" name="Arc to center should handle opposite start/end positions" time="0">
    </testcase>
    <testcase classname="Arc to center vertical ellipse" name="Arc to center vertical ellipse" time="0.001">
    </testcase>
    <testcase classname="Arc to center horizontal ellipse" name="Arc to center horizontal ellipse" time="0">
    </testcase>
  </testsuite>
  <testsuite name="colorObject" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.242" tests="21">
    <testcase classname="colorObject should be the correct api" name="colorObject should be the correct api" time="0.001">
    </testcase>
    <testcase classname="colorObject should return undefined if argument is not an object" name="colorObject should return undefined if argument is not an object" time="0">
    </testcase>
    <testcase classname="colorObject should return undefined if no color type can be determined for the object" name="colorObject should return undefined if no color type can be determined for the object" time="0">
    </testcase>
    <testcase classname="colorObject should return an instance of RgbaColor if color type rgb is determined" name="colorObject should return an instance of RgbaColor if color type rgb is determined" time="0">
    </testcase>
    <testcase classname="colorObject should return a new instance of RgbaColor if color type rgb is determined" name="colorObject should return a new instance of RgbaColor if color type rgb is determined" time="0">
    </testcase>
    <testcase classname="colorObject should return a correct RgbaColor instance" name="colorObject should return a correct RgbaColor instance" time="0">
    </testcase>
    <testcase classname="colorObject should return an instance of HslaColor if color type hsl is determined" name="colorObject should return an instance of HslaColor if color type hsl is determined" time="0">
    </testcase>
    <testcase classname="colorObject should return a new instance of HslaColor if color type hsl is determined" name="colorObject should return a new instance of HslaColor if color type hsl is determined" time="0">
    </testcase>
    <testcase classname="colorObject should return a correct RgbaColor instance" name="colorObject should return a correct RgbaColor instance" time="0">
    </testcase>
    <testcase classname="colorObject test should return false if argument is undefined" name="colorObject test should return false if argument is undefined" time="0">
    </testcase>
    <testcase classname="colorObject test should return false if argument is null" name="colorObject test should return false if argument is null" time="0">
    </testcase>
    <testcase classname="colorObject test should return false if keyword is not an object" name="colorObject test should return false if keyword is not an object" time="0">
    </testcase>
    <testcase classname="colorObject test should return false if color type for object cannot be determined" name="colorObject test should return false if color type for object cannot be determined" time="0.001">
    </testcase>
    <testcase classname="colorObject test should return true if color type is rgb" name="colorObject test should return true if color type is rgb" time="0">
    </testcase>
    <testcase classname="colorObject test should return true if color type is hsl" name="colorObject test should return true if color type is hsl" time="0">
    </testcase>
    <testcase classname="colorObject getColorType should return undefined if argument is undefined" name="colorObject getColorType should return undefined if argument is undefined" time="0">
    </testcase>
    <testcase classname="colorObject getColorType should return undefined if argument is null" name="colorObject getColorType should return undefined if argument is null" time="0">
    </testcase>
    <testcase classname="colorObject getColorType should return undefined if argument is not an object" name="colorObject getColorType should return undefined if argument is not an object" time="0">
    </testcase>
    <testcase classname="colorObject getColorType should return undefined if color type for object cannot be determined" name="colorObject getColorType should return undefined if color type for object cannot be determined" time="0">
    </testcase>
    <testcase classname="colorObject getColorType should return rgb if color type is determined to be rgb" name="colorObject getColorType should return rgb if color type is determined to be rgb" time="0">
    </testcase>
    <testcase classname="colorObject getColorType should return hsl if color type is determined to be rgb" name="colorObject getColorType should return hsl if color type is determined to be rgb" time="0">
    </testcase>
  </testsuite>
  <testsuite name="data-util" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.228" tests="9">
    <testcase classname="data-util config-normalizer should attach default accessors from field" name="data-util config-normalizer should attach default accessors from field" time="0">
    </testcase>
    <testcase classname="data-util config-normalizer should attach custom accessors" name="data-util config-normalizer should attach custom accessors" time="0.001">
    </testcase>
    <testcase classname="data-util config-normalizer should support fields array" name="data-util config-normalizer should support fields array" time="0">
    </testcase>
    <testcase classname="data-util config-normalizer should convert string reducer to a function" name="data-util config-normalizer should convert string reducer to a function" time="0">
    </testcase>
    <testcase classname="data-util config-normalizer should accept a filter function" name="data-util config-normalizer should accept a filter function" time="0.001">
    </testcase>
    <testcase classname="data-util config-normalizer should accept primitives and functions" name="data-util config-normalizer should accept primitives and functions" time="0">
    </testcase>
    <testcase classname="data-util collector should collect values into an array when not using value reducer" name="data-util collector should collect values into an array when not using value reducer" time="0">
    </testcase>
    <testcase classname="data-util collector should reduce value and labels" name="data-util collector should reduce value and labels" time="0">
    </testcase>
    <testcase classname="data-util collector should reduce labels using field formatter when reduceLabel is not defined" name="data-util collector should reduce labels using field formatter when reduceLabel is not defined" time="0">
    </testcase>
  </testsuite>
  <testsuite name="crispifier" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.226" tests="6">
    <testcase classname="crispifier should not modify rects with 0 stroke width" name="crispifier should not modify rects with 0 stroke width" time="0.001">
    </testcase>
    <testcase classname="crispifier should modify rects with uneven stroke width" name="crispifier should modify rects with uneven stroke width" time="0">
    </testcase>
    <testcase classname="crispifier should modify lines with uneven stroke width" name="crispifier should modify lines with uneven stroke width" time="0">
    </testcase>
    <testcase classname="crispifier should not modify lines with even stroke width" name="crispifier should not modify lines with even stroke width" time="0">
    </testcase>
    <testcase classname="crispifier should not modify non-straight lines" name="crispifier should not modify non-straight lines" time="0">
    </testcase>
    <testcase classname="crispifier should not modify rects with empty crispmap" name="crispifier should not modify rects with empty crispmap" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Numeric interpolator" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.23" tests="2">
    <testcase classname="Numeric interpolator should linearly interpolate between two numbers" name="Numeric interpolator should linearly interpolate between two numbers" time="0">
    </testcase>
    <testcase classname="Numeric interpolator should extend outside given range" name="Numeric interpolator should extend outside given range" time="0">
    </testcase>
  </testsuite>
  <testsuite name="treeAccessor" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.222" tests="3">
    <testcase classname="treeAccessor should return itself when depths are same" name="treeAccessor should return itself when depths are same" time="0">
    </testcase>
    <testcase classname="treeAccessor should return ancestor when targetDepth is shallower than sourceDepth" name="treeAccessor should return ancestor when targetDepth is shallower than sourceDepth" time="0">
    </testcase>
    <testcase classname="treeAccessor should return flattened descendants when targetDepth is deeper than sourceDepth" name="treeAccessor should return flattened descendants when targetDepth is deeper than sourceDepth" time="0">
    </testcase>
  </testsuite>
  <testsuite name="minmax" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.223" tests="6">
    <testcase classname="minmax should default to [0,1]" name="minmax should default to [0,1]" time="0">
    </testcase>
    <testcase classname="minmax should use provided min value" name="minmax should use provided min value" time="0">
    </testcase>
    <testcase classname="minmax should use provided max value" name="minmax should use provided max value" time="0">
    </testcase>
    <testcase classname="minmax should calculate min from object array" name="minmax should calculate min from object array" time="0">
    </testcase>
    <testcase classname="minmax should calculate max from object array" name="minmax should calculate max from object array" time="0">
    </testcase>
    <testcase classname="minmax should handle NaN values in object array" name="minmax should handle NaN values in object array" time="0">
    </testcase>
  </testsuite>
  <testsuite name="range-collection" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.218" tests="22">
    <testcase classname="range-collection api should be a factory function" name="range-collection api should be a factory function" time="0.001">
    </testcase>
    <testcase classname="range-collection api instance should be a function" name="range-collection api instance should be a function" time="0">
    </testcase>
    <testcase classname="range-collection add should handle a simple range" name="range-collection add should handle a simple range" time="0">
    </testcase>
    <testcase classname="range-collection add should handle multiple ranges" name="range-collection add should handle multiple ranges" time="0">
    </testcase>
    <testcase classname="range-collection add should handle multiple overlapping ranges" name="range-collection add should handle multiple overlapping ranges" time="0">
    </testcase>
    <testcase classname="range-collection add should return true when collection changes" name="range-collection add should return true when collection changes" time="0">
    </testcase>
    <testcase classname="range-collection add should return false when collection does not change" name="range-collection add should return false when collection does not change" time="0">
    </testcase>
    <testcase classname="range-collection remove should break a continuous range into multiple" name="range-collection remove should break a continuous range into multiple" time="0">
    </testcase>
    <testcase classname="range-collection remove should change the span of the range collection" name="range-collection remove should change the span of the range collection" time="0">
    </testcase>
    <testcase classname="range-collection remove should return true when collection changes" name="range-collection remove should return true when collection changes" time="0">
    </testcase>
    <testcase classname="range-collection remove should return false when collection does not change" name="range-collection remove should return false when collection does not change" time="0">
    </testcase>
    <testcase classname="range-collection clear should clear all ranges" name="range-collection clear should clear all ranges" time="0">
    </testcase>
    <testcase classname="range-collection clear should return false when collection does not change" name="range-collection clear should return false when collection does not change" time="0">
    </testcase>
    <testcase classname="range-collection clear should return true when collection changes" name="range-collection clear should return true when collection changes" time="0">
    </testcase>
    <testcase classname="range-collection containsValue should return false for values outside the range" name="range-collection containsValue should return false for values outside the range" time="0">
    </testcase>
    <testcase classname="range-collection containsValue should return true for values inside a range" name="range-collection containsValue should return true for values inside a range" time="0">
    </testcase>
    <testcase classname="range-collection containsValue should be able to configure if min/max should be included" name="range-collection containsValue should be able to configure if min/max should be included" time="0">
    </testcase>
    <testcase classname="range-collection containsRange should return true for range inside the collection" name="range-collection containsRange should return true for range inside the collection" time="0">
    </testcase>
    <testcase classname="range-collection containsRange should return false for range inside and outside the collection" name="range-collection containsRange should return false for range inside and outside the collection" time="0">
    </testcase>
    <testcase classname="range-collection containsRange should return false for range outside the collection" name="range-collection containsRange should return false for range outside the collection" time="0">
    </testcase>
    <testcase classname="range-collection toggle should add to existing range" name="range-collection toggle should add to existing range" time="0.001">
    </testcase>
    <testcase classname="range-collection toggle should remove from existing range" name="range-collection toggle should remove from existing range" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Intersection" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.217" tests="5">
    <testcase classname="Intersection rectContainsRect should fit inside parent rect" name="Intersection rectContainsRect should fit inside parent rect" time="0">
    </testcase>
    <testcase classname="Intersection rectContainsRect should be outside parent rect" name="Intersection rectContainsRect should be outside parent rect" time="0">
    </testcase>
    <testcase classname="Intersection rectContainsRect should not because childRects width is bigger than parentRect" name="Intersection rectContainsRect should not because childRects width is bigger than parentRect" time="0">
    </testcase>
    <testcase classname="Intersection rectContainsRect should not because childRects height is bigger than parentRect" name="Intersection rectContainsRect should not because childRects height is bigger than parentRect" time="0">
    </testcase>
    <testcase classname="Intersection rectContainsRect should not because childRects height and width is bigger than parentRect" name="Intersection rectContainsRect should not because childRects height and width is bigger than parentRect" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Baseline polyfill" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.206" tests="13">
    <testcase classname="Baseline polyfill should handle undefined font-size" name="Baseline polyfill should handle undefined font-size" time="0">
    </testcase>
    <testcase classname="Baseline polyfill should handle font-size as number" name="Baseline polyfill should handle font-size as number" time="0.001">
    </testcase>
    <testcase classname="Baseline polyfill should support &quot;dominant-baseline&quot; attribute" name="Baseline polyfill should support &quot;dominant-baseline&quot; attribute" time="0">
    </testcase>
    <testcase classname="Baseline polyfill should handle undefined baseline" name="Baseline polyfill should handle undefined baseline" time="0">
    </testcase>
    <testcase classname="Baseline polyfill should scale linearly with font-fize" name="Baseline polyfill should scale linearly with font-fize" time="0">
    </testcase>
    <testcase classname="Baseline polyfill should support &quot;alphabetical&quot; baseline" name="Baseline polyfill should support &quot;alphabetical&quot; baseline" time="0">
    </testcase>
    <testcase classname="Baseline polyfill should support &quot;ideographic&quot; baseline" name="Baseline polyfill should support &quot;ideographic&quot; baseline" time="0">
    </testcase>
    <testcase classname="Baseline polyfill should support &quot;hanging&quot; baseline" name="Baseline polyfill should support &quot;hanging&quot; baseline" time="0">
    </testcase>
    <testcase classname="Baseline polyfill should support &quot;middle&quot; baseline" name="Baseline polyfill should support &quot;middle&quot; baseline" time="0">
    </testcase>
    <testcase classname="Baseline polyfill should support &quot;central&quot; baseline" name="Baseline polyfill should support &quot;central&quot; baseline" time="0">
    </testcase>
    <testcase classname="Baseline polyfill should support &quot;mathemetical&quot; baseline" name="Baseline polyfill should support &quot;mathemetical&quot; baseline" time="0">
    </testcase>
    <testcase classname="Baseline polyfill should support &quot;text-before-edge&quot; baseline" name="Baseline polyfill should support &quot;text-before-edge&quot; baseline" time="0">
    </testcase>
    <testcase classname="Baseline polyfill should support &quot;text-after-edge&quot; baseline" name="Baseline polyfill should support &quot;text-after-edge&quot; baseline" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Instance handler" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.205" tests="3">
    <testcase classname="Instance handler setActive" name="Instance handler setActive" time="0">
    </testcase>
    <testcase classname="Instance handler removeActive" name="Instance handler removeActive" time="0">
    </testcase>
    <testcase classname="Instance handler cancelActive" name="Instance handler cancelActive" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="canvasBuffer" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.178" tests="4">
    <testcase classname="canvasBuffer should clone element" name="canvasBuffer should clone element" time="0">
    </testcase>
    <testcase classname="canvasBuffer updateSize should set default buffer size if not provided" name="canvasBuffer updateSize should set default buffer size if not provided" time="0.001">
    </testcase>
    <testcase classname="canvasBuffer updateSize should set provided canvasBufferSize" name="canvasBuffer updateSize should set provided canvasBufferSize" time="0">
    </testcase>
    <testcase classname="canvasBuffer apply should draw bufferCanvas on targetCanvas" name="canvasBuffer apply should draw bufferCanvas on targetCanvas" time="0">
    </testcase>
  </testsuite>
  <testsuite name="value-collection" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.173" tests="12">
    <testcase classname="value-collection api should be a factory function" name="value-collection api should be a factory function" time="0">
    </testcase>
    <testcase classname="value-collection add should return true when successfully adding a value" name="value-collection add should return true when successfully adding a value" time="0">
    </testcase>
    <testcase classname="value-collection add should return false when adding new value fails" name="value-collection add should return false when adding new value fails" time="0">
    </testcase>
    <testcase classname="value-collection add should not add duplicate values" name="value-collection add should not add duplicate values" time="0">
    </testcase>
    <testcase classname="value-collection remove should return true when succssfully remove an existing value" name="value-collection remove should return true when succssfully remove an existing value" time="0">
    </testcase>
    <testcase classname="value-collection remove should return false when attempting to remove a non-existing value" name="value-collection remove should return false when attempting to remove a non-existing value" time="0">
    </testcase>
    <testcase classname="value-collection remove should remove values" name="value-collection remove should remove values" time="0">
    </testcase>
    <testcase classname="value-collection contains should contain a false boolean" name="value-collection contains should contain a false boolean" time="0">
    </testcase>
    <testcase classname="value-collection contains should contain number 3" name="value-collection contains should contain number 3" time="0">
    </testcase>
    <testcase classname="value-collection contains should contain string Foo" name="value-collection contains should contain string Foo" time="0">
    </testcase>
    <testcase classname="value-collection contains should return false when checking for a non-existing vale" name="value-collection contains should return false when checking for a non-existing vale" time="0">
    </testcase>
    <testcase classname="value-collection should clear values" name="value-collection should clear values" time="0">
    </testcase>
  </testsuite>
  <testsuite name="box math" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.147" tests="2">
    <testcase classname="box math cap should cap numbers correctly" name="box math cap should cap numbers correctly" time="0">
    </testcase>
    <testcase classname="box math resolveDiff should calculate right diff between two normalized values" name="box math resolveDiff should calculate right diff between two normalized values" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Registry" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.143" tests="4">
    <testcase classname="Registry add should register a key" name="Registry add should register a key" time="0.001">
    </testcase>
    <testcase classname="Registry add should throw error if key is invalid" name="Registry add should throw error if key is invalid" time="0">
    </testcase>
    <testcase classname="Registry add should not register if key is taken" name="Registry add should not register if key is taken" time="0">
    </testcase>
    <testcase classname="Registry add should warn if key does not exist" name="Registry add should warn if key does not exist" time="0">
    </testcase>
  </testsuite>
  <testsuite name="minmax" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.138" tests="2">
    <testcase classname="minmax angleToPoints should respond with correct values" name="minmax angleToPoints should respond with correct values" time="0">
    </testcase>
    <testcase classname="minmax degreesToPoints should respond with correct values" name="minmax degreesToPoints should respond with correct values" time="0">
    </testcase>
  </testsuite>
  <testsuite name="gradient-support" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.133" tests="1">
    <testcase classname="gradient-support hashObject should be consistent in hashing" name="gradient-support hashObject should be consistent in hashing" time="0">
    </testcase>
  </testsuite>
  <testsuite name="class string" errors="0" failures="0" skipped="0" timestamp="2024-11-14T11:48:29" time="0.13" tests="1">
    <testcase classname="class string return a space separated string with object keys" name="class string return a space separated string with object keys" time="0">
    </testcase>
  </testsuite>
</testsuites>